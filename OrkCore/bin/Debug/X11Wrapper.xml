<?xml version="1.0"?>
<doc>
    <assembly>
        <name>X11Wrapper</name>
    </assembly>
    <members>
        <member name="T:X11.EventMask">
            <summary>The <see cref="T:X11.EventMask" /> enumeration specifies the possible event selection.</summary>
            <remarks>Clients select event reporting of most events relative to a window.</remarks>
        </member>
        <member name="F:X11.EventMask.NoEventMask">
            <summary>No events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.KeyPressMask">
            <summary>Keyboard down events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.KeyReleaseMask">
            <summary>Keyboard uo events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.ButtonPressMask">
            <summary>Pointer button down events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.ButtonReleaseMask">
            <summary>Pointer button up events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.EnterWindowMask">
            <summary>Pointer window enter events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.LeaveWindowMask">
            <summary>Pointer window leave events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.PointerMotionMask">
            <summary>Pointer motion events wanted.</summary>
        </member>
        <member name="F:X11.EventMask.PointerMotionHintMask">
            <summary>Pointer motion hints wanted.</summary>
        </member>
        <member name="F:X11.EventMask.Button1MotionMask">
            <summary>Pointer motion while button 1 down wanted.</summary>
        </member>
        <member name="F:X11.EventMask.Button2MotionMask">
            <summary>Pointer motion while button 2 down wanted.</summary>
        </member>
        <member name="F:X11.EventMask.Button3MotionMask">
            <summary>Pointer motion while button 3 down wanted.</summary>
        </member>
        <member name="F:X11.EventMask.Button4MotionMask">
            <summary>Pointer motion while button 4 down wanted.</summary>
        </member>
        <member name="F:X11.EventMask.Button5MotionMask">
            <summary>Pointer motion while button 5 down wanted.</summary>
        </member>
        <member name="F:X11.EventMask.ButtonMotionMask">
            <summary>Pointer motion while any button down wanted.</summary>
        </member>
        <member name="F:X11.EventMask.KeymapStateMask">
            <summary>Keyboard state wanted at window entry and focus in.</summary>
        </member>
        <member name="F:X11.EventMask.ExposureMask">
            <summary>Any exposure wanted.</summary>
        </member>
        <member name="F:X11.EventMask.VisibilityChangeMask">
            <summary>Any change in visibility wanted.</summary>
        </member>
        <member name="F:X11.EventMask.StructureNotifyMask">
            <summary>Any change in window structure wanted.</summary>
        </member>
        <member name="F:X11.EventMask.ResizeRedirectMask">
            <summary>Redirect resize of this window wanted.</summary>
        </member>
        <member name="F:X11.EventMask.SubstructureNotifyMask">
            <summary>Substructure notification wanted.</summary>
        </member>
        <member name="F:X11.EventMask.SubstructureRedirectMask">
            <summary>Redirect structure requests on children wanted.</summary>
        </member>
        <member name="F:X11.EventMask.FocusChangeMask">
            <summary>Any change in input focus wanted.</summary>
        </member>
        <member name="F:X11.EventMask.PropertyChangeMask">
            <summary>Any change in property wanted.</summary>
        </member>
        <member name="F:X11.EventMask.ColormapChangeMask">
            <summary>Any change in colormap wanted.</summary>
        </member>
        <member name="F:X11.EventMask.OwnerGrabButtonMask">
            <summary>Automatic grabs should activate with owner_events set to True.</summary>
        </member>
        <member name="F:X11.EventMask.All">
            <summary>Combine all <see cref="T:X11.EventMask" />s.</summary>
        </member>
        <member name="T:X11.XEventName">
            <summary>The <see cref="T:X11.XEventName" /> enumeration specifies the possible event type.</summary>
        </member>
        <member name="F:X11.XEventName.KeyPress">
            <summary>The key press event type.</summary>
        </member>
        <member name="F:X11.XEventName.KeyRelease">
            <summary>The key release event type.</summary>
        </member>
        <member name="F:X11.XEventName.ButtonPress">
            <summary>The pointer button press event type.</summary>
        </member>
        <member name="F:X11.XEventName.ButtonRelease">
            <summary>The pointer button release event type.</summary>
        </member>
        <member name="F:X11.XEventName.MotionNotify">
            <summary>The motion notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.EnterNotify">
            <summary>The enter notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.LeaveNotify">
            <summary>The leave notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.FocusIn">
            <summary>The focus in event type.</summary>
        </member>
        <member name="F:X11.XEventName.FocusOut">
            <summary>The focus out event type.</summary>
        </member>
        <member name="F:X11.XEventName.KeymapNotify">
            <summary>The keyboard state at window entry and focus in event type.</summary>
        </member>
        <member name="F:X11.XEventName.Expose">
            <summary>The expose event type.</summary>
        </member>
        <member name="F:X11.XEventName.GraphicsExpose">
            <summary>The graphics expose event type.</summary>
            <remarks>Generated, when a destination region could not be computed during certain graphics requests (e. g. XCopyArea() or XCopyPlane()).</remarks>
        </member>
        <member name="F:X11.XEventName.NoExpose">
            <summary>The no expose event type.</summary>
            <summary>Generated,  whenever a graphics request that might produce a GraphicsExpose event does not produce any GraphicsExpose.</summary>
        </member>
        <member name="F:X11.XEventName.VisibilityNotify">
            <summary>The visibility notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.CreateNotify">
            <summary>The create notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.DestroyNotify">
            <summary>The destroy notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.UnmapNotify">
            <summary>The unmap notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.MapNotify">
            <summary>The map notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.MapRequest">
            <summary>The map notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.ReparentNotify">
            <summary>The reparent notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.ConfigureNotify">
            <summary>The configure notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.ConfigureRequest">
            <summary>The configure request event type.</summary>
        </member>
        <member name="F:X11.XEventName.GravityNotify">
            <summary>The gravity notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.ResizeRequest">
            <summary>The resize request event type.</summary>
        </member>
        <member name="F:X11.XEventName.CirculateNotify">
            <summary>The circulate notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.CirculateRequest">
            <summary>The circulate request event type.</summary>
        </member>
        <member name="F:X11.XEventName.PropertyNotify">
            <summary>The property notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.SelectionClear">
            <summary>The selection clear event type.</summary>
        </member>
        <member name="F:X11.XEventName.SelectionRequest">
            <summary>The selection request event type.</summary>
        </member>
        <member name="F:X11.XEventName.SelectionNotify">
            <summary>The selection notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.ColormapNotify">
            <summary>The colormap notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.ClientMessage">
            <summary>The client message event type.</summary>
        </member>
        <member name="F:X11.XEventName.MappingNotify">
            <summary>The mapping notify event type.</summary>
        </member>
        <member name="F:X11.XEventName.GenericEvent">
            <summary>The standard event for all newer extensions.</summary>
        </member>
        <member name="F:X11.XEventName.LASTEvent">
            <summary>Must be bigger than any event.</summary>
        </member>
        <member name="T:X11.XRequest">
            <summary>The <see cref="T:X11.XRequest" /> enumeration defined protocol request codes.</summary>
        </member>
        <member name="F:X11.XRequest.X_CreateWindow">
            <summary>Protocol request to XCreateWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeWindowAttributes">
            <summary>Protocol request to XChangeWindowAttributes().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetWindowAttributes">
            <summary>Protocol request to XGetWindowAttributes().</summary>
        </member>
        <member name="F:X11.XRequest.X_DestroyWindow">
            <summary>Protocol request to XDestroyWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_DestroySubwindows">
            <summary>Protocol request to XDestroyWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeSaveSet">
            <summary>Protocol request to XChangeSaveSet().</summary>
        </member>
        <member name="F:X11.XRequest.X_ReparentWindow">
            <summary>Protocol request to XReparentWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_MapWindow">
            <summary>Protocol request to XMapWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_MapSubwindows">
            <summary>Protocol request to XMapSubwindows().</summary>
        </member>
        <member name="F:X11.XRequest.X_UnmapWindow">
            <summary>Protocol request to XUnmapWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_UnmapSubwindows">
            <summary>Protocol request to XUnmapSubwindows().</summary>
        </member>
        <member name="F:X11.XRequest.X_ConfigureWindow">
            <summary>Protocol request to XConfigureWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_CirculateWindow">
            <summary>Protocol request to XCirculateWindow().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetGeometry">
            <summary>Protocol request to XGetGeometry().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryTree">
            <summary>Protocol request to XQueryTree().</summary>
        </member>
        <member name="F:X11.XRequest.X_InternAtom">
            <summary>Protocol request to XInternAtom().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetAtomName">
            <summary>Protocol request to XGetAtomName().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeProperty">
            <summary>Protocol request to XChangeProperty().</summary>
        </member>
        <member name="F:X11.XRequest.X_DeleteProperty">
            <summary>Protocol request to XDeleteProperty().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetProperty">
            <summary>Protocol request to XGetProperty().</summary>
        </member>
        <member name="F:X11.XRequest.X_ListProperties">
            <summary>Protocol request to XListProperties().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetSelectionOwner">
            <summary>Protocol request to XSetSelectionOwner().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetSelectionOwner">
            <summary>Protocol request to XGetSelectionOwner().</summary>
        </member>
        <member name="F:X11.XRequest.X_ConvertSelection">
            <summary>Protocol request to XConvertSelection().</summary>
        </member>
        <member name="F:X11.XRequest.X_SendEvent">
            <summary>Protocol request to XSendEvent().</summary>
        </member>
        <member name="F:X11.XRequest.X_GrabPointer">
            <summary>Protocol request to XGrabPointer().</summary>
        </member>
        <member name="F:X11.XRequest.X_UngrabPointer">
            <summary>Protocol request to XUngrabPointer().</summary>
        </member>
        <member name="F:X11.XRequest.X_GrabButton">
            <summary>Protocol request to XGrabButton().</summary>
        </member>
        <member name="F:X11.XRequest.X_UngrabButton">
            <summary>Protocol request to XUngrabButton().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeActivePointerGrab">
            <summary>Protocol request to XChangeActivePointerGrab().</summary>
        </member>
        <member name="F:X11.XRequest.X_GrabKeyboard">
            <summary>Protocol request to XGrabKeyboard().</summary>
        </member>
        <member name="F:X11.XRequest.X_UngrabKeyboard">
            <summary>Protocol request to XUngrabKeyboard().</summary>
        </member>
        <member name="F:X11.XRequest.X_GrabKey">
            <summary>Protocol request to XGrabKey().</summary>
        </member>
        <member name="F:X11.XRequest.X_UngrabKey">
            <summary>Protocol request to XUngrabKey().</summary>
        </member>
        <member name="F:X11.XRequest.X_AllowEvents">
            <summary>Protocol request to XAllowEvents().</summary>
        </member>
        <member name="F:X11.XRequest.X_GrabServer">
            <summary>Protocol request to XGrabServer().</summary>
        </member>
        <member name="F:X11.XRequest.X_UngrabServer">
            <summary>Protocol request to XUngrabServer().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryPointer">
            <summary>Protocol request to XQueryPointer().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetMotionEvents">
            <summary>Protocol request to XGetMotionEvents().</summary>
        </member>
        <member name="F:X11.XRequest.X_TranslateCoords">
            <summary>Protocol request to XTranslateCoords().</summary>
        </member>
        <member name="F:X11.XRequest.X_WarpPointer">
            <summary>Protocol request to XWarpPointer().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetInputFocus">
            <summary>Protocol request to XSetInputFocus().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetInputFocus">
            <summary>Protocol request to XGetInputFocus().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryKeymap">
            <summary>Protocol request to XQueryKeymap().</summary>
        </member>
        <member name="F:X11.XRequest.X_OpenFont">
            <summary>Protocol request to XOpenFont().</summary>
        </member>
        <member name="F:X11.XRequest.X_CloseFont">
            <summary>Protocol request to XCloseFont().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryFont">
            <summary>Protocol request to XQueryFont().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryTextExtents">
            <summary>Protocol request to XQueryTextExtents().</summary>
        </member>
        <member name="F:X11.XRequest.X_ListFonts">
            <summary>Protocol request to XListFonts().</summary>
        </member>
        <member name="F:X11.XRequest.X_ListFontsWithInfo">
            <summary>Protocol request to XListFontsWithInfo().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetFontPath">
            <summary>Protocol request to XSetFontPath().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetFontPath">
            <summary>Protocol request to XGetFontPath().</summary>
        </member>
        <member name="F:X11.XRequest.X_CreatePixmap">
            <summary>Protocol request to XCreatePixmap().</summary>
        </member>
        <member name="F:X11.XRequest.X_FreePixmap">
            <summary>Protocol request to XFreePixmap().</summary>
        </member>
        <member name="F:X11.XRequest.X_CreateGC">
            <summary>Protocol request to XCreateGC().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeGC">
            <summary>Protocol request to XChangeGC().</summary>
        </member>
        <member name="F:X11.XRequest.X_CopyGC">
            <summary>Protocol request to XCopyGC().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetDashes">
            <summary>Protocol request to XSetDashes().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetClipRectangles">
            <summary>Protocol request to XSetClipRectangles().</summary>
        </member>
        <member name="F:X11.XRequest.X_FreeGC">
            <summary>Protocol request to XFreeGC().</summary>
        </member>
        <member name="F:X11.XRequest.X_ClearArea">
            <summary>Protocol request to XClearArea().</summary>
        </member>
        <member name="F:X11.XRequest.X_CopyArea">
            <summary>Protocol request to XCopyArea().</summary>
        </member>
        <member name="F:X11.XRequest.X_CopyPlane">
            <summary>Protocol request to XCopyPlane().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyPoint">
            <summary>Protocol request to XPolyPoint().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyLine">
            <summary>Protocol request to XPolyLine().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolySegment">
            <summary>Protocol request to XPolySegment().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyRectangle">
            <summary>Protocol request to XPolyRectangle().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyArc">
            <summary>Protocol request to XPolyArc().</summary>
        </member>
        <member name="F:X11.XRequest.X_FillPoly">
            <summary>Protocol request to XFillPoly().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyFillRectangle">
            <summary>Protocol request to XPolyFillRectangle().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyFillArc">
            <summary>Protocol request to XPolyFillArc().</summary>
        </member>
        <member name="F:X11.XRequest.X_PutImage">
            <summary>Protocol request to XPutImage().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetImage">
            <summary>Protocol request to XGetImage().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyText8">
            <summary>Protocol request to XPolyText8().</summary>
        </member>
        <member name="F:X11.XRequest.X_PolyText16">
            <summary>Protocol request to XPolyText16().</summary>
        </member>
        <member name="F:X11.XRequest.X_ImageText8">
            <summary>Protocol request to XImageText8().</summary>
        </member>
        <member name="F:X11.XRequest.X_ImageText16">
            <summary>Protocol request to XImageText16().</summary>
        </member>
        <member name="F:X11.XRequest.X_CreateColormap">
            <summary>Protocol request to XCreateColormap().</summary>
        </member>
        <member name="F:X11.XRequest.X_FreeColormap">
            <summary>Protocol request to XFreeColormap().</summary>
        </member>
        <member name="F:X11.XRequest.X_CopyColormapAndFree">
            <summary>Protocol request to XCopyColormapAndFree().</summary>
        </member>
        <member name="F:X11.XRequest.X_InstallColormap">
            <summary>Protocol request to XInstallColormap().</summary>
        </member>
        <member name="F:X11.XRequest.X_UninstallColormap">
            <summary>Protocol request to XUninstallColormap().</summary>
        </member>
        <member name="F:X11.XRequest.X_ListInstalledColormaps">
            <summary>Protocol request to XListInstalledColormaps().</summary>
        </member>
        <member name="F:X11.XRequest.X_AllocColor">
            <summary>Protocol request to XAllocColor().</summary>
        </member>
        <member name="F:X11.XRequest.X_AllocNamedColor">
            <summary>Protocol request to XAllocNamedColor().</summary>
        </member>
        <member name="F:X11.XRequest.X_AllocColorCells">
            <summary>Protocol request to XAllocColorCells().</summary>
        </member>
        <member name="F:X11.XRequest.X_AllocColorPlanes">
            <summary>Protocol request to XAllocColorPlanes().</summary>
        </member>
        <member name="F:X11.XRequest.X_FreeColors">
            <summary>Protocol request to XFreeColors().</summary>
        </member>
        <member name="F:X11.XRequest.X_StoreColors">
            <summary>Protocol request to XStoreColors().</summary>
        </member>
        <member name="F:X11.XRequest.X_StoreNamedColor">
            <summary>Protocol request to XStoreNamedColor().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryColors">
            <summary>Protocol request to XUninstallColormap().</summary>
        </member>
        <member name="F:X11.XRequest.X_LookupColor">
            <summary>Protocol request to XLookupColor().</summary>
        </member>
        <member name="F:X11.XRequest.X_CreateCursor">
            <summary>Protocol request to XCreateCursor().</summary>
        </member>
        <member name="F:X11.XRequest.X_CreateGlyphCursor">
            <summary>Protocol request to XCreateGlyphCursor().</summary>
        </member>
        <member name="F:X11.XRequest.X_FreeCursor">
            <summary>Protocol request to XFreeCursor().</summary>
        </member>
        <member name="F:X11.XRequest.X_RecolorCursor">
            <summary>Protocol request to XRecolorCursor().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryBestSize">
            <summary>Protocol request to XQueryBestSize().</summary>
        </member>
        <member name="F:X11.XRequest.X_QueryExtension">
            <summary>Protocol request to XQueryExtension().</summary>
        </member>
        <member name="F:X11.XRequest.X_ListExtensions">
            <summary>Protocol request to XListExtensions().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeKeyboardMapping">
            <summary>Protocol request to XChangeKeyboardMapping().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetKeyboardMapping">
            <summary>Protocol request to XGetKeyboardMapping().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeKeyboardControl">
            <summary>Protocol request to XChangeKeyboardControl().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetKeyboardControl">
            <summary>Protocol request to XGetKeyboardControl().</summary>
        </member>
        <member name="F:X11.XRequest.X_Bell">
            <summary>Protocol request to XBell().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangePointerControl">
            <summary>Protocol request to XChangePointerControl().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetPointerControl">
            <summary>Protocol request to XGetPointerControl().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetScreenSaver">
            <summary>Protocol request to XSetScreenSaver().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetScreenSaver">
            <summary>Protocol request to XGetScreenSaver().</summary>
        </member>
        <member name="F:X11.XRequest.X_ChangeHosts">
            <summary>Protocol request to XChangeHosts().</summary>
        </member>
        <member name="F:X11.XRequest.X_ListHosts">
            <summary>Protocol request to XListHosts().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetAccessControl">
            <summary>Protocol request to XSetAccessControl().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetCloseDownMode">
            <summary>Protocol request to XSetCloseDownMode().</summary>
        </member>
        <member name="F:X11.XRequest.X_KillClient">
            <summary>Protocol request to XKillClient().</summary>
        </member>
        <member name="F:X11.XRequest.X_RotateProperties">
            <summary>Protocol request to XRotateProperties().</summary>
        </member>
        <member name="F:X11.XRequest.X_ForceScreenSaver">
            <summary>Protocol request to XForceScreenSaver().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetPointerMapping">
            <summary>Protocol request to XSetPointerMapping().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetPointerMapping">
            <summary>Protocol request to XGetPointerMapping().</summary>
        </member>
        <member name="F:X11.XRequest.X_SetModifierMapping">
            <summary>Protocol request to XSetModifierMapping().</summary>
        </member>
        <member name="F:X11.XRequest.X_GetModifierMapping">
            <summary>Protocol request to XGetModifierMapping().</summary>
        </member>
        <member name="F:X11.XRequest.X_NoOperation">
            <summary>Protocol request to XNoOperation().</summary>
        </member>
        <member name="T:X11.CrossingMode">
            <summary>The <see cref="T:X11.CrossingMode" /> enumeration specifies notification modes for Enter and Leave events on a widget.</summary>
            <remarks>The mode member is set to indicate whether the focus events are normal focus events ( NotifyNormal,), focus events while
            grabbed (NotifyWhileGrabbed), focus events when a grab activates (NotifyGrab), or focus events when a grab deactivates (NotifyUngrab).</remarks>
        </member>
        <member name="F:X11.CrossingMode.NotifyNormal">
            <summary>Crossing because of pointer motion.</summary>
        </member>
        <member name="F:X11.CrossingMode.NotifyGrab">
            <summary>Crossing because a grab is activated.</summary>
        </member>
        <member name="F:X11.CrossingMode.NotifyUngrab">
            <summary>Crossing because a grab is deactivated.</summary>
        </member>
        <member name="F:X11.CrossingMode.NotifyWhileGrabbed">
            <summary>Focus changed while under a grab, so the window won't get it back when the grab ends.</summary>
            <remarks>Occurs in Alt-Tab, for instance.</remarks>
        </member>
        <member name="T:X11.GrabDetail">
            <summary>The <see cref="T:X11.GrabDetail" /> enumeration specifies
            grab details for Enter and Leave events on a widget.</summary>
        </member>
        <member name="F:X11.GrabDetail.NotifyNormal">
            <summary>The keyboard is not grabbed while the crossing event occures.</summary>
        </member>
        <member name="F:X11.GrabDetail.NotifyGrab">
            <summary>The keyboard is grabbed while the crossing event occures.</summary>
        </member>
        <member name="F:X11.GrabDetail.NotifyUngrab">
            <summary>The keyboard is ungrabbed while the crossing event occures.</summary>
        </member>
        <member name="F:X11.GrabDetail.NotifyWhileGrabbed">
            <summary>Not used for crossing event.</summary>
        </member>
        <member name="T:X11.CrossingDetail">
            <summary>The <see cref="T:X11.CrossingDetail" /> enumeration specifies
            notification details for Enter and Leave events on a widget.</summary>
            <remarks>To understand the notification details: The focus change can,
            but must not, be initiated by the pointer. The focus change can, but
            must not affect the window, that currently owns the pointer, or an
            ancestor or an inferior of the pointer window.</remarks>
        </member>
        <member name="F:X11.CrossingDetail.NotifyAncestor">
            <summary>The window is entered from an ancestor or left towards an ancestor.</summary>
        </member>
        <member name="F:X11.CrossingDetail.NotifyVirtual">
            <summary>The pointer moves between an ancestor and an inferior of the window.</summary>
        </member>
        <member name="F:X11.CrossingDetail.NotifyInferior">
            <summary>The window is entered from an inferior or left towards an inferior.</summary>
        </member>
        <member name="F:X11.CrossingDetail.NotifyNonlinear">
            <summary>The window is entered from or left towards a window which is neither an ancestor nor an inferior.</summary>
        </member>
        <member name="F:X11.CrossingDetail.NotifyNonlinearVirtual">
            <summary>The pointer moves between two windows which are not ancestors of each other and the window is part of the ancestor chain between one of these windows and their least common ancestor.</summary>
        </member>
        <member name="F:X11.CrossingDetail.NotifyPointer">
            <summary>The window that is entered or left is a window where the pointer is in, or is an ancestor or an inferior of the window where the pointer is in.</summary>
        </member>
        <member name="F:X11.CrossingDetail.NotifyPointerRoot">
            <summary>The pointer moves between two windows where one of them is the root windows (of the screen).</summary>
        </member>
        <member name="F:X11.CrossingDetail.NotifyDetailNone">
            <summary>The pointer moves with root window involved, but <c>NotifyPointerRoot</c> is not suitable/applicable.</summary>
        </member>
        <member name="T:X11.XAnyEvent">
            <summary>The <see cref="T:X11.XAnyEvent" /> structure defines members, that are common for all event structures.</summary>
        </member>
        <member name="F:X11.XAnyEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XAnyEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XAnyEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XAnyEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XAnyEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="T:X11.XKeyEvent">
            <summary>The <see cref="T:X11.XKeyEvent" /> structure contains information about keys that logically change state.</summary>
        </member>
        <member name="F:X11.XKeyEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XKeyEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XKeyEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XKeyEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XKeyEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="F:X11.XKeyEvent.root">
            <summary>The root window that the event occurred on.</summary>
        </member>
        <member name="F:X11.XKeyEvent.subwindow">
            <summary>The child window that the event occurred on.</summary>
        </member>
        <member name="F:X11.XKeyEvent.time">
            <summary>The time when the event was generated - expressed in milliseconds.</summary>
        </member>
        <member name="F:X11.XKeyEvent.x">
            <summary>The pointer x coordinate in event window.</summary>
        </member>
        <member name="F:X11.XKeyEvent.y">
            <summary>The pointer y coordinate in event window.</summary>
        </member>
        <member name="F:X11.XKeyEvent.x_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XKeyEvent.y_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XKeyEvent.state">
            <summary>The key or button mask. Indicate the logical state of the pointer buttons and modifier keys just
            prior to the event, which is the bitwise inclusive OR of one or more of the button or modifier key masks:
            Button1Mask, Button2Mask, Button3Mask, Button4Mask, Button5Mask, ShiftMask, LockMask, ControlMask,
            Mod1Mask, Mod2Mask, Mod3Mask, Mod4Mask, and Mod5Mask.</summary>
        </member>
        <member name="F:X11.XKeyEvent.keycode">
            <summary>The  number that represents a physical key on the keyboard. The keycode is an arbitrary representation for any key on the keyboard.</summary>
        </member>
        <member name="F:X11.XKeyEvent.same_screen">
            <summary>Indicate whether the event window is on the same screen as the root window and can be either <c>true</c> or <c>false</c>.</summary>
            <remarks>If <c>true</c>, the event and root windows are on the same screen. If <c>false</c>, the event and root windows are not on the same screen.</remarks>
        </member>
        <member name="T:X11.XButtonEvent">
            <summary>The <see cref="T:X11.XKeyEvent" /> structure contains information about buttons that logically change state.</summary>
        </member>
        <member name="F:X11.XButtonEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XButtonEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XButtonEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XButtonEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XButtonEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="F:X11.XButtonEvent.root">
            <summary>The root window that the event occurred on.</summary>
        </member>
        <member name="F:X11.XButtonEvent.subwindow">
            <summary>The child window that the event occurred on.</summary>
        </member>
        <member name="F:X11.XButtonEvent.time">
            <summary>The time when the event was generated - expressed in milliseconds.</summary>
        </member>
        <member name="F:X11.XButtonEvent.x">
            <summary>The pointer x coordinate in event window.</summary>
        </member>
        <member name="F:X11.XButtonEvent.y">
            <summary>The pointer y coordinate in event window.</summary>
        </member>
        <member name="F:X11.XButtonEvent.x_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XButtonEvent.y_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XButtonEvent.state">
            <summary>The key or button mask.</summary>
        </member>
        <member name="F:X11.XButtonEvent.button">
            <summary>The currently pressed pointer button.</summary>
            <remarks>The left button is '1', the middle button is '2', the right button is '3', the wheel up us '4', the wheel down is '5', the Xtra1 is '6' and the Xtra2 is '7'.</remarks>
            <summary>Represents the pointer button that changed state and can be the Button1, Button2, Button3, Button4, or Button5 value.</summary>
        </member>
        <member name="F:X11.XButtonEvent.same_screen">
            <summary>Indicate whether the event window is on the same screen as the root window and can be either <c>true</c> or <c>false</c>.</summary>
            <remarks>If <c>true</c>, the event and root windows are on the same screen. If <c>false</c>, the event and root windows are not on the same screen.</remarks>
        </member>
        <member name="M:X11.XButtonEvent.Copy">
            <summary>Provide a deep copy.</summary>
            <returns>A deep copy.<see cref="T:X11.XButtonEvent" /></returns>
        </member>
        <member name="T:X11.XMotionEvent">
            <summary>The <see cref="T:X11.XKeyEvent" /> structure contains information when the pointer logically moves.</summary>
        </member>
        <member name="F:X11.XMotionEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XMotionEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XMotionEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XMotionEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XMotionEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="F:X11.XMotionEvent.root">
            <summary>The root window that the event occurred on.</summary>
        </member>
        <member name="F:X11.XMotionEvent.subwindow">
            <summary>The child window that the event occurred on.</summary>
        </member>
        <member name="F:X11.XMotionEvent.time">
            <summary>The time when the event was generated - expressed in milliseconds.</summary>
        </member>
        <member name="F:X11.XMotionEvent.x">
            <summary>The pointer x coordinate in event window.</summary>
        </member>
        <member name="F:X11.XMotionEvent.y">
            <summary>The pointer y coordinate in event window.</summary>
        </member>
        <member name="F:X11.XMotionEvent.x_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XMotionEvent.y_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XMotionEvent.state">
            <summary>The key or button mask.</summary>
        </member>
        <member name="F:X11.XMotionEvent.is_hint">
            <summary>
                <c>NotifyNormal</c> or <c>NotifyHint</c>.</summary>
        </member>
        <member name="F:X11.XMotionEvent.same_screen">
            <summary>Indicate whether the event window is on the same screen as the root window and can be either <c>true</c> or <c>false</c>.</summary>
            <remarks>If <c>true</c>, the event and root windows are on the same screen. If <c>false</c>, the event and root windows are not on the same screen.</remarks>
        </member>
        <member name="T:X11.XCrossingEvent">
            <summary>The <see cref="T:X11.XCrossingEvent" /> structure contains information when crosses a window border.</summary>
            <remarks>A <c>LeaveNotify</c> event occurs in the window being left and an <c>EnterNotify</c> event occurs in the window being entered.</remarks>
        </member>
        <member name="F:X11.XCrossingEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.root">
            <summary>The root window that the event occurred on.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.subwindow">
            <summary>The child window that the event occurred on.</summary>
            <remarks>For a LeaveNotify event, if a child of the event window contains the initial position
            of the pointer, the subwindow component is set to that child. Otherwise, the X server sets the
            subwindow member to None. For an EnterNotify event, if a child of the event window contains the
            final pointer position, the subwindow component is set to that child or None. For details see:
            "http://menehune.opt.wfu.edu/Kokua/Irix_6.5.21_doc_cd/usr/share/Insight/library/SGI_bookshelves/SGI_Developer/books/XLib_PG/sgi_html/re10.html"</remarks>
        </member>
        <member name="F:X11.XCrossingEvent.time">
            <summary>The time when the event was generated and is expressed in milliseconds.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.x">
            <summary>The pointer x coordinate in event window.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.y">
            <summary>The pointer y coordinate in event window.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.x_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.y_root">
            <summary>The pointer x coordinate relative to root window.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.mode">
            <summary>Indicate whether the events are normal events, pseudo-motion events
            when a grab activates, or pseudo-motion events when a grab deactivates.</summary>
            <remarks>The X server can set this member to NotifyNormal, NotifyGrab, or NotifyUngrab.</remarks>
        </member>
        <member name="F:X11.XCrossingEvent.detail">
            <summary>Indicate the notify detail and can be NotifyAncestor, NotifyVirtual,
            NotifyInferior, NotifyNonlinear, or NotifyNonlinearVirtual.</summary>
        </member>
        <member name="F:X11.XCrossingEvent.same_screen">
            <summary>Indicate whether the event window is on the same screen as the root window and can be either <c>true</c> or <c>false</c>.</summary>
            <remarks>If <c>true</c>, the event and root windows are on the same screen. If <c>false</c>, the event and root windows are not on the same screen.</remarks>
        </member>
        <member name="F:X11.XCrossingEvent.focus">
            <summary>Indicate whether the event window is the focus window or an inferior of the focus window.
            The X server can set this member to either <c>true</c> or <c>false</c>.</summary>
            <remarks>If <c>true</c>, the event window is the focus window or an inferior of the focus window.
            If <c>false</c>, the event window is not the focus window or an inferior of the focus window.</remarks>
        </member>
        <member name="F:X11.XCrossingEvent.state">
            <summary>Indicate the state of the pointer buttons and modifier keys just prior to the event.</summary>
            <remarks>The X server can set this member to the bitwise inclusive OR of one or more of the button or modifier key masks:
            Button1Mask, Button2Mask, Button3Mask, Button4Mask, Button5Mask, ShiftMask, LockMask, ControlMask,
            Mod1Mask, Mod2Mask, Mod3Mask, Mod4Mask, Mod5Mask.</remarks>
        </member>
        <member name="T:X11.XFocusChangeEvent">
            <summary>The <see cref="T:X11.XCrossingEvent" /> structure contains information when the input focus changes.</summary>
            <remarks>The X server can report FocusIn or FocusOut events. The keyboard is always attached to some window
            (typically, the root window or a top-level window), which is called the focus window. The focus window and the
            position of the pointer determine the window that receives keyboard input. Clients may need to know when the
            input focus changes to control highlighting of areas on the screen.</remarks>
        </member>
        <member name="F:X11.XFocusChangeEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XFocusChangeEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XFocusChangeEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XFocusChangeEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XFocusChangeEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="F:X11.XFocusChangeEvent.mode">
            <summary>Indicate whether the focus events are normal focus events,
            focus events while grabbed, focus events when a grab activates, or
            focus events when a grab deactivates.</summary>
            <remarks>The X server can set the mode member to NotifyNormal (0),
            NotifyWhileGrabbed (3), NotifyGrab (1), or NotifyUngrab (2). All FocusOut events caused
            by a window unmap are generated after any UnmapNotify event; however,
            the X protocol does not constrain the ordering of FocusOut events with respect
            to generated EnterNotify, LeaveNotify, VisibilityNotify, and Expose events.</remarks>
        </member>
        <member name="F:X11.XFocusChangeEvent.detail">
            <summary>The focus change details according the affected window.</summary>
        </member>
        <member name="T:X11.XKeymapEvent">
            <summary>The <see cref="T:X11.XCrossingEvent" /> structure contains information about changes in a client's keyboard state.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.window">
            <summary>Not used but is present to aid some toolkits</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector0">
            <summary>The bit vector of the keyboard for keys 0 (zero-based) to 7.</summary>
            <remarks>Each bit set to 1 indicates that the corresponding key is currently pressed.
            The vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys
            8N to 8N + 7 with the least-significant bit in the byte representing key 8N.</remarks>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector1">
            <summary>The bit vector of the keyboard for keys 8 (zero-based) to 15.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector2">
            <summary>The bit vector of the keyboard for keys 16 (zero-based) to 23.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector3">
            <summary>The bit vector of the keyboard for keys 24 (zero-based) to 31.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector4">
            <summary>The bit vector of the keyboard for keys 32 (zero-based) to 39.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector5">
            <summary>The bit vector of the keyboard for keys 40 (zero-based) to 47.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector6">
            <summary>The bit vector of the keyboard for keys 48 (zero-based) to 55.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector7">
            <summary>The bit vector of the keyboard for keys 56 (zero-based) to 63.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector8">
            <summary>The bit vector of the keyboard for keys 64 (zero-based) to 71.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector9">
            <summary>The bit vector of the keyboard for keys 72 (zero-based) to 79.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector10">
            <summary>The bit vector of the keyboard for keys 80 (zero-based) to 87.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector11">
            <summary>The bit vector of the keyboard for keys 88 (zero-based) to 96.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector12">
            <summary>The bit vector of the keyboard for keys 96 (zero-based) to 103.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector13">
            <summary>The bit vector of the keyboard for keys 104 (zero-based) to 111.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector14">
            <summary>The bit vector of the keyboard for keys 112 (zero-based) to 119.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector15">
            <summary>The bit vector of the keyboard for keys 120 (zero-based) to 127.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector16">
            <summary>The bit vector of the keyboard for keys 128 (zero-based) to 135.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector17">
            <summary>The bit vector of the keyboard for keys 136 (zero-based) to 143.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector18">
            <summary>The bit vector of the keyboard for keys 144 (zero-based) to 151.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector19">
            <summary>The bit vector of the keyboard for keys 152 (zero-based) to 159.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector20">
            <summary>The bit vector of the keyboard for keys 160 (zero-based) to 167.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector21">
            <summary>The bit vector of the keyboard for keys 168 (zero-based) to 175.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector22">
            <summary>The bit vector of the keyboard for keys 176 (zero-based) to 183.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector23">
            <summary>The bit vector of the keyboard for keys 184 (zero-based) to 191.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector24">
            <summary>The bit vector of the keyboard for keys 192 (zero-based) to 199.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector25">
            <summary>The bit vector of the keyboard for keys 200 (zero-based) to 207.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector26">
            <summary>The bit vector of the keyboard for keys 208 (zero-based) to 215.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector27">
            <summary>The bit vector of the keyboard for keys 216 (zero-based) to 223.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector28">
            <summary>The bit vector of the keyboard for keys 224 (zero-based) to 231.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector29">
            <summary>The bit vector of the keyboard for keys 232 (zero-based) to 239.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector30">
            <summary>The bit vector of the keyboard for keys 240 (zero-based) to 247.</summary>
        </member>
        <member name="F:X11.XKeymapEvent.key_vector31">
            <summary>The bit vector of the keyboard for keys 248 (zero-based) to 255.</summary>
        </member>
        <member name="T:X11.XExposeEvent">
            <summary>The <see cref="T:X11.XExposeEvent" /> structure contains information when the contents of window regions have been lost.</summary>
        </member>
        <member name="F:X11.XExposeEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XExposeEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XExposeEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XExposeEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XExposeEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="F:X11.XExposeEvent.x">
            <summary>The upper-left corner coordinates of the rectangle relative to the window's origin.</summary>
        </member>
        <member name="F:X11.XExposeEvent.y">
            <summary>The upper-left corner coordinates of the rectangle relative to the window's origin.</summary>
        </member>
        <member name="F:X11.XExposeEvent.width">
            <summary>The size (extent) of the rectangle.</summary>
        </member>
        <member name="F:X11.XExposeEvent.height">
            <summary>The size (extent) of the rectangle.</summary>
        </member>
        <member name="F:X11.XExposeEvent.count">
            <summary>The number of Expose events that are to follow.</summary>
            <remarks> If count is zero, no more Expose events follow for this window. However, if count is nonzero,
            at least that number of Expose events (and possibly more) follow for this window. Simple applications
            that do not want to optimize redisplay by distinguishing between subareas of its window can just ignore
            all Expose events with nonzero counts and perform full redisplays on events with zero counts.</remarks>
        </member>
        <member name="T:X11.XGraphicsExposeEvent">
            <summary>The <see cref="T:X11.XGraphicsExposeEvent" /> structure contains information  when a destination region could not
            be computed during certain graphics requests: XCopyArea() or XCopyPlane().</summary>
            <remarks>The X server generates this event whenever a destination region could not be computed due to an obscured
            or out-of-bounds source region. In addition, the X server guarantees to report contiguously all of the regions
            exposed by some graphics request (for example, copying an area of a drawable to a destination drawable).</remarks>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.drawable">
            <summary>The drawable of the destination region on which the graphics request was to be performed.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.x">
            <summary>The upper-left corner coordinates of the rectangle relative to the window's origin.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.y">
            <summary>The upper-left corner coordinates of the rectangle relative to the window's origin.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.width">
            <summary>The size (extent) of the rectangle.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.height">
            <summary>The size (extent) of the rectangle.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.count">
            <summary>he number of GraphicsExpose events to follow.</summary>
            <remarks>If count is zero, no more GraphicsExpose events follow for this window. However,
            if count is nonzero, at least that number of GraphicsExpose events (and possibly more) are
            to follow for this window. </remarks>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.major_code">
            <summary>The core is CopyArea or CopyPlane.</summary>
        </member>
        <member name="F:X11.XGraphicsExposeEvent.minor_code">
            <summary>Not defined in the core.</summary>
        </member>
        <member name="T:X11.XNoExposeEvent">
            <summary>The <see cref="T:X11.XNoExposeEvent" /> structure contains information  when a destination region could not
            be computed during certain graphics requests: XCopyArea() or XCopyPlane().</summary>
            <remarks>The X server generates a NoExpose event whenever a graphics request that might produce a GraphicsExpose
            event does not produce any. In other words, the client is really asking for a GraphicsExpose event but instead
            receives a NoExpose event.</remarks>
        </member>
        <member name="F:X11.XNoExposeEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XNoExposeEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XNoExposeEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XNoExposeEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XNoExposeEvent.drawable">
            <summary>The drawable of the destination region on which the graphics request was to be performed.</summary>
        </member>
        <member name="F:X11.XNoExposeEvent.major_code">
            <summary>The core is CopyArea or CopyPlane.</summary>
        </member>
        <member name="F:X11.XNoExposeEvent.minor_code">
            <summary>Not defined in the core.</summary>
        </member>
        <member name="T:X11.XVisibilityEvent">
            <summary>The <see cref="T:X11.XVisibilityEvent" /> structure contains information when the visibility of the specified window changes.</summary>
            <remarks>A region of a window is visible if someone looking at the screen can actually see it. The X server generates
            this event whenever the visibility changes state. However, this event is never generated for windows whose class is InputOnly .</remarks>
        </member>
        <member name="F:X11.XVisibilityEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XVisibilityEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XVisibilityEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XVisibilityEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XVisibilityEvent.window">
            <summary>The 'event' window it is reported relative to.</summary>
        </member>
        <member name="F:X11.XVisibilityEvent.state">
            <summary>The state of the window's visibility and can be VisibilityUnobscured, VisibilityPartiallyObscured, or VisibilityFullyObscured.</summary>
        </member>
        <member name="T:X11.XCreateWindowEvent">
            <summary>The <see cref="T:X11.XCreateWindowEvent" /> structure contains information about creation of windows.</summary>
            <remarks>The X server generates this event whenever a client application creates a window by
            calling XCreateWindow() or XCreateSimpleWindow().</remarks>
        </member>
        <member name="F:X11.XCreateWindowEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.parent">
            <summary>The created window's parent.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.window">
            <summary>The window that is created.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.x">
            <summary>The window location.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.y">
            <summary>The window location.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.width">
            <summary>The window size.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.height">
            <summary>The window size.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.border_width">
            <summary>The border width.</summary>
        </member>
        <member name="F:X11.XCreateWindowEvent.override_redirect">
            <summary>The override-redirect attribute of the window.</summary>
            <remarks>Window manager clients normally should ignore this window if the override_redirect member is <c>true</c>.</remarks>
        </member>
        <member name="T:X11.XDestroyWindowEvent">
            <summary>The <see cref="T:X11.XDestroyWindowEvent" /> structure contains information about which windows are destroyed.</summary>
            <remarks>The X server generates this event whenever a client application destroys a window by
            calling XDestroyWindow() or XDestroySubwindows().</remarks>
        </member>
        <member name="F:X11.XDestroyWindowEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XDestroyWindowEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XDestroyWindowEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XDestroyWindowEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XDestroyWindowEvent.xevent">
            <summary>Either the destroyed window or to its parent, depending on whether StructureNotify or SubstructureNotify was selected.</summary>
        </member>
        <member name="F:X11.XDestroyWindowEvent.window">
            <summary>The window that is destroyed.</summary>
        </member>
        <member name="T:X11.XUnmapEvent">
            <summary>The <see cref="T:X11.XUnmapEvent" /> structure contains information about which windows are unmapped.</summary>
            <remarks>The X server generates this event type whenever a client application changes the window's state from mapped to unmapped.</remarks>
        </member>
        <member name="F:X11.XUnmapEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XUnmapEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XUnmapEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XUnmapEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XUnmapEvent.xevent">
            <remarcs>Either the unmapped window or to its parent, depending on whether StructureNotify or SubstructureNotify was selected.</remarcs>
        </member>
        <member name="F:X11.XUnmapEvent.window">
            <summary>The window that is unmaped.</summary>
        </member>
        <member name="F:X11.XUnmapEvent.from_configure">
            <summary>Sset to <c>true</c> if the event was generated as a result of a resizing of the window's parent when the window itself had a win_gravity of UnmapGravity..</summary>
        </member>
        <member name="T:X11.XMapEvent">
            <summary>The <see cref="T:X11.XMapEvent" /> structure contains information about which windows are mapped.</summary>
            <remarks>The X server generates this event type whenever a client application changes the window's state from unmapped
            to mapped by calling XMapWindow(), XMapRaised(), XMapSubwindows(), XReparentWindow(), or as a result of save-set processing.</remarks>
        </member>
        <member name="F:X11.XMapEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XMapEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XMapEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XMapEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XMapEvent.xevent">
            <remarcs>Either the window that was mapped or to its parent, depending on whether StructureNotify or SubstructureNotify was selected.</remarcs>
        </member>
        <member name="F:X11.XMapEvent.window">
            <summary>The window that was mapped.</summary>
        </member>
        <member name="F:X11.XMapEvent.override_redirect">
            <summary>Set to the <c>override_redirect</c> attribute of the window.</summary>
        </member>
        <member name="T:X11.XMapRequestEvent">
            <summary>The <see cref="T:X11.XMapRequestEvent" /> structure contains information about a different client's desire to map windows.</summary>
            <remarks>A window is considered mapped when a map window request completes. The X server generates this event whenever a different
            client initiates a map window request on an unmapped window whose override_redirect member is set to <c>false</c>.
            Clients initiate map window requests by calling XMapWindow(), XMapRaised(), or XMapSubwindows().</remarks>
        </member>
        <member name="F:X11.XMapRequestEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XMapRequestEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XMapRequestEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XMapRequestEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XMapRequestEvent.parent">
            <summary>Tthe parent window.</summary>
        </member>
        <member name="F:X11.XMapRequestEvent.window">
            <summary>The window that is to be mapped.</summary>
        </member>
        <member name="T:X11.XReparentEvent">
            <summary>The <see cref="T:X11.XReparentEvent" /> structure contains information about changing a window's parent.</summary>
            <remarks>The X server generates this event whenever a client application calls XReparentWindow() and the window is
            actually reparented.</remarks>
        </member>
        <member name="F:X11.XReparentEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XReparentEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XReparentEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XReparentEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XReparentEvent.xevent">
            <remarcs>Either the reparented window or to the old or the new parent, depending on whether StructureNotify or SubstructureNotify was selected.</remarcs>
        </member>
        <member name="F:X11.XReparentEvent.window">
            <summary>The window that was reparented.</summary>
        </member>
        <member name="F:X11.XReparentEvent.parent">
            <summary>The window that was reparented.</summary>
        </member>
        <member name="F:X11.XReparentEvent.x">
            <summary>The reparented window's x coordinates relative to the new parent window's origin and define the upper-left outer corner of the reparented window.</summary>
        </member>
        <member name="F:X11.XReparentEvent.y">
            <summary>The reparented window's y coordinates relative to the new parent window's origin and define the upper-left outer corner of the reparented window.</summary>
        </member>
        <member name="F:X11.XReparentEvent.override_redirect">
            <summary>Set to the <c>override_redirect</c> attribute of the window specified by the window member. Window manager clients normally should ignore this window if the <c>override_redirect</c> member is <c>true</c>.</summary>
        </member>
        <member name="T:X11.XConfigureEvent">
            <summary>The <see cref="T:X11.XConfigureEvent" /> structure contains information about actual changes to a window's state, such as size, position, border, and stacking order.</summary>
            <remarks> Called whenever one of the folloeing configure window requests is completed:
            * A window's size, position, border, and/or stacking order is reconfigured by calling XConfigureWindow().
            * The window's position in the stacking order is changed by calling XLowerWindow(), XRaiseWindow(), or XRestackWindows().
            * A window is moved by calling XMoveWindow().
            * A window's size is changed by calling XResizeWindow().
            * A window's size and location is changed by calling XMoveResizeWindow().
            * A window is mapped and its position in the stacking order is changed by calling XMapRaised().
            * A window's border width is changed by calling XSetWindowBorderWidth(). </remarks>
        </member>
        <member name="F:X11.XConfigureEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.xevent">
            <summary>Either the reparented window or to the old or the new parent, depending on whether StructureNotify or SubstructureNotify was selected.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.window">
            <summary>The window that had a size, position, border, stacking or order change.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.x">
            <summary>The configured window's x coordinates relative to the new parent window's origin - the upper-left outer corner of the reparented window.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.y">
            <summary>The configured window's y coordinates relative to the new parent window's origin - the upper-left outer corner of the reparented window.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.width">
            <summary>The configured window's width, excluding the border.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.height">
            <summary>The configured window's height, excluding the border.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.border_width">
            <summary>The configured window's border width.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.above">
            <summary>The sibling window. Used for stacking operations.</summary>
        </member>
        <member name="F:X11.XConfigureEvent.override_redirect">
            <summary>Set to the <c>override_redirect</c> attribute of the window specified by the window member. Window manager clients normally should ignore this window if the <c>override_redirect</c> member is <c>true</c>.</summary>
        </member>
        <member name="T:X11.XGravityEvent">
            <summary>The <see cref="T:X11.XGravityEvent" /> structure contains information when a window is moved because of a change in the size of its parent.</summary>
            <remarks>The X server generates this event whenever a client application actually moves a child window as a result of resizing its parent by
            calling XConfigureWindow(), XMoveResizeWindow(), or XResizeWindow().</remarks>
        </member>
        <member name="F:X11.XGravityEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XGravityEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XGravityEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XGravityEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XGravityEvent.xevent">
            <summary>Either the window that was moved or to its parent, depending on whether StructureNotify or SubstructureNotify was selected.</summary>
        </member>
        <member name="F:X11.XGravityEvent.window">
            <summary>The child window that is moved because of a size change of it's parent.</summary>
        </member>
        <member name="F:X11.XGravityEvent.x">
            <summary>The window's x coordinates relative to the new parent window's origin - the upper-left outer corner of the reparented window.</summary>
        </member>
        <member name="F:X11.XGravityEvent.y">
            <summary>The window's y coordinates relative to the new parent window's origin - the upper-left outer corner of the reparented window.</summary>
        </member>
        <member name="T:X11.XResizeRequestEvent">
            <summary>The <see cref="T:X11.XResizeRequestEvent" /> structure contains information about another client's attempts to change the size of a window.</summary>
            <remarks>The X server generates this event whenever some other client attempts to change the size of the specified window by
            calling XConfigureWindow(), XResizeWindow(), or XMoveResizeWindow().</remarks>
        </member>
        <member name="F:X11.XResizeRequestEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XResizeRequestEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XResizeRequestEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XResizeRequestEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XResizeRequestEvent.window">
            <summary>The window that is requested to resize.</summary>
        </member>
        <member name="F:X11.XResizeRequestEvent.width">
            <summary>The window's width, excluding the border.</summary>
        </member>
        <member name="F:X11.XResizeRequestEvent.height">
            <summary>The window's height, excluding the border.</summary>
        </member>
        <member name="T:X11.XConfigureRequestEvent">
            <summary>The <see cref="T:X11.XConfigureRequestEvent" /> structure contains information when a different client initiates a configure window request on any child of a specified window.</summary>
            <remarks>The configure window request attempts to reconfigure a window's size, position, border, and stacking order. The X server generates this event whenever
            a different client initiates a configure window request on a window by calling XConfigureWindow(), XLowerWindow(), XRaiseWindow(), XMapRaised(), XMoveResizeWindow(),
            XMoveWindow(), XResizeWindow(), XRestackWindows(), or XSetWindowBorderWidth().</remarks>
        </member>
        <member name="F:X11.XConfigureRequestEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.parent">
            <summary>The parent window.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.window">
            <summary>The window that had a size, position, border, stacking or order reconfiguration.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.x">
            <summary>The requested window's x coordinates relative to the parent window's origin - the upper-left outer corner of the window.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.y">
            <summary>The requested window's y coordinates relative to the parent window's origin - the upper-left outer corner of the window.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.width">
            <summary>The requested window's width, excluding the border.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.height">
            <summary>The requested window's height, excluding the border.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.border_width">
            <summary>The requested window's border width.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.above">
            <summary>The sibling window, this window is above, or <c>None</c> if not reported.</summary>
        </member>
        <member name="F:X11.XConfigureRequestEvent.value_mask">
            <summary>Indicate which components were specified in the ConfigureWindow protocol request.</summary>
        </member>
        <member name="T:X11.XCirculateEvent">
            <summary>The <see cref="T:X11.XCirculateEvent" /> structure contains information when a window changes its position in the stack.</summary>
            <remarks>The X server generates this event type whenever a window is actually restacked as a result of a client application
            calling XCirculateSubwindows(), XCirculateSubwindowsUp(), or XCirculateSubwindowsDown().</remarks>
        </member>
        <member name="F:X11.XCirculateEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XCirculateEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XCirculateEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XCirculateEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XCirculateEvent.xevent">
            <summary>Either the restacked window or to its parent, depending on whether StructureNotify or SubstructureNotify was selected.</summary>
        </member>
        <member name="F:X11.XCirculateEvent.window">
            <summary>The window that was restacked.</summary>
        </member>
        <member name="F:X11.XCirculateEvent.place">
            <summary>The window's position after the restack occurs and is either PlaceOnTop or PlaceOnBottom.</summary>
            <remarks>If it is PlaceOnTop, the window is now on top of all siblings. If it is PlaceOnBottom, the window is now below all siblings.</remarks>
        </member>
        <member name="T:X11.XCirculateRequestEvent">
            <summary>The <see cref="T:X11.XCirculateRequestEvent" /> structure contains information when another client initiates a circulate window request on a specified window.</summary>
            <remarks>The X server generates this event type whenever a client initiates a circulate window request on a window and a subwindow actually needs to be restacked.
            The client initiates a circulate window request on the window by calling XCirculateSubwindows(), XCirculateSubwindowsUp(), or XCirculateSubwindowsDown().</remarks>
        </member>
        <member name="F:X11.XCirculateRequestEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XCirculateRequestEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XCirculateRequestEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XCirculateRequestEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XCirculateRequestEvent.parent">
            <summary>The parent window.</summary>
        </member>
        <member name="F:X11.XCirculateRequestEvent.window">
            <summary>The window that is to be restacked.</summary>
        </member>
        <member name="F:X11.XCirculateRequestEvent.place">
            <summary>The requested window's position after the restack occurs and is either PlaceOnTop or PlaceOnBottom.</summary>
            <remarks>If it is PlaceOnTop, the window is now on top of all siblings. If it is PlaceOnBottom, the window is now below all siblings.</remarks>
        </member>
        <member name="T:X11.XPropertyEvent">
            <summary>The <see cref="T:X11.XPropertyEvent" /> structure contains information about property changes for a specified window.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.window">
            <summary>The window whose associated property was changed.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.atom">
            <summary>The property's atom and indicates which property was changed or desired.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.time">
            <summary>The server time when the property was changed.</summary>
        </member>
        <member name="F:X11.XPropertyEvent.state">
            <summary>Indicate whether the property was changed to a new value or deleted and can be <c>PropertyNewValue</c> or <c>PropertyDelete</c>.</summary>
        </member>
        <member name="T:X11.XSelectionClearEvent">
            <summary>The <see cref="T:X11.XSelectionClearEvent" /> structure contains information about the client losing ownership of a selection.</summary>
            <remarks>The X server generates this event type when another client asserts ownership of the selection by calling XSetSelectionOwner().</remarks>
        </member>
        <member name="F:X11.XSelectionClearEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XSelectionClearEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XSelectionClearEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XSelectionClearEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XSelectionClearEvent.window">
            <summary>The window that was specified by the current owner (the owner losing the selection) in its XSetSelectionOwner() call.</summary>
        </member>
        <member name="F:X11.XSelectionClearEvent.selection">
            <summary>The atom that names the selection.</summary>
        </member>
        <member name="F:X11.XSelectionClearEvent.time">
            <summary>The last change time recorded for the selection.</summary>
        </member>
        <member name="T:X11.XSelectionRequestEvent">
            <summary>The <see cref="T:X11.XSelectionClearEvent" /> structure contains information about a selection request to the owner of a selection.</summary>
            <remarks>The X server generates this event whenever a client requests a selection conversion by calling XConvertSelection() for the owned selection.</remarks>
        </member>
        <member name="F:X11.XSelectionRequestEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.owner">
            <summary>The window that was specified by the current owner in its X<c>SetSelectionOwner()</c> call.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.requestor">
            <summary>The window requesting the selection.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.selection">
            <summary>The atom that names the selection.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.target">
            <summary>The window requesting the selection.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.property">
            <summary>The property name or None.</summary>
        </member>
        <member name="F:X11.XSelectionRequestEvent.time">
            <summary>The timestamp or <c>CurrentTime</c> value from the <c>ConvertSelection</c> request.</summary>
        </member>
        <member name="T:X11.XSelectionEvent">
            <summary>The <see cref="T:X11.XSelectionEvent" /> structure contains information in response to a <c>ConvertSelection</c> protocol request when there is no owner for the selection.</summary>
            <remarks>When there is an owner, it should be generated by the owner of the selection by using XSendEvent().
            The owner of a selection should send this event to a requestor when a selection has been converted and stored as a property
            or when a selection conversion could not be performed (which is indicated by setting the property member to None).</remarks>
        </member>
        <member name="F:X11.XSelectionEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.requestor">
            <summary>The window associated with the requestor of the selection.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.selection">
            <summary>The atom that names the selection. For example, <c>PRIMARY</c> is used for the primary selection.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.target">
            <summary>The atom that indicates the converted type. For example, <c>PIXMAP</c> is used for a pixmap.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.property">
            <summary>
                <c>None</c>.</summary>
        </member>
        <member name="F:X11.XSelectionEvent.time">
            <summary>The time the conversion took place and can be a timestamp or <c>CurrentTime</c>.</summary>
        </member>
        <member name="T:X11.XColormapEvent">
            <summary>The <see cref="T:X11.XColormapEvent" /> structure contains information when the colormap changes and when a colormap is installed or uninstalled.</summary>
            <remarks>The X server generates this event type whenever a client application:
            <para>[1] Changes the colormap member of the XSetWindowAttributes structure by calling XChangeWindowAttributes(), XFreeColormap(), or XSetWindowColormap().</para><para>[2] Installs or uninstalls the colormap by calling XInstallColormap() or XUninstallColormap().</para></remarks>
        </member>
        <member name="F:X11.XColormapEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XColormapEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XColormapEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XColormapEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XColormapEvent.window">
            <summary>The window whose associated colormap is changed, installed, or uninstalled.</summary>
        </member>
        <member name="F:X11.XColormapEvent.colormap">
            <summary>The colormap associated with the window for a colormap that is changed, installed, or uninstalled.
            <c>None</c> for a colormap that is changed by a call to <c>XFreeColormap()</c>.</summary>
        </member>
        <member name="F:X11.XColormapEvent.c_new">
            <summary>Indicate whether the colormap for the specified window was changed or installed or uninstalled and can be <c>true</c> or <c>false</c>.
            If it is <c>true</c>, the colormap was changed. If it is <c>false</c>, the colormap was installed or uninstalled.</summary>
        </member>
        <member name="F:X11.XColormapEvent.state">
            <summary>Indicate whether the colormap is installed or uninstalled and can be <c>ColormapInstalled</c> or <c>ColormapUninstalled</c>.</summary>
        </member>
        <member name="T:X11.XClientMessageEvent">
            <summary>The <see cref="T:X11.XClientMessageEvent" /> structure contains information when a client calls the function XSendEvent().</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.window">
            <summary>No interpretation by the windows manager.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.message_type">
            <summary>The atom that indicates how the data should be interpreted by the receiving client.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.format">
            <summary>The data type size - 8, 16, or 32 - that specifies whether the data should be viewed as a list of bytes[20], shorts[10], or longs[5].</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.ptr1">
            <summary>The first universal data member.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.ptr2">
            <summary>The second universal data member.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.ptr3">
            <summary>The third universal data member.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.ptr4">
            <summary>The fourth universal data member.</summary>
        </member>
        <member name="F:X11.XClientMessageEvent.ptr5">
            <summary>The fifth universal data member.</summary>
        </member>
        <member name="T:X11.XMappingEvent">
            <summary>The <see cref="T:X11.XMappingEvent" /> structure contains information when a client gets mapped.</summary>
            <remarks>There is no mechanism to express disinterest in this event. The X server generates this event type whenever a client application successfully calls:
            <para>[1] XSetModifierMapping() to indicate which KeyCodes are to be used as modifiers.</para><para>[2] XChangeKeyboardMapping() to change the keyboard mapping.</para><para>[3] XSetPointerMapping() to set the pointer mapping.</para></remarks>
        </member>
        <member name="F:X11.XMappingEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XMappingEvent.serial">
            <summary>The number of the last request, processed by server.</summary>
        </member>
        <member name="F:X11.XMappingEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XMappingEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XMappingEvent.window">
            <summary>Not used but is present to aid some toolkits.</summary>
        </member>
        <member name="F:X11.XMappingEvent.request">
            <summary>Indicate the kind of mapping change that occurred and can be MappingModifier, MappingKeyboard, MappingPointer.</summary>
            <remarks>If it is MappingModifier, the modifier mapping was changed. If it is MappingKeyboard, the keyboard mapping was changed. If it is MappingPointer, the pointer button mapping was changed.</remarks>
        </member>
        <member name="F:X11.XMappingEvent.first_keycode">
            <summary>Used only if the request member was set to MappingKeyboard. The first number in the range of the altered mapping.</summary>
        </member>
        <member name="F:X11.XMappingEvent.count">
            <summary>Used only if the request member was set to MappingKeyboard. The number of keycodes altered.</summary>
        </member>
        <member name="T:X11.XErrorEvent">
            <summary>The <see cref="T:X11.XErrorEvent" /> structure contains information when a client gets mapped.</summary>
        </member>
        <member name="F:X11.XErrorEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XErrorEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XErrorEvent.serial">
            <summary>The number of requests, starting from one, sent over the network connection since it was opened.</summary>
            <remarks>It is the number that was the value of NextRequest immediately before the failing call was made.</remarks>
        </member>
        <member name="F:X11.XErrorEvent.error_code">
            <summary>The error code of failed request.</summary>
        </member>
        <member name="F:X11.XErrorEvent.request_code">
            <summary>The protocol request of the procedure that failed (major op-code of failed request).</summary>
        </member>
        <member name="F:X11.XErrorEvent.minor_code">
            <summary>The protocol request of the procedure that failed (minor op-code of failed request).</summary>
        </member>
        <member name="T:X11.XGenericEvent">
            <summary>The <see cref="T:X11.XGenericEvent" /> defines the standard event for all newer extensions.</summary>
        </member>
        <member name="F:X11.XGenericEvent.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XGenericEvent.serial">
            <summary>The number of requests, starting from one, sent over the network connection since it was opened.</summary>
            <remarks>It is the number that was the value of NextRequest immediately before the failing call was made.</remarks>
        </member>
        <member name="F:X11.XGenericEvent.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XGenericEvent.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XGenericEvent.extension">
            <summary>The major opcode of extension that caused the event.</summary>
        </member>
        <member name="F:X11.XGenericEvent.evtype">
            <summary>The actual event type.</summary>
        </member>
        <member name="T:X11.XGenericEventCookie">
            <summary>The <see cref="T:X11.XGenericEventCookie" /> defines the standard event for all newer extensions with cookie.</summary>
        </member>
        <member name="F:X11.XGenericEventCookie.type">
            <summary>The event type identifier. All event structures provide this type enum at the first position in memory.</summary>
        </member>
        <member name="F:X11.XGenericEventCookie.serial">
            <summary>The number of requests, starting from one, sent over the network connection since it was opened.</summary>
            <remarks>It is the number that was the value of NextRequest immediately before the failing call was made.</remarks>
        </member>
        <member name="F:X11.XGenericEventCookie.send_event">
            <summary>Determine whether the event has been server generated or user requested. Set to  <c>true</c> if this came from a SendEvent request.</summary>
        </member>
        <member name="F:X11.XGenericEventCookie.display">
            <summary>The display the event was read from.</summary>
        </member>
        <member name="F:X11.XGenericEventCookie.extension">
            <summary>The major opcode of extension that caused the event.</summary>
        </member>
        <member name="F:X11.XGenericEventCookie.evtype">
            <summary>The actual event type.</summary>
        </member>
        <member name="F:X11.XGenericEventCookie.cookie">
            <summary>The unique event cookie.</summary>
        </member>
        <member name="F:X11.XGenericEventCookie.data">
            <summary>The actual event data.</summary>
        </member>
        <member name="T:X11.XEventPad">
            <summary>The <see cref="T:X11.XEventPad" /> defines a consistent size for all types of events.</summary>
        </member>
        <member name="F:X11.XEventPad.pad0">
            <summary>Place holder 1.</summary>
        </member>
        <member name="F:X11.XEventPad.pad1">
            <summary>Place holder 2.</summary>
        </member>
        <member name="F:X11.XEventPad.pad2">
            <summary>Place holder 3.</summary>
        </member>
        <member name="F:X11.XEventPad.pad3">
            <summary>Place holder 4.</summary>
        </member>
        <member name="F:X11.XEventPad.pad4">
            <summary>Place holder 5.</summary>
        </member>
        <member name="F:X11.XEventPad.pad5">
            <summary>Place holder 6.</summary>
        </member>
        <member name="F:X11.XEventPad.pad6">
            <summary>Place holder 7.</summary>
        </member>
        <member name="F:X11.XEventPad.pad7">
            <summary>Place holder 8.</summary>
        </member>
        <member name="F:X11.XEventPad.pad8">
            <summary>Place holder 9.</summary>
        </member>
        <member name="F:X11.XEventPad.pad9">
            <summary>Place holder 10.</summary>
        </member>
        <member name="F:X11.XEventPad.pad10">
            <summary>Place holder 11.</summary>
        </member>
        <member name="F:X11.XEventPad.pad11">
            <summary>Place holder 12.</summary>
        </member>
        <member name="F:X11.XEventPad.pad12">
            <summary>Place holder 13.</summary>
        </member>
        <member name="F:X11.XEventPad.pad13">
            <summary>Place holder 14.</summary>
        </member>
        <member name="F:X11.XEventPad.pad14">
            <summary>Place holder 15.</summary>
        </member>
        <member name="F:X11.XEventPad.pad15">
            <summary>Place holder 16.</summary>
        </member>
        <member name="F:X11.XEventPad.pad16">
            <summary>Place holder 17.</summary>
        </member>
        <member name="F:X11.XEventPad.pad17">
            <summary>Place holder 18.</summary>
        </member>
        <member name="F:X11.XEventPad.pad18">
            <summary>Place holder 19.</summary>
        </member>
        <member name="F:X11.XEventPad.pad19">
            <summary>Place holder 20.</summary>
        </member>
        <member name="F:X11.XEventPad.pad20">
            <summary>Place holder 21.</summary>
        </member>
        <member name="F:X11.XEventPad.pad21">
            <summary>Place holder 22.</summary>
        </member>
        <member name="F:X11.XEventPad.pad22">
            <summary>Place holder 23.</summary>
        </member>
        <member name="F:X11.XEventPad.pad23">
            <summary>Place holder 24.</summary>
        </member>
        <member name="T:X11.XEvent">
            <summary>The <see cref="T:X11.XEvent" /> union acts as a generic placeholder for one particular event, that is determined by the <c>type</c> member.</summary>
        </member>
        <member name="F:X11.XEvent.type">
            <summary> All event types have the type member at field offset 0. </summary>
        </member>
        <member name="F:X11.XEvent.AnyEvent">
            <summary>The <see cref="T:X11.XAnyEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.KeyEvent">
            <summary>The <see cref="T:X11.XKeyEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ButtonEvent">
            <summary>The <see cref="T:X11.XButtonEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.MotionEvent">
            <summary>The <see cref="T:X11.XMotionEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.CrossingEvent">
            <summary>The <see cref="T:X11.XCrossingEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.FocusChangeEvent">
            <summary>The <see cref="T:X11.XFocusChangeEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ExposeEvent">
            <summary>The <see cref="T:X11.XExposeEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.GraphicsExposeEvent">
            <summary>The <see cref="T:X11.XGraphicsExposeEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.NoExposeEvent">
            <summary>The <see cref="T:X11.XNoExposeEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.VisibilityEvent">
            <summary>The <see cref="T:X11.XVisibilityEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.CreateWindowEvent">
            <summary>The <see cref="T:X11.XCreateWindowEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.DestroyWindowEvent">
            <summary>The <see cref="T:X11.XDestroyWindowEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.UnmapEvent">
            <summary>The <see cref="T:X11.XUnmapEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.MapEvent">
            <summary>The <see cref="T:X11.XMapEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.MapRequestEvent">
            <summary>The <see cref="T:X11.XMapRequestEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ReparentEvent">
            <summary>The <see cref="T:X11.XReparentEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ConfigureEvent">
            <summary>The <see cref="T:X11.XConfigureEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.GravityEvent">
            <summary>The <see cref="T:X11.XKeyEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ResizeRequestEvent">
            <summary>The <see cref="T:X11.XResizeRequestEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ConfigureRequestEvent">
            <summary>The <see cref="T:X11.XConfigureRequestEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.CirculateEvent">
            <summary>The <see cref="T:X11.XCirculateEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.CirculateRequestEvent">
            <summary>The <see cref="T:X11.XCirculateRequestEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.PropertyEvent">
            <summary>The <see cref="T:X11.XPropertyEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.SelectionClearEvent">
            <summary>The <see cref="T:X11.XSelectionClearEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.SelectionRequestEvent">
            <summary>The <see cref="T:X11.XSelectionRequestEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.SelectionEvent">
            <summary>The <see cref="T:X11.XSelectionEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ColormapEvent">
            <summary>The <see cref="T:X11.XColormapEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ClientMessageEvent">
            <summary>The <see cref="T:X11.XClientMessageEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.MappingEvent">
            <summary>The <see cref="T:X11.XMappingEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.ErrorEvent">
            <summary>The <see cref="T:X11.XErrorEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.KeymapEvent">
            <summary>The <see cref="T:X11.XKeymapEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.GenericEvent">
            <summary>The <see cref="T:X11.XGenericEvent" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.GenericEventCookie">
            <summary>The <see cref="T:X11.XGenericEventCookie" /> event structure, if <c>type</c> has respective value.</summary>
        </member>
        <member name="F:X11.XEvent.Pad">
            <summary>The <see cref="T:X11.XEventPad" /> defines a consistent size for all types of events.</summary>
        </member>
        <member name="M:X11.XEvent.ToString">
            <summary>Convert the event structure content to a string (for debug purpose).</summary>
            <returns>The event structure content to a <see cref="T:System.String" /> (for debug purpose).</returns>
        </member>
        <member name="M:X11.XEvent.ToString(System.Object)">
            <summary>Convert the event structure content to a string (for debug purpose).</summary>
            <param name="ev">The <see cref="T:System.Object" /> event to content to a string.</param>
            <returns>The event structure content to a <see cref="T:System.String" /> (for debug purpose).</returns>
        </member>
        <member name="T:X11.X11Utils">
            <summary> The <see cref="T:X11.X11Utils" /> class provides various character and string conversions.</summary>
        </member>
        <member name="M:X11.X11Utils.StringToSByteArray(System.String)">
            <summary>Convert a C# string (2 byte (0...65.536) character array) into a byte (1 byte (0...255) character) array.</summary>
            <param name="text">The C# string to convert.<see cref="T:System.String" /></param>
            <returns>The byte (1 byte (0...255) character) array.<see cref="!:TChar[]" /></returns>
            <remarks>Used for X11lib.XDrawString() and X11lib.XQueryTextExtents().</remarks>
        </member>
        <member name="M:X11.X11Utils.SByteArrayToString(X11.TChar[])">
            <summary>Convert a byte (1 byte (0...255) character) array into a C# string (2 byte (0...65.536) character array).</summary>
            <param name="text">The byte (1 byte (0...255) character) array to convert.<see cref="!:TChar[]" /></param>
            <returns>The C# string (2 byte (0...65.536) character array).<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.X11Utils.SubSByteArray(X11.TChar[],System.Int32,System.Int32)">
            <summary>Extract a sub-array from a byte (1 byte (0...255) character) array.</summary>
            <param name="text">The byte (1 byte (0...255) character) array to extract a sub-array from.<see cref="!:TChar[]" /></param>
            <param name="start">The index of the first character to extract.<see cref="T:System.Int32" /></param>
            <param name="length">The number of characters to extract, or -1 for all characters up to the end.<see cref="T:System.Int32" /></param>
            <returns>The extracted sub-array on success, or an empty array otherwise.<see cref="!:TChar[]" /></returns>
        </member>
        <member name="M:X11.X11Utils.IndexOfSByteArray(X11.TChar[],X11.TChar)">
            <summary>Determine the index of indicated character within a byte (1 byte (0...255) character) array.</summary>
            <param name="text">The byte (1 byte (0...255) character) array to find the index in.<see cref="!:TChar[]" /></param>
            <param name="character">The character to find the index for.<see cref="T:X11.TChar" /></param>
            <returns>The zero-based index on success, or -1 otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11Utils.IndexOfSByteArray(X11.TChar[],X11.TChar[])">
            <summary>Determine the index of indicated characters within a byte (1 byte (0...255) character) array.</summary>
            <param name="text">The byte (1 byte (0...255) character) array to find the index in.<see cref="!:TChar[]" /></param>
            <param name="characters">The character array to find the index for.<see cref="!:TChar[]" /></param>
            <returns>The zero-based index on success, or -1 otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11Utils.CharToXChar2b(System.Char)">
            <summary>Convert a C# character (2 byte (0...65.536) character) into a 2 byte (0...65.536) character.</summary>
            <param name="character">The C# character to convert.<see cref="T:System.Char" /></param>
            <returns>The 2 byte (0...65.536) character.<see cref="!:X11lib.XChar2b" /></returns>
            <remarks>Used for X11lib.XDrawString16() and X11lib.XQueryTextExtents16().</remarks>
        </member>
        <member name="M:X11.X11Utils.StringToXChar2bArray(System.String)">
            <summary>Convert a C# string (2 byte (0...65.536) character array) into a 2 byte (0...65.536) character array.</summary>
            <param name="text">The C# string to convert.<see cref="T:System.String" /></param>
            <returns>The 2 byte (0...65.536) character array.<see cref="!:X11lib.XChar2b[]" /></returns>
            <remarks>Used for X11lib.XDrawString16() and X11lib.XQueryTextExtents16().</remarks>
        </member>
        <member name="M:X11.X11Utils.XChar2bToChar(X11.XChar2b)">
            <summary>Convert a 2 byte (0...65.536) character into a C# character (2 byte (0...65.536) character).</summary>
            <param name="character">The 2 byte (0...65.536) character to convert.<see cref="!:XChar2b[]" /></param>
            <returns>The C# character (2 byte (0...65.536) character).<see cref="T:System.Char" /></returns>
        </member>
        <member name="M:X11.X11Utils.XChar2bArrayToString(X11.XChar2b[])">
            <summary>Convert a 2 byte (0...65.536) character array into a C# string (2 byte (0...65.536) character array).</summary>
            <param name="text">The 2 byte (0...65.536) character array to convert.<see cref="!:X11lib.XChar2b[]" /></param>
            <returns>The C# string (2 byte (0...65.536) character array).<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.X11Utils.SubXChar2bArray(X11.XChar2b[],System.Int32,System.Int32)">
            <summary>Extract a sub-array from a 2 byte (0...65.536) character array.</summary>
            <param name="text">The 2 byte (0...65.536) character array to extract a sub-array from.<see cref="!:X11lib.XChar2b[]" /></param>
            <param name="start">The index of the first character to extract.<see cref="T:System.Int32" /></param>
            <param name="length">The number of characters to extract, or -1 for all characters up to the end.<see cref="T:System.Int32" /></param>
            <returns>The extracted sub-array on success, or an empty array otherwise.<see cref="!:X11lib.XChar2b[]" /></returns>
        </member>
        <member name="M:X11.X11Utils.AddXChar2bArray(X11.XChar2b[],X11.XChar2b[])">
            <summary>Concatenate two 4 byte (0...4.294.967.296) character array.</summary>
            <param name="text1">The first 4 byte (0...4.294.967.296) character array to concatenate.<see cref="!:X11lib.XChar2b[]" /></param>
            <param name="text2">The second 4 byte (0...4.294.967.296) character array to concatenate.<see cref="!:X11lib.XChar2b[]" /></param>
            <returns>The concatenated array on success, or an empty array otherwise.<see cref="!:X11lib.XChar2b[]" /></returns>
            <remarks>A tailing null character of text1 will be overwritten by the forst character of text2.</remarks>
            <remarks>Not required character of the result will be set to null characters.</remarks>
        </member>
        <member name="M:X11.X11Utils.IndexOfXChar2bArray(X11.XChar2b[],X11.XChar2b)">
            <summary>Determine the index of indicated character within a 2 byte (0...65.536) character array.</summary>
            <param name="text">The 2 byte (0...65.536) character array to find the index in.<see cref="!:X11lib.XChar2b[]" /></param>
            <param name="character">The character to find the index for.<see cref="!:X11lib.XChar2b" /></param>
            <returns>The zero-based index on success, or -1 otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11Utils.IndexOfXChar2bArray(X11.XChar2b[],X11.XChar2b[])">
            <summary>Determine the index of indicated characters within a 2 byte (0...65.536) character array.</summary>
            <param name="text">The 2 byte (0...65.536) character array to find the index in.<see cref="!:X11lib.XChar2b[]" /></param>
            <param name="characters">The character array to find the index for.<see cref="!:X11lib.XChar2b[]" /></param>
            <returns>The zero-based index on success, or -1 otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11Utils.SubstringEqual(X11.XChar2b[],System.Int32,X11.XChar2b[])">
            <summary>Test whether 'text', starting at 'startIndex', is equal to 'predicate'.</summary>
            <param name="text">The string to test.<see cref="!:X11lib.XChar2b[]" /></param>
            <param name="startIndex">The index to start the test.<see cref="T:System.Int32" /></param>
            <param name="predicate">The string to compare to.<see cref="!:X11lib.XChar2b[]" /></param>
            <returns>True if substring is equal to predicate, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.X11Utils.SubstringMatch(X11.XChar2b[],System.Int32,X11.XChar2b[])">
            <summary>Test whether 'text', starting at 'startIndex', matches the 'predicate'.</summary>
            <param name="startIndex">The index to start the test.<see cref="T:System.Int32" /></param>
            <param name="predicate">The mask string to compare to. Accepts '?' as single-char joker and '*' as multi-char joker.<see cref="!:X11lib.XChar2b[]" /></param>
            <returns>The matching string if substring matches predicate, or string.Empty otherwise.<see cref="!:X11lib.XChar2b[]" /></returns>
        </member>
        <member name="M:X11.X11Utils.CharToWchar(System.Char)">
            <summary>Convert a C# character (2 byte (0...65.536) character) into a 4 byte (0...4.294.967.296) character.</summary>
            <param name="c">The C# character to convert.<see cref="T:System.Char" /></param>
            <returns>The 4 byte (0...4.294.967.296) character.<see cref="T:X11.TWchar" /></returns>
            <remarks>Used for X11lib.XwcDrawString6() and X11lib.XwcTextExtents().</remarks>
        </member>
        <member name="M:X11.X11Utils.StringToWcharArray(System.String)">
            <summary>Convert a C# string (2 byte (0...65.536) character array) into a 4 byte (0...4.294.967.296) character array.</summary>
            <param name="text">The C# string to convert.<see cref="T:System.String" /></param>
            <returns>The 4 byte (0...4.294.967.296) character array.<see cref="!:TWchar[]" /></returns>
            <remarks>Used for X11lib.XwcDrawString6() and X11lib.XwcTextExtents().</remarks>
        </member>
        <member name="M:X11.X11Utils.WcharToChar(X11.TWchar)">
            <summary>Convert a 4 byte (0...4.294.967.296) character into a C# char (2 byte (0...65.536) character).</summary>
            <param name="c">Then 4 byte (0...4.294.967.296) character to convert.<see cref="T:X11.TWchar" /></param>
            <returns>The C# char (2 byte (0...65.536) character).<see cref="T:System.Char" /></returns>
            <remarks>This conversion might be lossy.</remarks>
        </member>
        <member name="M:X11.X11Utils.WcharToXChar2b(X11.TWchar)">
            <summary>Convert a 4 byte (0...4.294.967.296) character into a C# char (2 byte (0...65.536) character).</summary>
            <param name="c">Then 4 byte (0...4.294.967.296) character to convert.<see cref="T:X11.TWchar" /></param>
            <returns>The C# char (2 byte (0...65.536) character).<see cref="T:System.Char" /></returns>
            <remarks>This conversion might be lossy.</remarks>
        </member>
        <member name="M:X11.X11Utils.WcharArrayToString(X11.TWchar[])">
            <summary>Convert a 4 byte (0...4.294.967.296) character array into a C# string (2 byte (0...65.536) character array).</summary>
            <param name="text">The 4 byte (0...4.294.967.296) <see cref="!:TWchar[]" /> character array to convert.</param>
            <returns>The C# string (2 byte (0...65.536) character array).<see cref="T:System.String" /></returns>
            <remarks>This conversion might be lossy.</remarks>
        </member>
        <member name="M:X11.X11Utils.SubWcharArray(X11.TWchar[],System.Int32,System.Int32)">
            <summary>Extract a sub-array from a 4 byte (0...4.294.967.296) character array.</summary>
            <param name="text">The 4 byte (0...4.294.967.296) character array to extract a sub-array from.<see cref="!:TWchar[]" /></param>
            <param name="start">The index of the first character to extract.<see cref="T:System.Int32" /></param>
            <param name="length">The number of characters to extract, or -1 for all characters up to the end.<see cref="T:System.Int32" /></param>
            <returns>The extracted sub-array on success, or an empty array otherwise.<see cref="!:TWchar[]" /></returns>
        </member>
        <member name="M:X11.X11Utils.AddWcharArray(X11.TWchar[],X11.TWchar[])">
            <summary>Concatenate two 4 byte (0...4.294.967.296) character array.</summary>
            <param name="text1">The first 4 byte (0...4.294.967.296) character array to concatenate.<see cref="!:TWchar[]" /></param>
            <param name="text2">The second 4 byte (0...4.294.967.296) character array to concatenate.<see cref="!:TWchar[]" /></param>
            <returns>The concatenated array on success, or an empty array otherwise.<see cref="!:TWchar[]" /></returns>
            <remarks>A tailing null character of text1 will be overwritten by the forst character of text2.</remarks>
            <remarks>Not required character of the result will be set to null characters.</remarks>
        </member>
        <member name="M:X11.X11Utils.IndexOfWcharArray(X11.TWchar[],X11.TWchar)">
            <summary>Determine the index of indicated character within a 4 byte (0...4.294.967.296) character array.</summary>
            <param name="text">The 4 byte (0...4.294.967.296) character array to find the index in.<see cref="!:TWchar[]" /></param>
            <param name="character">The character to find the index for.<see cref="T:X11.TWchar" /></param>
            <returns>The zero-based index on success, or -1 otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11Utils.IndexOfWcharArray(X11.TWchar[],X11.TWchar[])">
            <summary>Determine the index of indicated characters within a 4 byte (0...4.294.967.296) character array.</summary>
            <param name="text">The 4 byte (0...4.294.967.296) character array to find the index in.<see cref="!:TWchar[]" /></param>
            <param name="characters">The character array to find the index for.<see cref="!:TWchar[]" /></param>
            <returns>The zero-based index on success, or -1 otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11Utils.SubstringEqual(X11.TWchar[],System.Int32,X11.TWchar[])">
            <summary>Test whether 'text', starting at 'startIndex', is equal to 'predicate'.</summary>
            <param name="text">The string to test.<see cref="!:TWchar[]" /></param>
            <param name="startIndex">The index to start the test.<see cref="T:System.Int32" /></param>
            <param name="predicate">The string to compare to.<see cref="!:TWchar[]" /></param>
            <returns>True if substring is equal to predicate, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.X11Utils.SubstringMatch(X11.TWchar[],System.Int32,X11.TWchar[])">
            <summary>Test whether 'text', starting at 'startIndex', matches the 'predicate'.</summary>
            <param name="startIndex">The index to start the test.<see cref="T:System.Int32" /></param>
            <param name="predicate">The mask string to compare to. Accepts '?' as single-char joker and '*' as multi-char joker.<see cref="!:TWchar[]" /></param>
            <returns>The matching string if substring matches predicate, or string.Empty otherwise.<see cref="!:TWchar[]" /></returns>
        </member>
        <member name="M:X11.X11Utils.CapitalStartLetter(System.String,System.Boolean)">
            <summary> Convert a string by capitalizing the start letter(s). </summary>
            <param name="text"> The string to convert. <see cref="T:System.String" /></param>
            <param name="allWords"> Define whether to capitalize the first letter of the string or all first letters of every word. <see cref="T:System.Boolean" /></param>
            <returns> The string with capitalized start letter(s). <see cref="T:System.String" /></returns>
        </member>
        <member name="T:X11.Xpmlib">
            <summary>The <see cref="T:X11.Xpmlib" /> class wraps the native code libXpm library.</summary>
        </member>
        <member name="M:X11.Xpmlib.XpmCreatePixmapFromData(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary> Creates X images using XpmCreateImageFromData () and thus returns the same errors.
            In addition on success it then creates the related pixmaps, using XPutImage, which are returned to
            pixmap and shapemask if not NULL, and finally destroys the created images using XDestroyImage (). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> Specifies which screen the pixmap is created on. <see cref="T:System.IntPtr" /></param>
            <param name="data"> Specifies the location of the data. <see cref="T:System.IntPtr" /></param>
            <param name="pixmap"> Returns the pixmap which is created. <see cref="T:System.IntPtr" /></param>
            <param name="shapemask"> Returns the shape mask pixmap which is created if the color None is used. <see cref="T:System.IntPtr" /></param>
            <param name="attributes"> SSpecifies the location of a structure to get and store information (or NULL). <see cref="T:System.IntPtr" /></param>
            <returns> If the file cannot be opened it returns XpmOpenFailed.
            If the file can be opened but does not contain valid XPM data, it returns XpmFileInvalid.
            If insufficient working storage is allocated, it returns XpmNoMemory. <see cref="T:X11.TInt" /></returns>
            <remarks> Do not forget to free the returned pixmaps, the colors, and possibly the data returned
            into the XpmAttributes structure when done. </remarks>
        </member>
        <member name="T:X11.XRenderRequests">
            <summary>The <see cref="T:X11.XRenderRequests" /> class defines the XRendering Extension possible protocol requests.</summary>
        </member>
        <member name="F:X11.XRenderRequests.X_RenderQueryVersion">
            <summary>The <see cref="!:XRenderLib.RenderQueryVersion" /> protocol request.</summary>
        </member>
        <member name="F:X11.XRenderRequests.X_RenderQueryPictFormats">
            <summary>The <see cref="!:XRenderLib.RenderQueryPictFormats" /> protocol request.</summary>
        </member>
        <member name="F:X11.XRenderRequests.X_RenderQueryPictIndexValues">
            <summary>The <see cref="!:XRenderLib.RenderQueryPictIndexValues" /> protocol request.</summary>
        </member>
        <member name="F:X11.XRenderRequests.X_RenderQueryDithers">
            <summary>The <see cref="!:XRenderLib.RenderQueryDithers" /> protocol request.</summary>
        </member>
        <member name="F:X11.XRenderRequests.X_RenderCreatePicture">
            <summary>The <see cref="!:XRenderLib.RenderCreatePicture" /> protocol request.</summary>
        </member>
        <member name="T:X11.XRenderErrors">
            <summary>The <see cref="T:X11.XRenderErrors" /> class defines the XRendering Extension possible protocol errors.</summary>
        </member>
        <member name="F:X11.XRenderErrors.BadPictFormat">
            <summary>The <c>BadPictFormat</c> error.</summary>
        </member>
        <member name="F:X11.XRenderErrors.BadPicture">
            <summary>The <c>BadPicture</c> error.</summary>
        </member>
        <member name="F:X11.XRenderErrors.BadPictOp">
            <summary>The <c>BadPictOp</c> error.</summary>
        </member>
        <member name="F:X11.XRenderErrors.BadGlyphSet">
            <summary>The <c>BadGlyphSet</c> error.</summary>
        </member>
        <member name="F:X11.XRenderErrors.BadGlyph">
            <summary>The <c>BadGlyph</c> error.</summary>
        </member>
        <member name="F:X11.XRenderErrors.RenderNumberErrors">
            <summary>The <c>RenderNumberErrors</c> error.</summary>
        </member>
        <member name="T:X11.XRenderPictureOp">
            <summary>The <see cref="T:X11.XRenderPictureOp" /> class defines the XRendering Extension possible picture types and (raster) operations.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictTypeIndexed">
            <summary>The <c>PictTypeIndexed</c> type.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictTypeDirect">
            <summary>The <c>PictTypeDirect</c> type.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpMinimum">
            <summary>The <c>PictOpMinimum</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpClear">
            <summary>The <c>PictOpClear</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpSrc">
            <summary>The <c>PictOpSrc</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDst">
            <summary>The <c>PictOpDst</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpOver">
            <summary>The <c>PictOpOver</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpOverReverse">
            <summary>The <c>PictOpOverReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpIn">
            <summary>The <c>PictOpIn</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpInReverse">
            <summary>The <c>PictOpInReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpOut">
            <summary>The <c>PictOpOut</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpOutReverse">
            <summary>The <c>PictOpOutReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpAtop">
            <summary>The <c>PictOpAtop</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpAtopReverse">
            <summary>The <c>PictOpAtopReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpXor">
            <summary>The <c>PictOpXor</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpAdd">
            <summary>The <c>PictOpAdd</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpSaturate">
            <summary>The <c>PictOpSaturate</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpMaximum">
            <summary>The <c>PictOpMaximum</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointMinimum">
            <summary>The <c>PictOpDisjointMinimum</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointClear">
            <summary>The <c>PictOpDisjointClear</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointSrc">
            <summary>The <c>PictOpDisjointSrc</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointDst">
            <summary>The <c>PictOpDisjointDst</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointOver">
            <summary>The <c>PictOpDisjointOver</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointOverReverse">
            <summary>The <c>PictOpDisjointOverReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointIn">
            <summary>The <c>PictOpDisjointIn</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointInReverse">
            <summary>The <c>PictOpDisjointInReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointOut">
            <summary>The <c>PictOpDisjointOut</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointOutReverse">
            <summary>The <c>PictOpDisjointOutReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointAtop">
            <summary>The <c>PictOpDisjointAtop</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointAtopReverse">
            <summary>The <c>PictOpDisjointAtopReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointXor">
            <summary>The <c>PictOpDisjointXor</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpDisjointMaximum">
            <summary>The <c>PictOpDisjointMaximum</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointMinimum">
            <summary>The <c>PictOpConjointMinimum</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointClear">
            <summary>The <c>PictOpConjointClear</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointSrc">
            <summary>The <c>PictOpConjointSrc</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointDst">
            <summary>The <c>PictOpConjointDst</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointOver">
            <summary>The <c>PictOpConjointOver</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointOverReverse">
            <summary>The <c>PictOpConjointOverReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointIn">
            <summary>The <c>PictOpConjointIn</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointInReverse">
            <summary>The <c>PictOpConjointInReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointOut">
            <summary>The <c>PictOpConjointOut</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointOutReverse">
            <summary>The <c>PictOpConjointOutReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointAtop">
            <summary>The <c>PictOpConjointAtop</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointAtopReverse">
            <summary>The <c>PictOpConjointAtopReverse</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointXor">
            <summary>The <c>PictOpConjointXor</c> operation.</summary>
        </member>
        <member name="F:X11.XRenderPictureOp.PictOpConjointMaximum">
            <summary>The <c>PictOpConjointMaximum</c> operation.</summary>
        </member>
        <member name="T:X11.XRenderPolyEdge">
            <summary>The <see cref="T:X11.XRenderPolyEdge" /> class defines the XRendering Extension possible polygon rendering modes.</summary>
        </member>
        <member name="F:X11.XRenderPolyEdge.PolyEdgeSharp">
            <summary>The <c>PolyEdgeSharp</c> modes.</summary>
        </member>
        <member name="F:X11.XRenderPolyEdge.PolyEdgeSmooth">
            <summary>The <c>PolyEdgeSmooth</c> modes.</summary>
        </member>
        <member name="F:X11.XRenderPolyEdge.PolyModePrecise">
            <summary>The <c>PolyModePrecise</c> modes.</summary>
        </member>
        <member name="F:X11.XRenderPolyEdge.PolyModeImprecise">
            <summary>The <c>PolyModeImprecise</c> modes.</summary>
        </member>
        <member name="T:X11.XRenderCreatePictureValueMask">
            <summary>The <see cref="T:X11.XRenderCreatePictureValueMask" /> enumeration defines the XRendering Extension possible picture creation options to apply.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPNone">
            <summary>The <c>CPNone</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPRepeat">
            <summary>The <c>CPRepeat</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPAlphaMap">
            <summary>The <c>CPAlphaMap</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPAlphaXOrigin">
            <summary>The <c>CPAlphaXOrigin</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPAlphaYOrigin">
            <summary>The <c>CPAlphaYOrigin</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPClipXOrigin">
            <summary>The <c>CPClipXOrigin</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPClipYOrigin">
            <summary>The <c>CPClipYOrigin</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPClipMask">
            <summary>The <c>CPClipMask</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPGraphicsExposure">
            <summary>The <c>CPGraphicsExposure</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPSubwindowMode">
            <summary>The <c>CPSubwindowMode</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPPolyEdge">
            <summary>The <c>CPPolyEdge</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPPolyMode">
            <summary>The <c>CPPolyMode</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPDither">
            <summary>The <c>CPDither</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPComponentAlpha">
            <summary>The <c>CPComponentAlpha</c> picture creation option.</summary>
        </member>
        <member name="F:X11.XRenderCreatePictureValueMask.CPLastBit">
            <summary>The <c>CPLastBit</c> picture creation option.</summary>
        </member>
        <member name="T:X11.XRenderPictStandardFormat">
            <summary>The <see cref="T:X11.XRenderPictStandardFormat" /> enumeration defines the XRendering Extension possible picture standard formats.</summary>
        </member>
        <member name="F:X11.XRenderPictStandardFormat.PictStandardARGB32">
            <summary>The <c>PictStandardARGB32</c> standard format.</summary>
        </member>
        <member name="F:X11.XRenderPictStandardFormat.PictStandardRGB24">
            <summary>The <c>PictStandardRGB24</c> standard format.</summary>
        </member>
        <member name="F:X11.XRenderPictStandardFormat.PictStandardA8">
            <summary>The <c>PictStandardA8</c> standard format.</summary>
        </member>
        <member name="F:X11.XRenderPictStandardFormat.PictStandardA4">
            <summary>The <c>PictStandardA4</c> standard format.</summary>
        </member>
        <member name="F:X11.XRenderPictStandardFormat.PictStandardA1">
            <summary>The <c>PictStandardA1</c> standard format.</summary>
        </member>
        <member name="F:X11.XRenderPictStandardFormat.PictStandardNUM">
            <summary>The <c>PictStandardNUM</c> standard format.</summary>
        </member>
        <member name="T:X11.XRenderFilters">
            <summary>The <see cref="T:X11.XRenderFilters" /> class defines the XRendering Extension possible render filters.</summary>
        </member>
        <member name="F:X11.XRenderFilters.FilterNearest">
            <summary>The <c>Nearest</c> render filter.</summary>
        </member>
        <member name="F:X11.XRenderFilters.FilterBilinear">
            <summary>The <c>Bilinear</c> render filter.</summary>
        </member>
        <member name="F:X11.XRenderFilters.FilterFast">
            <summary>The <c>Fast</c> render filter.</summary>
        </member>
        <member name="F:X11.XRenderFilters.FilterGood">
            <summary>The <c>Good</c> render filter.</summary>
        </member>
        <member name="F:X11.XRenderFilters.FilterBest">
            <summary>The <c>Best</c> render filter.</summary>
        </member>
        <member name="T:X11.XRenderSubPixelOrder">
            <summary>The <see cref="T:X11.XRenderSubPixelOrder" /> class defines the XRendering Extension possible subpixel order.</summary>
        </member>
        <member name="F:X11.XRenderSubPixelOrder.SubPixelUnknown">
            <summary>The <c>SubPixelUnknown</c> subpixel order.</summary>
        </member>
        <member name="F:X11.XRenderSubPixelOrder.SubPixelHorizontalRGB">
            <summary>The <c>SubPixelHorizontalRGB</c> subpixel order.</summary>
        </member>
        <member name="F:X11.XRenderSubPixelOrder.SubPixelHorizontalBGR">
            <summary>The <c>SubPixelHorizontalBGR</c> subpixel order.</summary>
        </member>
        <member name="F:X11.XRenderSubPixelOrder.SubPixelVerticalRGB">
            <summary>The <c>SubPixelVerticalRGB</c> subpixel order.</summary>
        </member>
        <member name="F:X11.XRenderSubPixelOrder.SubPixelVerticalBGR">
            <summary>The <c>SubPixelVerticalBGR</c> subpixel order.</summary>
        </member>
        <member name="F:X11.XRenderSubPixelOrder.SubPixelNone">
            <summary>The <c>SubPixelNone</c> subpixel order.</summary>
        </member>
        <member name="T:X11.XRenderLib">
            <summary>The <see cref="T:X11.XRenderLib" /> class defines the XRendering Extension methods.</summary>
        </member>
        <member name="M:X11.XRenderLib.XDoubleToFixed(System.Double)">
            <summary>Convert a <see cref="T:System.Double" /> value into an <see cref="T:X11.TInt" /> integer value lifted by 65536.</summary>
            <param name="val">The <see cref="T:System.Double" /> value to convert.</param>
            <returns>The vonverted <see cref="T:X11.TInt" /> value.</returns>
        </member>
        <member name="M:X11.XRenderLib.XFixedToDouble(System.Double)">
            <summary>Convert an <see cref="T:X11.TInt" /> integer value into a <see cref="T:System.Double" /> value lowered by 65536.</summary>
            <param name="val">The <see cref="T:X11.TInt" /> value to convert.</param>
            <returns>The vonverted <see cref="T:System.Double" /> value.</returns>
        </member>
        <member name="M:X11.XRenderLib.XRenderQueryExtension(System.IntPtr,X11.TInt@,X11.TInt@)">
            <summary>Determine whether render extension is available on display.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="eventBasep">The first event number used by the extension (note that Render currently uses no events).<see cref="T:X11.TInt" /></param>
            <param name="errorBasep">he first error number used by the extension.<see cref="T:X11.TInt" /></param>
            <returns>True if the Render extension is available on display, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.XRenderLib.XRenderQueryVersion(System.IntPtr,X11.TInt@,X11.TInt@)">
            <summary>Discover the current Render version number.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="majorVersionp">The major version number less than or equal to the library version numbers RENDER_MAJOR.<see cref="T:X11.TInt" /></param>
            <param name="minorVersionp">The minor version number less than or equal to the library version numbers RENDER_MAJOR.<see cref="T:X11.TInt" /></param>
            <returns>Zero if the Render extension is not present or soome error occurred while attempting to discover the current Render
            version number, or 1 otherwise.<see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.XRenderLib.XRenderQueryFormats(System.IntPtr)">
            <summary>Fetch the available PictFormat information from the X server.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <returns>1 if the available PictFormat information has been fetched successfully from the X server, or 0 otherwise.<see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.XRenderLib.XRenderQuerySubpixelOrder(System.IntPtr,X11.TInt)">
            <summary>Investigate the subpixel order.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns>The <see cref="T:X11.TInt" /> subpixel order.</returns>
            <remarks>Applications interested in the geometry of the elements making up a single pixel on the screen should use
            XRenderQuerySubpixelOrder and do not cache the return value. XRenderSetSubpixelOrder is used by the XRandR library
            to update the value stored by Xrender when the subpixel order changes as a result of screen reconfiguration.</remarks>
        </member>
        <member name="M:X11.XRenderLib.XRenderSetSubpixelOrder(System.IntPtr,X11.TInt,System.Int32)">
            <summary>Set the subpixel order.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <param name="subpixel">The <see cref="T:System.Int32" /> subpixel order to set.</param>
            <returns>Returns <see cref="T:System.Boolean" /><c>true</c> on success, or <c>false</c> otherwise.</returns>
            <remarks>Applications interested in the geometry of the elements making up a single pixel on the screen should use
            XRenderQuerySubpixelOrder and do not cache the return value. XRenderSetSubpixelOrder is used by the XRandR library
            to update the value stored by Xrender when the subpixel order changes as a result of screen reconfiguration.</remarks>
        </member>
        <member name="T:X11.XRenderLib.XRenderDirectFormat">
            <summary>The <see cref="T:X11.XRenderLib.XRenderDirectFormat" /> structure defines the XRendering Extension color component format to apply.</summary>
        </member>
        <member name="F:X11.XRenderLib.XRenderDirectFormat.red">
            <summary>The <see cref="T:X11.TShort" /> bit offset for red.</summary>
        </member>
        <member name="F:X11.XRenderLib.XRenderDirectFormat.green">
            <summary>The <see cref="T:X11.TShort" /> bit offset for green.</summary>
        </member>
        <member name="F:X11.XRenderLib.XRenderDirectFormat.blue">
            <summary>The <see cref="T:X11.TShort" /> bit offset for blue.</summary>
        </member>
        <member name="F:X11.XRenderLib.XRenderDirectFormat.alpha">
            <summary>The <see cref="T:X11.TShort" /> bit offset for alpha.</summary>
        </member>
        <member name="T:X11.XRenderLib.XRenderPictFormat">
            <summary>The <see cref="T:X11.XRenderLib.XRenderPictFormat" /> structure defines the XRendering Extension picture format to apply.</summary>
        </member>
        <member name="T:X11.XRenderLib.XRenderPictureAttributes">
            <summary>The <see cref="T:X11.XRenderLib.XRenderPictureAttributes" /> structure defines the XRendering Extension picture attributes.</summary>
        </member>
        <member name="M:X11.XRenderLib._XRenderFindStandardFormat(System.IntPtr,X11.TInt)">
            <summary>Find the PictFormat suitable for use with the specified format.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="xRenderPictStandardFormat">The requested XRenderPictStandardFormat.<see cref="T:X11.TInt" /></param>
            <returns>The PictFormat suitable for use with the specified format on success, or IntPtr.Zero otherwise.<see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.XRenderLib._XRenderFindVisualFormat(System.IntPtr,System.IntPtr)">
            <summary>Find the PictFormat suitable for use with the specified visual.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11visual">The visual to store the image. <see cref="T:System.IntPtr" /></param>
            <returns>The PictFormat suitable for use with the specified visual on success, or IntPtr.Zero otherwise.<see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.XRenderLib._XRenderCreatePicture(System.IntPtr,System.IntPtr,System.IntPtr,X11.XRenderCreatePictureValueMask,X11.XRenderLib.XRenderPictureAttributes@)">
            <summary>Create a picture for indicated drawable and specified format.  Any values specified in
            'pXRenderPictureAttributes' and 'valuemask' are used in replace of the default values.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11drawable">The drawable to create a picture for<see cref="T:System.IntPtr" /></param>
            <param name="xRenderPictFormat">The desired format of the picture.<see cref="T:X11.XRenderLib.XRenderPictFormat" /></param>
            <param name="valueMask">Specifies which picture attributes are defined in the pXRenderPictureAttributes argument.
            This mask is the bitwise nclusive OR of the valid attribute mask bits. If valuemask is zero, the attributes are
            ignored and are not referenced.<see cref="T:X11.XRenderCreatePictureValueMask" /></param>
            <param name="xRenderPictureAttributes">Specifies the structure from which the attribute values (as specified by the value mask)
            are to be taken.<see cref="T:X11.XRenderLib.XRenderPictureAttributes" /></param>
            <returns>The picture for indicated drawable and specified format on success, or IntPtr.Zero otherwise.<see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.XRenderLib.XRenderFreePicture(System.IntPtr,System.IntPtr)">
            <summary>Instruct the server to free picture.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11renderPicture">The picture to free.<see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.XRenderLib.XRenderFillRectangle(System.IntPtr,X11.TInt,System.IntPtr,X11.XRenderLib.XRenderColor@,X11.TInt,X11.TInt,X11.TUint,X11.TUint)">
            <summary>Composite rectangles of the specified color.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="xRenderPictureOp">The render operation to apply.<see cref="T:X11.TInt" /></param>
            <param name="pictureDestination">The picture to render into.<see cref="T:System.IntPtr" /></param>
            <param name="color">The color to apply.<see cref="T:X11.XRenderLib.XRenderColor" /></param>
            <param name="x"> The left top corner x-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="width"> The rectangle width. <see cref="T:X11.TUint" /></param>
            <param name="height"> The rectangle height. <see cref="T:X11.TUint" /></param>
        </member>
        <member name="M:X11.XRenderLib.XRenderCreateLinearGradient(System.IntPtr,X11.XRenderLib.XLinearGradient@,X11.TInt[],X11.XRenderLib.XRenderColor[],X11.TInt)">
            <summary>Create a picture, containing a linar gradient with the indicated dimensions.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="gradient">The gradient geometry (for linear gradient a line from p1 to p2).<see cref="T:X11.XRenderLib.XLinearGradient" /></param>
            <param name="stops">The color stop positions, relative to the gradient geometry.<see cref="!:X11.TInt[]" /></param>
            <param name="colors">The color premultiplied color values.<see cref="!:XRenderColor[]" /></param>
            <param name="nstops">The number of color stops.<see cref="T:X11.TInt" /></param>
            <returns>The picture, containing a linar gradient, on success, or IntPtr.Zero otherwise.<see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="T:X11.Diagnostics.Severity">
            <summary>The <see cref="T:X11.Diagnostics.Severity" /> enumeration linear scale to categorize the importance
            and seriousness of messages sent to <see cref="T:X11.Diagnostics.IMessageSink" />.</summary>
            <remarks>See also: http://core.loyc.net</remarks>
        </member>
        <member name="F:X11.Diagnostics.Severity.VerboseDetail">
            <summary>Used to log extra information associated with <c>Verbose</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Verbose">
            <summary>Compatible with <c>System.Diagnostics.TraceEventType.Verbose</c> with,
            <c>LoycCore.Severity.Verbose</c> and with <c>log4net.Finest</c>. </summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.DebugDetail">
            <summary>Used to log extra information associated with <c>Debug</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Debug">
            <summary>Falls back to <c>System.Diagnostics.TraceEventType.Verbose</c> and is
            compatible with <c>LoycCore.Severity.Debug</c> and with <c>log4net.Debug</c>. </summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.InfoDetail">
            <summary>Used to log extra information associated with <c>Info</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Info">
            <summary>Compatible with <c>System.Diagnostics.TraceEventType.Information</c> with,
            <c>LoycCore.Severity.Info</c> and with <c>log4net.Info</c>.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.NoteDetail">
            <summary>Used to log extra information associated with <c>Note</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Note">
            <summary>Falls back to <c>System.Diagnostics.TraceEventType.Information</c> and is
            compatible with <c>LoycCore.Severity.Note</c> and with <c>log4net.Note</c>. </summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.WarningDetail">
            <summary>Used to log extra information associated with <c>Warning</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Warning">
            <summary>Compatible with <c>System.Diagnostics.TraceEventType.Warning</c> with,
            <c>LoycCore.Severity.Warning</c> and with <c>log4net.Warning</c>.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.SpecialDetail">
            <summary>Used to log extra information associated with <c>Warning</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Special">
            <summary>Falls back to <c>System.Diagnostics.TraceEventType.Warning</c> and is
            compatible with <c>LoycCore.Severity.Special</c>. </summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.ErrorDetail">
            <summary>Used to log extra information associated with <c>Error</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Error">
            <summary>Compatible with <c>System.Diagnostics.TraceEventType.Error</c> with,
            <c>LoycCore.Severity.Error</c> and with <c>log4net.Error</c>.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.RareDetail">
            <summary>Used to log extra information associated with <c>Rare</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Rare">
            <summary>Falls back to <c>System.Diagnostics.TraceEventType.Error</c> and is
            compatible with <c>LoycCore.Severity.Rare</c> and with <c>log4net.Severe</c>. </summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.CriticalDetail">
            <summary>Used to log extra information associated with <c>Critical</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Critical">
            <summary>Compatible with <c>System.Diagnostics.TraceEventType.Critical</c> with,
            <c>LoycCore.Severity.Critical</c> and with <c>log4net.Critical</c>.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.FatalDetail">
            <summary>Used to log extra information associated with <c>Fatal</c> severity.</summary>
        </member>
        <member name="F:X11.Diagnostics.Severity.Fatal">
            <summary>Falls back to <c>System.Diagnostics.TraceEventType.Critical</c> and is
            compatible with <c>LoycCore.Severity.Fatal</c> and with <c>log4net.Fatal</c>. </summary>
        </member>
        <member name="T:X11.Diagnostics.IMessageSink">
            <summary>The <see cref="T:X11.Diagnostics.IMessageSink" /> interface provides a general-purpose logging class
            prototype, that accepts formatted messages with context information.</summary>
            <remarks>See also: http://core.loyc.net</remarks>
        </member>
        <member name="M:X11.Diagnostics.IMessageSink.Write(X11.Diagnostics.Severity,System.Object,System.String,System.Object[])">
            <summary>Write a log line to a text output.</summary>
            <param name="severity">The <see cref="T:X11.Diagnostics.Severity" /> log severity for the line to log.</param>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="M:X11.Diagnostics.IMessageSink.Write(System.Diagnostics.TraceEventType,System.Object,System.String,System.Object[])">
            <summary>Write a log line to a text output.</summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceEventType" /> log level for the line to log.</param>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="T:X11.Diagnostics.IContext">
            <summary>The <see cref="T:X11.Diagnostics.IContext" /> interface provides a general-purpose context class
            prototype, that provides the <see cref="M:X11.Diagnostics.IContext.Location" /> method in addition to and as the
            preferred alternative for the <see cref="!:ToString" /> method.</summary>
            <remarks>See also: http://core.loyc.net</remarks>
        </member>
        <member name="M:X11.Diagnostics.IContext.Location">
            <summary>Provide the location of a log message.</summary>
            <returns>The <see cref="T:System.String" /> location of a log message.</returns>
        </member>
        <member name="T:X11.Diagnostics.ConsoleMessageSink">
            <summary>The <see cref="T:X11.Diagnostics.ConsoleMessageSink" /> class implements the <see cref="T:X11.Diagnostics.IMessageSink" />
            interface for console logging.</summary>
            <remarks>See also: http://core.loyc.net</remarks>
        </member>
        <member name="F:X11.Diagnostics.ConsoleMessageSink._logLevel">
            <summary>The array of flags to define which log level is served.</summary>
        </member>
        <member name="F:X11.Diagnostics.ConsoleMessageSink._instance">
            <summary>The <see cref="T:X11.Diagnostics.ConsoleMessageSink" /> singleton instance.</summary>
        </member>
        <member name="P:X11.Diagnostics.ConsoleMessageSink.Instance">
            <summary>Get the <see cref="T:X11.Diagnostics.ConsoleMessageSink" /> singleton instance.</summary>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.IsEnabled(X11.Diagnostics.Severity)">
            <summary>Determine whether the indicated <see cref="T:X11.Diagnostics.Severity" /> is enabled for logging.</summary>
            <param name="severity">The <see cref="T:X11.Diagnostics.Severity" /> to test whether it is enabled for logging.</param>
            <returns>Returns <see cref="T:System.Boolean" /><c>true</c> if indicated <see cref="T:X11.Diagnostics.Severity" /> is enabled
            for logging, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.IsToWrite(X11.Diagnostics.Severity)">
            <summary>Determine whether to write a log message for the indicated <see cref="T:X11.Diagnostics.Severity" />.</summary>
            <returns>Returns <see cref="T:System.Boolean" /><c>true</c> if log message is to write,
            or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.Prefix(System.Diagnostics.TraceEventType)">
            <summary>Calculate the message prefix from the log level.</summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceEventType" /> log level to calculate the message prefix from.</param>
            <returns>The <see cref="T:System.String" /> message prefix from the log level.</returns>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.Prefix(X11.Diagnostics.Severity)">
            <summary>Calculate the message prefix from the log severity.</summary>
            <param name="severity">The <see cref="T:X11.Diagnostics.Severity" /> log severity to calculate the message prefix from.</param>
            <returns>The <see cref="T:System.String" /> message prefix from the log severity.</returns>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.SetEnabledFlag(X11.Diagnostics.Severity,System.Boolean)">
            <summary>Specify whether logging for the indicated <see cref="T:X11.Diagnostics.Severity" /> shall be switched on or off.</summary>
            <param name="severity">The <see cref="T:X11.Diagnostics.Severity" /> to switch on or off.</param>
            <param name="flag">The <see cref="T:System.Boolean" /> on or off switch for the indicated <see cref="T:X11.Diagnostics.Severity" />.</param>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.SortableTime(System.DateTime)">
            <summary>Format a sortable time string from indicated date time.</summary>
            <param name="time">The date time to format a sortable time string from.<see cref="T:System.DateTime" /></param>
            <returns>The sortable time string from indicated date time.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.ToSeverity(System.Diagnostics.TraceEventType)">
            <summary>Transform the indicated <see cref="T:System.Diagnostics.TraceEventType" /> to the corresponding <see cref="T:X11.Diagnostics.Severity" />.</summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceEventType" /> to transform.</param>
            <returns>The corresponding <see cref="T:X11.Diagnostics.Severity" /> on success, or <see cref="F:X11.Diagnostics.Severity.Verbose" /> otherwise.</returns>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.WriteError(System.Object,System.String,System.Object[])">
            <summary>Write an error log line to a text output.</summary>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.WriteInfo(System.Object,System.String,System.Object[])">
            <summary>Write an information log line to a text output.</summary>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.WriteVerbose(System.Object,System.String,System.Object[])">
            <summary>Write an verbose log line to a text output.</summary>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.WriteWarning(System.Object,System.String,System.Object[])">
            <summary>Write an warning log line to a text output.</summary>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.WriteSeverity(X11.Diagnostics.Severity,System.Object,System.String,System.Object[])">
            <summary>Write a log line to a text output.</summary>
            <param name="severity">The <see cref="T:X11.Diagnostics.Severity" /> log severity for the line to log.</param>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.Write(X11.Diagnostics.Severity,System.Object,System.String,System.Object[])">
            <summary>Write a log line to a text output.</summary>
            <param name="severity">The <see cref="T:X11.Diagnostics.Severity" /> log severity for the line to log.
            Logs with a log severity that is <see cref="M:X11.Diagnostics.ConsoleMessageSink.IsEnabled(X11.Diagnostics.Severity)" /><c>false</c> are ignored.</param>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="M:X11.Diagnostics.ConsoleMessageSink.Write(System.Diagnostics.TraceEventType,System.Object,System.String,System.Object[])">
            <summary>Write a log line to a text output.</summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceEventType" /> log level for the line to log.
            Logs with a log level that is <see cref="M:X11.Diagnostics.ConsoleMessageSink.IsEnabled(X11.Diagnostics.Severity)" /><c>false</c> are ignored.</param>
            <param name="context">The <see cref="T:System.Object" /> log context. Can be <c>null</c>. Should implement <see cref="T:X11.Diagnostics.IContext" />.</param>
            <param name="format">The <see cref="T:System.String" /> message format.</param>
            <param name="parameter">The (optional) <see cref="T:System.Object" />[] message parameters.</param>
        </member>
        <member name="T:X11.CommonUnixPrintService">
            <summary>The convenience wrapper around the 'Common Unix Printing System'.</summary>
        </member>
        <member name="T:X11.CommonUnixPrintService.NameValueElement">
            <summary>The name value element of a NameValueCollection.</summary>
        </member>
        <member name="F:X11.CommonUnixPrintService.NameValueElement.Name">
            <summary>The name.</summary>
        </member>
        <member name="F:X11.CommonUnixPrintService.NameValueElement.Value">
            <summary>The value.</summary>
        </member>
        <member name="M:X11.CommonUnixPrintService.NameValueElement.#ctor(System.String,System.String)">
            <summary>The cenvenience constructor.</summary>
            <param name="name">The name.<see cref="T:System.String" /></param>
            <param name="value">The value.<see cref="T:System.String" /></param>
        </member>
        <member name="T:X11.CommonUnixPrintService.NameValueCollection">
            <summary>A collection of elements, that provide a name and a string value.</summary>
        </member>
        <member name="M:X11.CommonUnixPrintService.NameValueCollection.Add(System.String,System.String)">
            <summary>The convenience Add() method.</summary>
            <param name="name">The name of the NameValueElement to add.<see cref="T:System.String" /></param>
            <param name="value">The value of the NameValueElement to add.<see cref="T:System.String" /></param>
            <returns>The added NameValueElement.<see cref="T:X11.CommonUnixPrintService.NameValueElement" /></returns>
        </member>
        <member name="P:X11.CommonUnixPrintService.NameValueCollection.Item(System.String)">
            <summary>Access the value of a NameValueElement, indicated by the name. Or add a new NameValueElement to the collection.</summary>
            <param name="name">The name to identify the requested value.<see cref="T:System.String" /></param>
        </member>
        <member name="P:X11.CommonUnixPrintService.InstalledPrinters">
            <summary>Get the list of installed printers.</summary>
            <returns>The list of installed printer names on success, or an empty list otherwise.<see cref="T:System.String" /></returns>
            <remarks>The list might be emty if CUPS isn't installed or no CUPS printer is installed.</remarks>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:X11.CommonUnixPrintService.DefaultPrinter-->
        <member name="M:X11.CommonUnixPrintService.CheckCupsInstalled">
            <summary>Perform a cups call to check if it is installed.</summary>
        </member>
        <member name="M:X11.CommonUnixPrintService.OpenDests(System.IntPtr@)">
            <summary>Wrap native call to 'cupsOpenDests'.</summary>
            <param name="ptr">The result of the native call. The raw 'C' cups_dest_t**.<see cref="T:System.IntPtr" /></param>
            <returns>The number of determined print destinations.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.CommonUnixPrintService.CloseDests(System.IntPtr@,System.Int32)">
            <summary>Wrap the native call to 'cupsCloseDests'.</summary>
            <param name="ptr">The raw 'C' cups_dest_t ** as the OpenDests() result.<see cref="T:System.IntPtr" /></param>
            <param name="count">The number of determined print destinations as the OpenDests() result.<see cref="T:System.String" /></param>
        </member>
        <member name="M:X11.CommonUnixPrintService.LoadPrinters">
            <summary>Load the names and states of the local printers.</summary>
        </member>
        <member name="M:X11.CommonUnixPrintService.LoadOptionList(System.IntPtr,System.String,X11.CommonUnixPrintService.NameValueCollection,System.String@)">
            <summary>Load a printer's options (selection of paper sizes, paper sources, etc)
            and sets the default option from the selected list.</summary>
            <param name="ppd">Printer ppd file handle.</param>
            <param name="option_name">Name of the option group to load.</param>
            <param name="list">List of loaded options.</param>
            <param name="defoption">The default option from the loaded options list.</param>
        </member>
        <member name="M:X11.CommonUnixPrintService.LoadPrinterOptions(System.IntPtr,System.Int32)">
            <summary>Load the global options of a printer.</summary>
            <param name="options">The options field of a printer's CUPS_DESTS structure.</param>
            <param name="numOptions">The number of options of the printer.</param>
            <remarks>The caller is resposible to free the 'options'.</remarks>
        </member>
        <member name="M:X11.CommonUnixPrintService.PrinterLocation(System.String)">
            <summary>Determine the printer location.</summary>
            <param name="printerName">The name of the printer to determine the location for.<see cref="T:System.String" /></param>
            <returns>The printer location on success, or an empty string otherwise.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.CommonUnixPrintService.PrinterIsAcceptingJobs(System.String)">
            <summary>Determine the printer accepting-jobs flag.</summary>
            <param name="printerName">The name of the printer to determine the ccepting-jobs flag for.<see cref="T:System.String" /></param>
            <returns>The printer ccepting-jobs flag on success, or an empty string otherwise.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.CommonUnixPrintService.PrinterIsShared(System.String)">
            <summary>Determine the printer is-shared flag.</summary>
            <param name="printerName">The name of the printer to determine the is-shared flag for.<see cref="T:System.String" /></param>
            <returns>The printer is-shared flag on success, or an empty string otherwise.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.CommonUnixPrintService.PrinterState(System.String)">
            <summary>Determine the printer state.</summary>
            <param name="printerName">The name of the printer to determine the state for.<see cref="T:System.String" /></param>
            <returns>The printer state on success, or an empty string otherwise.<see cref="T:System.String" /></returns>
        </member>
        <member name="T:X11.X11WrapperResources">
            <summary> The "X11 Wrapper" ressources. </summary>
        </member>
        <member name="F:X11.X11WrapperResources.resourceCulture">
            <summary> Keep the current thread's current UI culture property for all resource lookups. </summary>
        </member>
        <member name="P:X11.X11WrapperResources.Lcid">
            <summary> Get current thread's current UI culture LCID. </summary>
        </member>
        <member name="P:X11.X11WrapperResources.Culture">
            <summary> Get or set the current thread's current UI culture property for all resource lookups. </summary>
        </member>
        <member name="T:X11.X11lib">
            <summary>The <see cref="T:X11.X11lib" /> class provides a lot of the libX interfaces.</summary>
            <summary>The <see cref="T:X11.X11lib" /> class provides a lot of the libX interfaces.</summary>
        </member>
        <member name="T:X11.X11lib.XKeySym">
            <summary>A KeySym is the encoding of a symbol on the cap of a key.</summary>
            <remarks>Even if the KeySym value range (??? for latin languages ???) is between 0x0000 and 0xFFFF (ushort),
            X11 uses an unsigned int 32 bit value (uint).</remarks>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_NONE">
            <summary>No key symbol or the undefined/uninitialized/not known key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_LButton">
            <summary>The <c>left mouse button</c>.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_RButton">
            <summary>The <c>right mouse button</c>.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_Cancel">
            <summary>The <c>CANCEL</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_MButton">
            <summary>The <c>middle mouse button</c>. (three-button mouse)</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_XButton1">
            <summary>The <c>first x mouse button</c> (five-button mouse).</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_XButton2">
            <summary>The <c>second x mouse button</c> (five-button mouse).</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.System">
            <summary>A special key masking the real key being processed as a system key.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.ImeProcessed">
            <summary>A special key masking the real key being processed by an IME. </summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.DeadCharProcessed">
            <summary>A special key masking the key is used with another key to create a single combined character.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_LineFeed">
            <summary>The <c>LINEFEED</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Enter">
            <summary>The <c>CLEAR</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_ShiftKey">
            <summary>The <c>SHIFT</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_ControlKey">
            <summary>The <c>CTRL</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_KanaMode">
            <summary>The <c>PAUSE</c>/<c>HOLD</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_IMEConvert">
            <summary>The <c>ESC</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Space">
            <summary>The <c>SPACE</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Exclamation">
            <summary>The <c>!</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_QuotationMark">
            <summary>The <c>"</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Skarp">
            <summary>The <c>#</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Dollar">
            <summary>The <c>$</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Percent">
            <summary>The <c>%</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Ampersand">
            <summary>The <c>&amp;</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Apostrophe">
            <summary>The <c>'</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_LeftParanthesis">
            <summary>The <c>(</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_RightParanthesis">
            <summary>The <c>)</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Asterisk">
            <summary>The <c>*</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Plus">
            <summary>The <c>+</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal">
            <summary>The <c>,</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Minus">
            <summary>The <c>-</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Dot">
            <summary>The <c>.</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Slash">
            <summary>The <c>/</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal0">
            <summary>The decimal <c>0</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal1">
            <summary>The decimal <c>1</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal2">
            <summary>The decimal <c>2</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal3">
            <summary>The decimal <c>3</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal4">
            <summary>The decimal <c>4</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal5">
            <summary>The decimal <c>5</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal6">
            <summary>The decimal <c>6</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal7">
            <summary>The decimal <c>7</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal8">
            <summary>The decimal <c>8</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Decimal9">
            <summary>The decimal <c>9</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Colon">
            <summary>The <c>:</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_SemiColon">
            <summary>The <c>;</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_LeftAngleBracket">
            <summary>The <c>&lt;</c>/<c>less</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Equal">
            <summary>The <c>=</c>/<c>equal</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_RightAngleBracket">
            <summary>The <c>&gt;</c>/<c>greater</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_QuestionnMark">
            <summary>The <c>?</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_AT">
            <summary>The <c>@</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_A">
            <summary>The letter <c>A</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_B">
            <summary>The letter <c>B</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_C">
            <summary>The letter <c>C</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_D">
            <summary>The letter <c>D</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_E">
            <summary>The letter <c>E</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F">
            <summary>The letter <c>F</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_G">
            <summary>The letter <c>G</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_H">
            <summary>The letter <c>H</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_I">
            <summary>The letter <c>I</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_J">
            <summary>The letter <c>J</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_K">
            <summary>The letter <c>K</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_L">
            <summary>The letter <c>L</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_M">
            <summary>The letter <c>M</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_N">
            <summary>The letter <c>N</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_O">
            <summary>The letter <c>O</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_P">
            <summary>The letter <c>P</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Q">
            <summary>The letter <c>Q</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_R">
            <summary>The letter <c>R</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_S">
            <summary>The letter <c>S</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_T">
            <summary>The letter <c>T</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_U">
            <summary>The letter <c>U</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_V">
            <summary>The letter <c>V</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_W">
            <summary>The letter <c>W</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_X">
            <summary>The letter <c>X</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Y">
            <summary>The letter <c>Y</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Z">
            <summary>The letter <c>Z</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_LeftBracket">
            <summary>The <c>[</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_BackSlash">
            <summary>The <c>\\</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_RightBracket">
            <summary>The <c>]</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Caret">
            <summary>The <c>^</c>/<c>CIRCUM</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_UnderScore">
            <summary>The <c>_</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_LeftQuote">
            <summary>The <c>"</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_a">
            <summary>The letter <c>A</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_b">
            <summary>The letter <c>B</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_c">
            <summary>The letter <c>C</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_d">
            <summary>The letter <c>D</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_e">
            <summary>The letter <c>E</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_f">
            <summary>The letter <c>F</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_g">
            <summary>The letter <c>G</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_h">
            <summary>The letter <c>H</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_i">
            <summary>The letter <c>I</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_j">
            <summary>The letter <c>J</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_k">
            <summary>The letter <c>K</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_l">
            <summary>The letter <c>L</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_m">
            <summary>The letter <c>M</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_n">
            <summary>The letter <c>N</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_o">
            <summary>The letter <c>O</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_p">
            <summary>The letter <c>P</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_q">
            <summary>The letter <c>Q</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_r">
            <summary>The letter <c>R</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_s">
            <summary>The letter <c>S</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_t">
            <summary>The letter <c>T</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_u">
            <summary>The letter <c>U</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_v">
            <summary>The letter <c>V</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_w">
            <summary>The letter <c>W</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_x">
            <summary>The letter <c>X</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_y">
            <summary>The letter <c>Y</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_z">
            <summary>The letter <c>Z</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_LeftCurlyBrace">
            <summary>The <c>{</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Pipe">
            <summary>The <c>|</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_RightCurlyBrace">
            <summary>The <c>}</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Tilde">
            <summary>The <c>~</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_NoBreakSpace">
            <summary>The <c></c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ExclamDown">
            <summary>The <c>¡</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Cent">
            <summary>The <c>¢</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Sterling">
            <summary>The <c>£</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Currency">
            <summary>The <c>¤</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Yen">
            <summary>The <c>¥</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_BrokenBar">
            <summary>The <c>¦</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Section">
            <summary>The <c>§</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Diaeresis">
            <summary>The <c>¨</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Copyright">
            <summary>The <c>©</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Ordfeminine">
            <summary>The <c>ª</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_GuillemotLeft">
            <summary>The <c>«</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_NotSign">
            <summary>The <c>¬</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Hyphen">
            <summary>The <c>­­°-</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Registered">
            <summary>The <c>­®</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Macron">
            <summary>The <c>¯</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Degree">
            <summary>The <c>°</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_PlusMinus">
            <summary>The <c>±</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_TwoSuperior">
            <summary>The <c>²</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ThreeSuperior">
            <summary>The <c>³</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Acute">
            <summary>The <c>´</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Mu">
            <summary>The <c>µ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Paragraph">
            <summary>The <c>¶</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_PeriodCentered">
            <summary>The <c>·</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Cedilla">
            <summary>The <c>¸</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_OneSuperior">
            <summary>The <c>¹</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Masculine">
            <summary>The <c>º</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_GuillemotRight">
            <summary>The <c>»</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_OneQuarter">
            <summary>The <c>¼</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_OneHalf">
            <summary>The <c>½</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ThreeQuarters">
            <summary>The <c>¾</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_QuestionDown">
            <summary>The <c>¿</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_AGrave">
            <summary>The <c>À</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_AAcute">
            <summary>The <c>Á</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ACircumflex">
            <summary>The <c>Â</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ATilde">
            <summary>The <c>Ã</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ADiaeresis">
            <summary>The <c>Ä</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Aring">
            <summary>The <c>Å</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_AE">
            <summary>The <c>Æ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_CCedilla">
            <summary>The <c>Ç</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_EGrave">
            <summary>The <c>È</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_EAcute">
            <summary>The <c>É</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ECircumflex">
            <summary>The <c>Ê</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_EDiaeresis">
            <summary>The <c>Ë</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_IGrave">
            <summary>The <c>Ì</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_IAcute">
            <summary>The <c>Í</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ICircumflex">
            <summary>The <c>Î</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_IDiaeresis">
            <summary>The <c>Ï</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ETH">
            <summary>The <c>Ð</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_NTilde">
            <summary>The <c>Ñ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_OGrave">
            <summary>The <c>Ò</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Oacute">
            <summary>The <c>Ó</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_OCircumflex">
            <summary>The <c>Ô</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_OTilde">
            <summary>The <c>Õ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ODiaeresis">
            <summary>The <c>Ö</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Multiply_">
            <summary>The <c>×</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_OOblique">
            <summary>The <c>Ø</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_UGrave">
            <summary>The <c>Ù</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_UAcute">
            <summary>The <c>Ú</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_UCircumflex">
            <summary>The <c>Û</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_UDiaeresis">
            <summary>The <c>Ü</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_YAcute">
            <summary>The <c>Ý</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Thorn">
            <summary>The <c>Þ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_sSharp">
            <summary>The <c>ß</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_aGrave">
            <summary>The <c>à</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_aAcute">
            <summary>The <c>á</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_aCircumflex">
            <summary>The <c>â</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_aTilde">
            <summary>The <c>ã</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_aDiaeresis">
            <summary>The <c>ä</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_aRing">
            <summary>The <c>å</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ae">
            <summary>The <c>æ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_cCedilla">
            <summary>The <c>ç</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_eGrave">
            <summary>The <c>è</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_eAcute">
            <summary>The <c>é</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_eCircumflex">
            <summary>The <c>ê</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_eDiaeresis">
            <summary>The <c>ë</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_iGrave">
            <summary>The <c>ì</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_iAcute">
            <summary>The <c>í</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_iCircumflex">
            <summary>The <c>î</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_iDiaeresis">
            <summary>The <c>ï</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_eth">
            <summary>The <c>ð</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_nTilde">
            <summary>The <c>ñ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_oGrave">
            <summary>The <c>ò</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_oAcute">
            <summary>The <c>ó</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_oCircumflex">
            <summary>The <c>ô</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_oTilde">
            <summary>The <c>õ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_oDiaeresis">
            <summary>The <c>ö</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Division">
            <summary>The <c>÷</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_oSlash">
            <summary>The <c>ø</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_uGrave">
            <summary>The <c>ù</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_uAcute">
            <summary>The <c>ú</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_uCircumflex">
            <summary>The <c>û</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_uDiaeresis">
            <summary>The <c>ü</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_yAcute">
            <summary>The <c>ý</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_thorn">
            <summary>The <c>þ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_yDiaeresis">
            <summary>The <c>ÿ</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Alt_Gr">
            <summary>The <c>AltGr</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_BackSpace">
            <summary>The <c>BACK SPACE</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Tab">
            <summary>The <c>TAB</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Clear">
            <summary>The <c>CLEAR</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Return">
            <summary>The <c>RETURN</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Pause">
            <summary>The <c>PAUSE</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ScrollLock">
            <summary>The <c>SCROLL LOCK</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Escape">
            <summary>The <c>ESCAPE</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Home">
            <summary>The <c>HOME</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Left">
            <summary>The <c>LEFT</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Up">
            <summary>The <c>UP</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Right">
            <summary>The <c>RIGHT</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Down">
            <summary>The <c>DOWN</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Page_Up">
            <summary>The <c>PAGE UP</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Page_Down">
            <summary>The <c>PAGE DOWN</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_End">
            <summary>The <c>END</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Begin">
            <summary>The <c>BEGIN</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Select">
            <summary>The <c>SELECT</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Print">
            <summary>The <c>PRINT</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Execute">
            <summary>The <c>EXECUTE</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Insert">
            <summary>The <c>INSERT</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Menu">
            <summary>The <c>MENU</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Help">
            <summary>The <c>HELP</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_NumLock">
            <summary>The <c>NUM LOCK</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Num_Enter">
            <summary>The <c>NUM ENTER</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.WF_Numpad_Decimal">
            <summary>The <c>NUMPAD DECIMAL</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_Multiply">
            <summary>The numerical pad multiply <c>*</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_Add">
            <summary>The numerical pad add <c>+</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_Separator">
            <summary>The numerical pad separator <c>.</c> (English) or <c>,</c> (German) key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_Subtract">
            <summary>The numerical pad subtract <c>-</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_Decimal">
            <summary>The numerical pad decimal <c>.</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_Divide">
            <summary>The numerical pad divide <c>/</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_0">
            <summary>The numerical pad decimal <c>0</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_1">
            <summary>The numerical pad decimal <c>1</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_2">
            <summary>The numerical pad decimal <c>2</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_3">
            <summary>The numerical pad decimal <c>3</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_4">
            <summary>The numerical pad decimal <c>4</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_5">
            <summary>The numerical pad decimal <c>5</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_6">
            <summary>The numerical pad decimal <c>6</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_7">
            <summary>The numerical pad decimal <c>7</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_8">
            <summary>The numerical pad decimal <c>8</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Numpad_9">
            <summary>The numerical pad decimal <c>9</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F1">
            <summary>The <c>Function 1</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F2">
            <summary>The <c>Function 2</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F3">
            <summary>The <c>Function 3</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F4">
            <summary>The <c>Function 4</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F5">
            <summary>The <c>Function 5</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F6">
            <summary>The <c>Function 6</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F7">
            <summary>The <c>Function 7</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F8">
            <summary>The <c>Function 8</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F9">
            <summary>The <c>Function 9</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F10">
            <summary>The <c>Function 10</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F11">
            <summary>The <c>Function 11</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F12">
            <summary>The <c>Function 12</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F13">
            <summary>The <c>Function 13</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F14">
            <summary>The <c>Function 14</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F15">
            <summary>The <c>Function 15</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F16">
            <summary>The <c>Function 16</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F17">
            <summary>The <c>Function 17</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F18">
            <summary>The <c>Function 18</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F19">
            <summary>The <c>Function 19</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F20">
            <summary>The <c>Function 20</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F21">
            <summary>The <c>Function 21</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F22">
            <summary>The <c>Function 22</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F23">
            <summary>The <c>Function 23</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_F24">
            <summary>The <c>Function 24</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Shift_L">
            <summary>The <c>Shift</c> key symbol on the left.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Shift_R">
            <summary>The <c>Shift</c> key symbol on the right.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Control_L">
            <summary>The <c>Control</c> key symbol on the left.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Control_R">
            <summary>The <c>Control</c> key symbol on the right.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_CapsLock">
            <summary>The <c>CAPS LOCK</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_ShiftLock">
            <summary>The <c>SHIFT LOCK</c> key symbol.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Meta_L">
            <summary>The <c>Meta</c> key symbol on the left. This can be the Windowss or Apple key.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Meta_R">
            <summary>The <c>Meta</c> key symbol on the right. This can be the Windowss or Apple key.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Alt_L">
            <summary>The <c>Alt</c> key symbol on the left.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Alt_R">
            <summary>The <c>Alt</c> key symbol on the right. This is NOT <c>AltGr</c>!</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Super_L">
            <summary>The <c>Super</c> key symbol on the left. This can be the Windowss or Apple key.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Super_R">
            <summary>The <c>Super</c> key symbol on the right. This can be the Windowss or Apple key.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Hyper_L">
            <summary>The <c>Hyper</c> key symbol on the left. This can be the Windowss or Apple key.</summary>
        </member>
        <member name="F:X11.X11lib.XKeySym.XK_Hyper_R">
            <summary>The <c>Hyper</c> key symbol on the right. This can be the Windowss or Apple key.</summary>
        </member>
        <member name="M:X11.X11lib.CharToXKeySym(System.Char)">
            <summary>Convert the indicated character to the appropriate key symbol.</summary>
            <param name="c">The <see cref="T:System.Char" /> character to convert into the appropriate key symbol.</param>
            <returns>The appropriate <see cref="T:X11.X11lib.XKeySym" /> key symbol.</returns>
        </member>
        <member name="M:X11.X11lib.WindowsKeyStrToXKeySym(System.String,System.String)">
            <summary>Convert the indicated character to the appropriate key symbol.</summary>
            <param name="s">The <see cref="T:System.String" /> string to convert into the appropriate key symbol.</param>
            <param name="m">The modifier <see cref="T:System.String" /> string to convert into the appropriate key symbol.</param>
            <returns>The appropriate <see cref="T:X11.X11lib.XKeySym" /> key symbol.</returns>
        </member>
        <member name="M:X11.X11lib.XKeySymToString(X11.X11lib.XKeySym)">
            <summary>Convert a <see cref="T:X11.X11lib.XKeySym" /> key symbol to it's equivalent string.</summary>
            <param name="key">The <see cref="T:X11.X11lib.XKeySym" /> key symbol to convert.</param>
            <returns>The <see cref="T:System.String" /> equivalet if the indicated key symbol.</returns>
        </member>
        <member name="M:X11.X11lib.NewXColor(X11.TPixel,X11.TUchar,X11.TUchar,X11.TUchar,X11.TUchar,X11.TUchar)">
            <summary>Utility funnction to create a new <see cref="T:X11.XColor" /> structure instance.</summary>
        </member>
        <member name="T:X11.X11lib._XClassHint">
            <summary> Internal memory mapping structure for XClassHint structure. </summary>
            <remarks> First structure element is on offset 0. This can be used to free the structute itself. </remarks>
        </member>
        <member name="F:X11.X11lib._XClassHint.res_name">
            <summary> The application name (might be changed during runtime). </summary>
            <remarks> Must be freed separately. </remarks>
        </member>
        <member name="F:X11.X11lib._XClassHint.res_class">
            <summary> The application class name (should be constant during runtime). </summary>
            <remarks> Must be freed separately. </remarks>
        </member>
        <member name="F:X11.X11lib._XClassHint.Zero">
            <summary>Represents a <see cref="T:X11.X11lib._XClassHint" /> that has been initialized to zero.</summary>
        </member>
        <member name="T:X11.X11lib._XImage">
            <summary>The <see cref="T:X11.X11lib._XImage" /> structure provides the transfer images between a client and the server.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.width">
            <summary>The size of the image.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.height">
            <summary>The size of the image.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.xoffset">
            <summary>The number of pixels offset in X direction. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.format">
            <summary>The image format. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.data">
            <summary>The pointer to image data. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.byte_order">
            <summary>The data byte order. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.bitmap_unit">
            <summary>The quantity of scanline 8, 16, 32. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.bitmap_bit_order">
            <summary>The bitmap bit order. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.bitmap_pad">
            <summary>The bitmap dad. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.depth">
            <summary>The depth of image. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.bytes_per_line">
            <summary>The accelerator to next scanline. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.bits_per_pixel">
            <summary>The number of bits per pixel (ZPixmap). </summary>
        </member>
        <member name="F:X11.X11lib._XImage.red_mask">
            <summary>The red mask. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.green_mask">
            <summary>The green mask. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.blue_mask">
            <summary>The blue mask. </summary>
        </member>
        <member name="F:X11.X11lib._XImage.obdata">
            <summary>The hook for the object routines to hang on. </summary>
        </member>
        <member name="T:X11.X11lib._XImage.funcs">
            <summary>The image manipulation function pointers.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.funcs.create_image">
            <summary>The create image function pointer.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.funcs.destroy_image">
            <summary>The destroy image function pointer.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.funcs.get_pixel">
            <summary>The get pixel function pointer.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.funcs.put_pixel">
            <summary>The put pixel function pointer.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.funcs.sub_image">
            <summary>The sub image function pointer.</summary>
        </member>
        <member name="F:X11.X11lib._XImage.funcs.add_pixel">
            <summary>The add pixel function pointer.</summary>
        </member>
        <member name="F:X11.X11lib.CurrentTime_">
            <summary>Identify a special time. Typically the 'time, auto-inserted by the server'.</summary>
        </member>
        <member name="P:X11.X11lib.CurrentTime">
            <summary>Gets the current system up time in ms.</summary>
        </member>
        <member name="M:X11.X11lib.ToTInt(System.Double)">
            <summary>Convert indicated value to the nearest integer value.</summary>
            <param name="value">The <see cref="T:System.Double" /> value to convert.</param>
            <returns> The nearest <see cref="T:X11.TInt" /> value.</returns>
        </member>
        <member name="M:X11.X11lib.ToTUint(System.Double)">
            <summary>Convert indicated value to the nearest unsigned integer value.</summary>
            <param name="value">The <see cref="T:System.Double" /> value to convert.</param>
            <returns> The nearest <see cref="T:X11.TUint" /> value.</returns>
        </member>
        <member name="M:X11.X11lib.ToTShort(System.Double)">
            <summary>Convert indicated value to the nearest short integer value.</summary>
            <param name="value">The <see cref="T:System.Double" /> value to convert.</param>
            <returns> The nearest <see cref="T:X11.TShort" /> value.</returns>
        </member>
        <member name="M:X11.X11lib.XOpenDisplay(System.String)">
            <summary> Open a connection to the X server that controls a display. </summary>
            <param name="x11displayName"> Display name syntax is: hostname:number.screen_number; like: dual-headed:0.1; or empty sting for default. <see cref="T:System.String" /></param>
            <returns> The display pointer on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XCloseDisplay(System.IntPtr)">
            <summary> Close a connection to the X server that controls a display. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XLockDisplay(System.IntPtr)">
            <summary>Locks out all other threads from using the specified display. Other threads attempting to use the display will block until the display
            is unlocked by this thread. This function has no effect unless Xlib was successfully initialized for threads using <see cref="!:XInitThreads" />.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <remarks>Nested calls to <see cref="M:X11.X11lib.XLockDisplay(System.IntPtr)" /> work correctly; the display will not actually be unlocked until <see cref="!:&gt;" /> has been
            called the same number of times as <see cref="M:X11.X11lib.XLockDisplay(System.IntPtr)" />.</remarks>
        </member>
        <member name="M:X11.X11lib.XUnlockDisplay(System.IntPtr)">
            <summary>Allows other threads to use the specified display again. Any threads, that have been blocked on the display, are allowed to continue.
            This function has no effect unless Xlib was successfully initialized for threads using <see cref="!:XInitThreads" />.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <remarks>Nested locking works correctly; if <see cref="M:X11.X11lib.XLockDisplay(System.IntPtr)" /> has been called multiple times by a thread, then <see cref="M:X11.X11lib.XUnlockDisplay(System.IntPtr)" />
            must be called an equal number of times before the display is actually unlocked.</remarks>
        </member>
        <member name="M:X11.X11lib.XRootWindow(System.IntPtr,X11.TInt)">
            <summary> Get the root window. Useful with functions that need a drawable of a particular screen and for creating top-level windows. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns> The root window on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XRootWindowOfScreen(System.IntPtr)">
            <summary> Get the root window of the specified screen. </summary>
            <param name="x11screen"> The connection to an X server. <see cref="T:System.IntPtr" /></param>
            <returns> The window ID. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XDestroyWindow(System.IntPtr,System.IntPtr)">
            <summary> Destroy the specified window as well as all of its subwindows. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to destroy. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XDefaultRootWindow(System.IntPtr)">
            <summary> Get the default root window. Useful with functions that need a drawable of a particular screen and for creating top-level windows. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <returns> The default root window on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XMoveWindow(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt)">
            <summary> Move specified window to the specified x and y coordinates, but do not change the window's size, raise the window, or change the mapping state of the window. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to move. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The new x coordinate, which defines the new location of the top-left pixel of the window's border or the window itself if it has no border. <see cref="T:System.Int32" /></param>
            <param name="y"> The new y coordinate, which defines the new location of the top-left pixel of the window's border or the window itself if it has no border. <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:X11.X11lib.XResizeWindow(System.IntPtr,System.IntPtr,X11.TUint,X11.TUint)">
            <summary> Change the inside dimensions of the specified window, not including its borders. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to resize. <see cref="T:System.IntPtr" /></param>
            <param name="width"> The new width, which is the interior dimensions of the window after the call completes. <see cref="T:System.UInt32" /></param>
            <param name="height"> The new heigth, which is the interior dimensions of the window after the call completes. <see cref="T:System.UInt32" /></param>
        </member>
        <member name="M:X11.X11lib.XMoveResizeWindow(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint)">
            <summary> Change the size and location of the specified window without raising it. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to move and resize. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The new x coordinate, which defines the new location of the top-left pixel of the window's border or the window itself if it has no border. <see cref="T:System.Int32" /></param>
            <param name="y"> The new y coordinate, which defines the new location of the top-left pixel of the window's border or the window itself if it has no border. <see cref="T:System.Int32" /></param>
            <param name="width"> The new width, which is the interior dimensions of the window after the call completes. <see cref="T:System.UInt32" /></param>
            <param name="height"> The new heigth, which is the interior dimensions of the window after the call completes. <see cref="T:System.UInt32" /></param>
        </member>
        <member name="M:X11.X11lib.XReparentWindow(System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt)">
            <summary> Change the parent window of the specified window. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to reparent. <see cref="T:System.IntPtr" /></param>
            <param name="x11parentWindow"> The parent window. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The new x coordinate, which defines the new location of the top-left pixel of the window inside the new parent window. <see cref="T:System.Int32" /></param>
            <param name="y"> The new y coordinate, which defines the new location of the top-left pixel of the window inside the new parent window. <see cref="T:System.Int32" /></param>
            <remarks> If the specified window is mapped, XReparentWindow() automatically performs an UnmapWindow request on it,
            removes it from its current position in the hierarchy, and inserts it as the child of the specified parent.
            The window is placed in the stacking order on top with respect to sibling windows.
            * After reparenting the specified window, XReparentWindow() causes the X server to generate a ReparentNotify event.
            The override_redirect member returned in this event is set to the window's corresponding attribute. Window manager
            clients usually should ignore this window if this member is set to True. Finally, if the specified window was
            originally mapped, the X server automatically performs a MapWindow request on it.
            * The X server performs normal exposure processing on formerly obscured windows. The X server might not generate Expose
            events for regions from the initial UnmapWindow request that are immediately obscured by the final MapWindow request. </remarks>
        </member>
        <member name="M:X11.X11lib.XMapWindow(System.IntPtr,System.IntPtr)">
            <summary> Map the window and all of its subwindows that have had map requests to a display. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to map. <see cref="T:System.IntPtr" /></param>
            <remarks>Take care for a window width/height grater than 0!</remarks>
        </member>
        <member name="M:X11.X11lib.XMapRaised(System.IntPtr,System.IntPtr)">
            <summary> The XMapRaised() function essentially is similar to XMapWindow() in that it maps the window and all of its subwindows that have
            had map requests. However, it also raises the specified window to the top of the stack. For additional information, see XMapWindow().</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to map. <see cref="T:System.IntPtr" /></param>
            <remarks>To activate a shell window (e.g. a XrwTransientShell) send _NET_ACTIVE_WINDOW event to root window.</remarks>
        </member>
        <member name="M:X11.X11lib.XUnmapWindow(System.IntPtr,System.IntPtr)">
            <summary> Unmap the specified window and causes the X server to generate an UnmapNotify event. If the specified window is already unmapped,
            XUnmapWindow () has no effect. Normal exposure processing on formerly obscured windows is performed. Any child window will no longer be visible
            until another map call is made on the parent. In other words, the subwindows are still mapped but are not visible until the parent is mapped.
            Unmapping a window will generate Expose events on windows that were formerly obscured by it. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to unmap. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XRaiseWindow(System.IntPtr,System.IntPtr)">
            <summary>The XRaiseWindow() function raises the specified window to the top of the stack so that no sibling window obscures it.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window to raise.<see cref="T:System.IntPtr" /></param>
            <remarks>Raising a mapped window may generate Expose events for the window and any mapped subwindows that were formerly obscured.</remarks>
        </member>
        <member name="M:X11.X11lib.XCirculateSubwindows(System.IntPtr,System.IntPtr,X11.TInt)">
            <summary>The XRaiseWindow() function circulates children of the specified window in the specified direction.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window who's children are to circulate.<see cref="T:System.IntPtr" /></param>
            <param name="direction">Specifies the direction (up or down) to circulate the child window. It can be passed RaiseLowest (0) or LowerHighest (1).<see cref="T:X11.TInt" /></param>
            <remarks>To activate a shell window (e.g. a XrwTransientShell) send _NET_ACTIVE_WINDOW event to root window.</remarks>
        </member>
        <member name="M:X11.X11lib.XCreateSimpleWindow(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,X11.TUint,X11.TPixel,X11.TPixel)">
            <summary> Create an unmapped subwindow for a specified parent window, returns the window ID of the created window, and causes the
            X server to generate a CreateNotify event.  The created window is placed on top in the stacking order with respect to siblings. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The parent window. <see cref="T:System.IntPtr" /></param>
            <param name="x"> Tthe x coordinate, which is the top-left outside corner of the window's borders and relative to the inside of the parent window's borders. <see cref="T:X11.TInt" /></param>
            <param name="y"> Tthe y coordinate, which is the top-left outside corner of the window's borders and relative to the inside of the parent window's borders. <see cref="T:X11.TInt" /></param>
            <param name="width"> The width, which is the created window's inside dimensions and do not include the created window's borders. <see cref="T:X11.TUint" /></param>
            <param name="height"> The height, which is the created window's inside dimensions and do not include the created window's borders. <see cref="T:X11.TUint" /></param>
            <param name="outsideBorderWidth"> The outside (surrounding) border width of the created window in pixels. <see cref="T:X11.TInt" /></param>
            <param name="border"> The border pixel value of the window. <see cref="T:X11.TPixel" /></param>
            <param name="background"> The background pixel value of the window. <see cref="T:X11.TPixel" /></param>
            <returns> The window ID of the created window on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XChangeWindowAttributes(System.IntPtr,System.IntPtr,X11.XWindowAttributeMask,X11.XSetWindowAttributes@)">
            <summary>Change the window attributes in the XSetWindowAttributes.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The parent window.<see cref="T:System.IntPtr" /></param>
            <param name="valueMask">Specifies which window attributes are defined in the attributes argument. This mask is the bitwise
            inclusive OR of the valid attribute mask bits. If valuemask is zero, the attributes are ignored and are not referenced.
            The values and restrictions are the same as for XCreateWindow().<see cref="T:X11.XWindowAttributeMask" /></param>
            <param name="attributes">Specifies the structure from which the attribute values (as specified by the value mask)
            are to be taken.<see cref="T:X11.XSetWindowAttributes" /></param>
        </member>
        <member name="M:X11.X11lib.XCreateWindow(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,X11.TUint,X11.TInt,X11.XWindowClass,System.IntPtr,X11.XWindowAttributeMask,X11.XSetWindowAttributes@)">
            <summary> Create an unmapped subwindow for a specified parent window, returns the window ID of the created window, and causes the
            X server to generate a CreateNotify event.  The created window is placed on top in the stacking order with respect to siblings. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The parent window. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The x coordinate, which is the top-left outside corner of the window's borders and relative to the inside of the parent window's borders. <see cref="T:X11.TInt" /></param>
            <param name="y"> The y coordinate, which is the top-left outside corner of the window's borders and relative to the inside of the parent window's borders. <see cref="T:X11.TInt" /></param>
            <param name="width"> The width, which is the created window's inside dimensions and do not include the created window's borders. <see cref="T:X11.TUint" /></param>
            <param name="height"> The height, which is the created window's inside dimensions and do not include the created window's borders. <see cref="T:X11.TUint" /></param>
            <param name="outsideBorderWidth"> The outside (surrounding) border width of the created window in pixels. <see cref="T:X11.TInt" /></param>
            <param name="depth"> The window's depth.  A depth of CopyFromParent means the depth is taken from the parent. <see cref="T:X11.TInt" /></param>
            <param name="cls"> The created window's class.  You can pass InputOutput, InputOnly, or CopyFromParent.
            A class of CopyFromParent means the class is taken from the parent. <see cref="T:X11.XWindowClass" /></param>
            <param name="x11visual"> The visual type.  A visual of CopyFromParent means the visual type is taken from the parent. <see cref="T:System.IntPtr" /></param>
            <param name="valueMask"> Specifies which window attributes are defined in the attributes argument.  This mask is the bitwise inclusive OR of the valid
            attribute mask bits. If valuemask is zero, the attributes are ignored and are not referenced. <see cref="T:X11.XWindowAttributeMask" /></param>
            <param name="attributes"> The structure from which the values (as specified by the value mask) are to be taken. The value mask should have the
            appropriate bits set to indicate which attributes have been set in the structure. <see cref="T:X11.XSetWindowAttributes" /></param>
            <returns> The window ID of the created window on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XInternAtom(System.IntPtr,X11.TChar[],System.Boolean)">
            <summary>Return the atom identifier associated with the specified atom_name string.
            If onlyIfExists is False, the atom is created if it does not exist. Therefore, XInternAtom() can return IntPtr.Zero.
            If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent.
            Uppercase and lowercase matter; the strings "thing", "Thing", and "thinG" all designate different atoms.
            The atom will remain defined even after the client's connection closes. It will become undefined only when the last
            connection to the X server closes.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="atomName">The <see cref="T:X11.TChar" />[] name of the atom to return.</param>
            <param name="onlyIfExists">Specifies a <see cref="T:System.Boolean" /> value that indicates whether the atom must be created, if it doesn't exist.</param>
            <returns>A <see cref="T:System.IntPtr" /> to the atom on success, or IntPtr.Zero otherwise.</returns>
            <remarks>Define the atomName including terminating NULL like: X11Utils.StringToSByteArray ("WM_DELETE_WINDOW\0")</remarks>
        </member>
        <member name="M:X11.X11lib.XInternAtom(System.IntPtr,System.String,System.Boolean)">
            <summary>Return the atom identifier associated with the specified atomName string.
            If onlyIfExists is False, the atom is created if it does not exist. Therefore, XInternAtom() can return IntPtr.Zero.
            If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent.
            Uppercase and lowercase matter; the strings "thing", "Thing", and "thinG" all designate different atoms.
            The atom will remain defined even after the client's connection closes. It will become undefined only when the last
            connection to the X server closes.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="atomName">The name of the atom to return.<see cref="T:System.String" /></param>
            <param name="onlyIfExists">Specifies a boolean value that indicates whether the atom must be created, if it doesn't exist.<see cref="T:System.Boolean" /></param>
            <returns>A pointer to the atom on success, or IntPtr.Zero otherwise.<see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XGetAtomName(System.IntPtr,System.IntPtr)">
            <summary> Get the name associated with the specified atom. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="atom"> The atom for the property name to return. <see cref="T:System.IntPtr" /></param>
            <returns> The name associated with the specified atom. <see cref="T:System.IntPtr" /></returns>
            <remarks> To free the resulting string, call XFree(). </remarks>
        </member>
        <member name="M:X11.X11lib.XSetWMProtocols(System.IntPtr,System.IntPtr,System.IntPtr@,X11.TInt)">
            <summary> Replace the WM_PROTOCOLS property on the specified window with the list of atoms specified by the protocols argument.
            If the property does not already exist, XSetWMProtocols() sets the WM_PROTOCOLS property on the specified window to the list of
            atoms specified by the protocols argument. The property is stored with a type of ATOM and a format of 32.
            If it cannot intern the WM_PROTOCOLS atom, XSetWMProtocols() returns a zero status. Otherwise, it returns a nonzero status. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to replace the the WM_PROTOCOLS property. <see cref="T:System.IntPtr" /></param>
            <param name="protocols"> Thelist of protocols as atom pointer. <see cref="T:System.IntPtr" /></param>
            <param name="count"> The number of protocols in the list. <see cref="T:X11.TInt" /></param>
            <returns> Nonzero on success, or zero otherwise. <see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib.XFlush(System.IntPtr)">
            <summary> Flush the output buffer. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XStoreName(System.IntPtr,System.IntPtr,System.SByte[])">
            <summary> Assign the indicated name to the specified window. A window manager can display the window name in some prominent place,
            such as the title bar, to allow users to identify windows easily. Some window managers may display a window's name in the window's
            icon, although they are encouraged to use the window's icon name if one is provided by the application. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11window"> The <see cref="T:System.IntPtr" /> window to set the name for. </param>
            <param name="windowName"> The  <see cref="T:System.SByte" />[] name to set for the window.</param>
        </member>
        <member name="M:X11.X11lib.XStoreName(System.IntPtr,System.IntPtr,System.String)">
            <summary> Assign the indicated name to the specified window. A window manager can display the window name in some prominent place,
            such as the title bar, to allow users to identify windows easily. Some window managers may display a window's name in the window's
            icon, although they are encouraged to use the window's icon name if one is provided by the application. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the name for. <see cref="T:System.IntPtr" /></param>
            <param name="windowName"> The name to set for the window. <see cref="T:System.String" /></param>
        </member>
        <member name="M:X11.X11lib._XAllocClassHint">
            <summary> Allocate and return a pointer to a XClassHint structure.
            Note that the pointer fields in the XClassHint structure are initially set to NULL.
            To free the memory allocated to this structure, use XFree(). </summary>
            <returns>The pointer to a XClassHint structure on success, or <c>null</c> otherwise (insufficient memory).<see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XAllocClassHint(X11.XClassHint@)">
            <summary> Allocate and return a pointer to a XClassHint structure.
            Note that the pointer fields in the XClassHint structure are initially set to NULL.
            To free the memory allocated to this structure, use XFree(). </summary>
            <param name="classHint"> The class hint to get. <see cref="T:X11.XClassHint" /></param>
            <returns> Nonzero on success, or zero otherwise. <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XMalloc(X11.TUint)">
            <summary>Allocate in-memory data. Replaces malloc().</summary>
            <param name="size">The size of the data that is allocate. <see cref="T:X11.TUint" /></param>
            <returns>The pointer to in-memory data on success, or <see cref="F:System.IntPtr.Zero" /> otherwise.</returns>
            <remarks>The standard C library routines on many systems are not protected against signals or other multithreaded uses.
            The following hethod has been defined as an analogy to standard I/O library routine malloc().</remarks>
        </member>
        <member name="M:X11.X11lib.XCalloc(X11.TUint,X11.TUint)">
            <summary>Allocate in-memory data and initializes every element with <c>0</c>. Replaces calloc().</summary>
            <param name="elements">The number of elements to allocate. <see cref="T:X11.TUint" /></param>
            <param name="elementsize">The size of an element to allocate. <see cref="T:X11.TUint" /></param>
            <returns>The pointer to in-memory data on success, or <see cref="F:System.IntPtr.Zero" /> otherwise.</returns>
            <remarks>The standard C library routines on many systems are not protected against signals or other multithreaded uses.
            The following hethod has been defined as an analogy to standard I/O library routine calloc().</remarks>
        </member>
        <member name="M:X11.X11lib.XFree(System.IntPtr)">
            <summary>Free in-memory data that was created by an Xlib function (like XMalloc or XCalloc). Replaces free().</summary>
            <param name="data">The data that is to be freed.<see cref="T:System.IntPtr" /></param>
            <remarks>The standard C library routines on many systems are not protected against signals or other multithreaded uses.
            The following hethod has been defined as an analogy to standard I/O library routine free().</remarks>
        </member>
        <member name="M:X11.X11lib._XGetClassHint(System.IntPtr,System.IntPtr,X11.X11lib._XClassHint@)">
            <summary>Return the class hint of the specified window to the members of the structure.
            If the data returned by the server is in the Latin Portable Character Encoding, then the returned
            strings are in the Host Portable Character Encoding. Otherwise, the result is implementation dependent.
            To free res_name and res_class when finished with the strings, use XFree() on each individually. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to get the class hint for. <see cref="T:System.IntPtr" /></param>
            <param name="classHint"> The class hint to get. <see cref="T:X11.X11lib._XClassHint" /></param>
            <returns> Nonzero on success, or zero otherwise. <see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib.XGetClassHint(System.IntPtr,System.IntPtr,X11.XClassHint@)">
            <summary>Return a XClassHint structure of the specified window to the members of the structure.
            If the data returned by the server is in the Latin Portable Character Encoding, then the returned
            strings are in the Host Portable Character Encoding. Otherwise, the result is implementation dependent.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window to get the class hint for.<see cref="T:System.IntPtr" /></param>
            <param name="classHint">The class hint to get.<see cref="T:X11.XClassHint" /></param>
            <returns>Nonzero on success, or zero otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XSetClassHint(System.IntPtr,System.IntPtr,X11.XClassHint@)">
            <summary> Set the class hint for the specified window.
            If the strings are not in the Host Portable Character Encoding, the result is implementation dependent.  </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the class hint for. <see cref="T:System.IntPtr" /></param>
            <param name="classHints"> The class hint to set. <see cref="T:X11.XClassHint" /></param>
        </member>
        <member name="M:X11.X11lib.XGetTransientForHint(System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary> Get the WM_TRANSIENT_FOR property for the specified window.  </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the WM_TRANSIENT_FOR property for. <see cref="T:System.IntPtr" /></param>
            <param name="x11transientWindow"> The WM_TRANSIENT_FOR property of the specified window. <see cref="T:System.IntPtr" /></param>
            <returns> Nonzero on success, or zero otherwise. <see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib.XSetTransientForHint(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary> Set the WM_TRANSIENT_FOR property for the specified window.  </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to get the WM_TRANSIENT_FOR property for. <see cref="T:System.IntPtr" /></param>
            <param name="x11transientWindow"> The WM_TRANSIENT_FOR property of the specified window. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XGetWindowAttributes(System.IntPtr,System.IntPtr,X11.XWindowAttributes@)">
            <summary>Get the window attributes for the specified window.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11window">The <see cref="T:System.IntPtr" /> window to get the window attributes for.</param>
            <param name="windowAttributes"> The <see cref="T:X11.XWindowAttributes" /> window attributes to get. </param>
            <returns>Nonzero <see cref="T:X11.TInt" /> on success, or zero otherwise.</returns>
        </member>
        <member name="M:X11.X11lib.XGetGeometry(System.IntPtr,System.IntPtr,System.IntPtr@,X11.TInt@,X11.TInt@,X11.TUint@,X11.TUint@,X11.TUint@,X11.TUint@)">
            <summary>Get the root window and the current geometry of the drawable.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable to get the geometry for. It is legal to pass an 'InputOnly' window.</param>
            <param name="x11windowReturn">The root <see cref="T:System.IntPtr" /> window.</param>
            <param name="xReturn">The <see cref="T:X11.TInt" /> x coordinate of the indicated drawable.</param>
            <param name="yReturn">The <see cref="T:X11.TInt" /> y coordinate of the indicated drawable.</param>
            <param name="widthReturn">The <see cref="T:X11.TUint" /> width of the indicated drawable. This dimension specifies the inside size, not including the border.</param>
            <param name="heightReturn">The <see cref="T:X11.TUint" /> height of the indicated drawable. This dimension specifies the inside size, not including the border.</param>
            <param name="borderWidthReturn">The <see cref="T:X11.TUint" /> border width of the indicated drawable. If the indicated drawable is a pixmap, it returns zero.</param>
            <param name="depthReturn">The <see cref="T:X11.TUint" /> color depth (bits per pixel) of the indicated drawable.</param>
            <returns>returns <see cref="T:X11.TInt" /> nonzero on success, or zero otherwise.</returns>
            <remarks>Can generate a BadDrawable error.</remarks>
        </member>
        <member name="M:X11.X11lib.XTranslateCoordinates(System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TInt@,X11.TInt@,System.IntPtr@)">
            <summary>Takes the srcX and srcX coordinates relative to the source window's origin and returns these coordinates to destX and destY
            relative to the destination window's origin on success, or destX == 0 and destY == 0 otherwise.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11srcWindow">The <see cref="T:System.IntPtr" /> window the srcX and srcX coordinates are relative to the origin. Typically any application's window.</param>
            <param name="x11destWindow">The <see cref="T:System.IntPtr" /> window the destX and destY coordinates are relative to the origin. Typically the screen's root window.</param>
            <param name="srcX">The <see cref="T:X11.TInt" /> x coordinate to translate within the source window.</param>
            <param name="srcY">The <see cref="T:X11.TInt" /> y coordinate to translate within the source window.</param>
            <param name="destX">The translated <see cref="T:X11.TInt" /> x coordinate within the destination window.</param>
            <param name="destY">The translated <see cref="T:X11.TInt" /> x coordinate within the destination window.</param>
            <param name="childWindow">The <see cref="T:System.IntPtr" /> child window, if the coordinates are contained in a mapped child of the destination window.</param>
            <returns>Returns <see cref="T:X11.TInt" /> nonzero on success, or zero otherwise.</returns>
            <remarks>Can generate a 'BadWindow' error.</remarks>
        </member>
        <member name="M:X11.X11lib.XGetInputFocus(System.IntPtr,System.IntPtr@,X11.XRevertTo@)">
            <summary>Return the window, that owns the focus, and the current focus state.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11window">Returns the <see cref="T:System.IntPtr" /> focus window or 'PointerRoot', that is 1L, or 'None', that 0L.</param>
            <param name="revertTo">Returns the <see cref="T:X11.XRevertTo" /> current focus state (RevertToParent, RevertToPointerRoot, or RevertToNone).</param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:X11.X11lib.XSetInputFocus(System.IntPtr,System.IntPtr,X11.XRevertTo,X11.TTime)-->
        <member name="M:X11.X11lib.XGrabPointer(System.IntPtr,System.IntPtr,X11.TBoolean,X11.TInt,X11.TInt,X11.TInt,System.IntPtr,System.IntPtr,X11.TTime)">
            <summary>Actively grab control of the pointer.
            Further pointer events are reported only to the grabbing client. XGrabPointer() overrides any active pointer grab by this client.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11window">The <see cref="T:System.IntPtr" /> window that shold grab the pointer.</param>
            <param name="ownerEvents">Specify <see cref="T:X11.TBoolean" /> whether the pointer events are to be reported as usual or
            reported with respect to the grab window if selected by the event mask.</param>
            <param name="eventMask">Specify <see cref="T:X11.TInt" /> which pointer events are reported to the client.
            The mask is the bitwise inclusive OR of the valid pointer event mask bits.</param>
            <param name="pointerMode">Specify <see cref="T:X11.TInt" /> further processing of pointer events. You can pass GrabModeSync or GrabModeAsync.</param>
            <param name="keyboardMode">Specify <see cref="T:X11.TInt" /> further processing of keyboard events. You can pass GrabModeSync or GrabModeAsync.</param>
            <param name="confineTo">Specify the <see cref="T:System.IntPtr" /> window to confine the pointer in or None.</param>
            <param name="cursor">Specify the <see cref="T:System.IntPtr" /> cursor that is to be displayed during the grab or None.</param>
            <param name="time">Specify the <see cref="T:X11.TTime" /> time. You can pass either a timestamp or CurrentTime.</param>
            <returns>Returns <see cref="T:X11.TInt" /><c>GrabSuccess</c> if the grab was successful.</returns>
            <remarks>* If ownerEvents is <c>false</c>, all generated pointer events are reported with respect to x11window and are reported
            only if selected by eventMask. If ownerEvents is <c>true</c> and if a generated pointer event would normally be reported to
            this client, it is reported as usual. Otherwise, the event is reported with respect to the x11window and is reported only if
            selected by eventMask. For either value of ownerEvents, unreported events are discarded.
            * If the pointerMode is GrabModeAsync, pointer event processing continues as usual. If the pointer is currently frozen by this
            client, the processing of events for the pointer is resumed. If the pointerMode is GrabModeSync, the state of the pointer, as
            seen by client applications, appears to freeze, and the X server generates no further pointer events until the grabbing client
            calls XAllowEvents() or until the pointer grab is released. Actual pointer changes are not lost while the pointer is frozen;
            they are simply queued in the server for later processing.
            * If the keyboardMode is GrabModeAsync, keyboard event processing is unaffected by activation of the grab. If the keyboardMode
            is GrabModeSync, the state of the keyboard, as seen by client applications, appears to freeze, and the X server generates no
            further keyboard events until the grabbing client calls XAllowEvents() or until the pointer grab is released. Actual keyboard
            changes are not lost while the pointer is frozen; they are simply queued in the server for later processing.
            * If a cursor is specified, it is displayed regardless of what window the pointer is in. If None is specified, the normal cursor
            for that window is displayed when the pointer is in x11window or one of its subwindows; otherwise, the cursor for x11window
            is displayed.
            * If a confineTo window is specified, the pointer is restricted to stay contained in that window. The confineTo window need have
            no relationship to the x11window. If the pointer is not initially in the confineTo window, it is warped automatically to the
            closest edge just before the grab activates and enter/leave events are generated as usual. If the confineTo window is
            subsequently reconfigured, the pointer is warped automatically, as necessary, to keep it contained in the window.
            * The time argument allows you to avoid certain circumstances that come up if applications take a long time to respond or if
            there are long network delays. Consider a situation where you have two applications, both of which normally grab the pointer
            when clicked on. If both applications specify the timestamp from the event, the second application may wake up faster and
            successfully grab the pointer before the first application. The first application then will get an indication that the other
            application grabbed the pointer before its request was processed.</remarks>
        </member>
        <member name="M:X11.X11lib.XUngrabPointer(System.IntPtr,X11.TTime)">
            <summary>Release the pointer and any queued events if this client has been actively grabbed the pointer from XGrabPointer(),
            XGrabButton(), or from a normal button press.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="time">Specify the <see cref="T:X11.TTime" /> time. You can pass either a timestamp or CurrentTime.</param>
            <remarks>XUngrabPointer() does not release the pointer if the specified time is earlier than the last-pointer-grab time or
            is later than the current X server time. It also generates EnterNotify and LeaveNotify events.
            The X server performs an UngrabPointer request automatically if the event window or confineTo window for an active pointer
            grab becomes not viewable or if window reconfiguration causes the confineTo window to lie completely outside the boundaries
            of the root window.</remarks>
        </member>
        <member name="M:X11.X11lib.XtGrabKeyboard(System.IntPtr,System.IntPtr,X11.TBoolean,X11.TInt,X11.TInt,X11.TTime)">
            <summary>Actively grab control of the keyboard and generates FocusIn and FocusOut events.
            Further key events are reported only to the grabbing client.
            XGrabKeyboard() overrides any active keyboard grab by this client.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window that shold grab the keyboard.<see cref="T:System.IntPtr" /></param>
            <param name="ownerEvents">Specifies a Boolean value that indicates whether the keyboard events are to be reported as usual.
            If ownerEvents is false, all generated key events are reported with respect to x11window. If ownerEvents is true and if a generated key
            event would normally be reported to this client, it is reported normally; otherwise, the event is reported with respect to the x11window.
            Both KeyPress and KeyRelease events are always reported, independent of any event selection made by the client. <see cref="T:X11.TBoolean" /></param>
            <param name="pointerMode">Specifies further processing of pointer events. GrabModeSync or GrabModeAsync can be passed.
            If pointerMode is GrabModeAsync, pointer event processing is unaffected by activation of the grab. If pointerMode is GrabModeSync,
            the state of the pointer (as seen by client applications) appears to freeze, and the X server generates no further pointer events
            until the grabbing client issues a releasing XAllowEvents() call or until the keyboard grab is released. Actual pointer changes
            are not lost while the pointer is frozen; they are simply queued in the server for later processing.<see cref="T:X11.TInt" /></param>
            <param name="keyboardMode">Specifies further processing of keyboard events. You can pass GrabModeSync or GrabModeAsync.
            If the keyboardMode argument is GrabModeAsync, keyboard event processing continues as usual. If the keyboard is currently frozen by this client,
            then processing of keyboard events is resumed. If the keyboardMode argument is GrabModeSync, the state of the keyboard(as seen by client
            applications) appears to freeze, and the X server generates no further keyboard events until the grabbing client issues a releasing
            XAllowEvents() call or until the keyboard grab is released. Actual keyboard changes are not lost while the keyboard is frozen; they are
            simply queued in the server for later processing. <see cref="T:X11.TInt" /></param>
            <param name="time">Specifies the <see cref="T:X11.TTime" /> time. You can pass either a timestamp or CurrentTime.</param>
            <returns>???<see cref="T:X11.TInt" /></returns>
            <remarks>If the keyboard is actively grabbed by some other client, XGrabKeyboard() fails and returns AlreadyGrabbed.
            If x11window is not viewable, it fails and returns GrabNotViewable.
            If the keyboard is frozen by an active grab of another client, it fails and returns GrabFrozen.
            If the specified time is earlier than the last-keyboard-grab time or later than the current X server time, it fails and returns GrabInvalidTime.
            Otherwise, the last-keyboard-grab time is set to the specified time (CurrentTime is replaced by the current X server time).</remarks>
        </member>
        <member name="M:X11.X11lib.XtGrabKey(System.IntPtr,X11.TInt,X11.XStateMask,System.IntPtr,X11.TBoolean,X11.TInt,X11.TInt)">
            <summary>Establish a passive grab (generates NO FocusIn and FocusOut events) on the keyboard.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="keycode">Specifies the KeyCode of the key to grab or AnyKey. AnyKey = (TInt)0.<see cref="T:X11.TInt" /></param>
            <param name="modifiers">Specifies the set of keymasks or AnyModifier. The mask is the bitwise inclusive OR of the valid keymask bits. <see cref="T:X11.XStateMask" /></param>
            <param name="x11window">The window that shold grab the key.<see cref="T:System.IntPtr" /></param>
            <param name="ownerEvents">Specifies a Boolean value that indicates whether the keyboard events are to be reported as usual.<see cref="T:X11.TBoolean" /></param>
            <param name="pointerMode">Specifies further processing of pointer events. GrabModeSync or GrabModeAsync can be passed.<see cref="T:X11.TInt" /></param>
            <param name="keyboardMode">Specifies further processing of keyboard events. You can pass GrabModeSync or GrabModeAsync.<see cref="T:X11.TInt" /></param>
            <remarks>The KeyPress event is reported if all of the following conditions are true:
            - The keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed
            when the specified modifier keys are logically down, and no other modifier keys are logically down.
            - Either the x11window is an ancestor of (or is) the focus window,
            or the x11window is a descendant of the focus window and contains the pointer.
            - A passive grab on the same key combination does not exist on any ancestor of grab_window.
            It seems to mean: The grab window can not be a child of (or a) popup shell (override shell).</remarks>
        </member>
        <member name="M:X11.X11lib.XQueryKeymap(System.IntPtr,X11.TUchar[])">
            <summary>Return a bit vector for the logical state of the keyboard, where each bit set to 1 indicates that the corresponding key is currently pressed down.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="keysReturn">Returns an <see cref="T:X11.TChar" />[32] array of bytes that identifies which keys are pressed down. Each bit represents one key of the keyboard.</param>
            <remarks>Note that the logical state of a device (as seen by client applications) may lag the physical state if device event processing is frozen.</remarks>
        </member>
        <member name="M:X11.X11lib.XKeyMapGetKey(X11.TUchar[],System.Byte)">
            <summary>Return whether the indicated key is reperesented by the appropriate bit within the indicated map.</summary>
            <param name="keyMap">The <see cref="T:X11.TUchar" />[32] array of bytes that identify which keys are pressed down. Each bit represents one key of the keyboard.</param>
            <param name="keyCode">The <see cref="T:System.UInt32" /> key code of the key to check representation within the map.</param>
            <returns>Returns <see cref="T:System.Boolean" /><c>true</c> if indicated key is reperesented by the indicated map, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:X11.X11lib.XKeyMapSetKey(X11.TUchar[],System.Byte)">
            <summary>Set the appropriate bit within the indicated map for the indicated key.</summary>
            <param name="keyMap">The <see cref="T:X11.TUchar" />[32] array of bytes that identify which keys are pressed down. Each bit represents one key of the keyboard.</param>
            <param name="keyCode">The <see cref="T:System.UInt32" /> key code of the key to set representation within the map.</param>
        </member>
        <member name="M:X11.X11lib.XKeyMapClearKey(X11.TUchar[],System.Byte)">
            <summary>Clear the appropriate bit within the indicated map for the indicated key.</summary>
            <param name="keyMap">The <see cref="T:X11.TUchar" />[32] array of bytes that identify which keys are pressed down. Each bit represents one key of the keyboard.</param>
            <param name="keyCode">The <see cref="T:System.UInt32" /> key code of the key to clear representation within the map.</param>
        </member>
        <member name="M:X11.X11lib.XKeyMapState(X11.TUchar[],X11.TUchar[],X11.TUchar@,X11.TUchar@)">
            <summary>Return the keymap state for the indicated key map. The key map represets key code(s) of the currently pressed key(s).</summary>
            <param name="keyMap">The <see cref="T:X11.TUchar" />[32] array of bytes that identify which key(s) are pressed down. Each bit represents one key of the keyboard.</param>
            <param name="modKeyMap">The <see cref="T:X11.TUchar" />[32] array of bytes that identify the modifier keys. Each bit represents one key of the keyboard.</param>
            <param name="stdKeyCode">The <see cref="T:X11.TUchar" /> non-modifier key code of the key(s) are pressed down.</param>
            <param name="modifierKeyCode">The <see cref="T:X11.TUchar" /> modifier key code of the key(s) are pressed down.</param>
        </member>
        <member name="M:X11.X11lib.XGetModifierMapping(System.IntPtr)">
            <summary>Returns a pointer to a newly created native XModifierKeymap structure that contains the keys being used as
            modifiers. If only zero values appear in the set for any modifier, that modifier is disabled.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <returns>The <see cref="T:System.IntPtr" /> pointer to a newly created native XModifierKeymap structure.</returns>
            <remarks>The structure should be freed after use by calling <see cref="M:X11.X11lib.XFreeModifiermap(System.IntPtr)" />.</remarks>
        </member>
        <member name="M:X11.X11lib.XFreeModifiermap(System.IntPtr)">
            <summary>Free the specified native modifierKeyMap structure.</summary>
            <param name="modifierKeyMap">The <see cref="T:System.IntPtr" /> native modifierKeyMap structure to free.</param>
        </member>
        <member name="M:X11.X11lib.XDisplayKeycodes(System.IntPtr,X11.TInt@,X11.TInt@)">
            <summary>Return the minimum number of KeyCodes and maximum number of KeyCodes supported by the indicated display.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="minKeyCodesReturn">The <see cref="T:X11.TInt" /> supported of key code index, that is never less than 8.</param>
            <param name="maxKeyCodesReturn">The <see cref="T:X11.TInt" /> supported of key code index, that is never greater than 255.</param>
            <remarks>Not all KeyCodes in this range are required to have corresponding keys.</remarks>
        </member>
        <member name="M:X11.X11lib.XGetKeyboardMapping(System.IntPtr,X11.TUchar,X11.TInt,X11.TInt@)">
            <summary>Return the symbols for the indicated number of key codes, starting with indicated firstKeyCode.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="firstKeyCode">The <see cref="T:X11.TUchar" /> number of key codes to determine. Must be greater than or equal to
            the minimum supported key code value. See <see cref="M:X11.X11lib.XDisplayKeycodes(System.IntPtr,X11.TInt@,X11.TInt@)" /> for details.</param>
            <param name="numKeyCodes">The <see cref="T:X11.TInt" /> first key code to determine. Must be less than or equal to the difference
            between minimum and maximum supported key code value. See <see cref="M:X11.X11lib.XDisplayKeycodes(System.IntPtr,X11.TInt@,X11.TInt@)" /> for details.</param>
            <param name="keysymsPerKeycodeReturn">The <see cref="T:X11.TInt" /> number of key syms per key code.</param>
            <returns>The <see cref="T:System.IntPtr" /> pointer to a newly created native key symbol array.</returns>
            <remarks>The array should be freed after use by calling <see cref="M:X11.X11lib.XFree(System.IntPtr)" />.</remarks>
        </member>
        <member name="M:X11.X11lib.XKeycodeToKeysym(System.IntPtr,X11.TUchar,X11.TInt)">
            <summary>Return the key symbol, defined for the indicated key code and the element of the key code vector from internal Xlib tables.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="keycode">The <see cref="T:X11.TInt" /> key code to get the key symbol for.</param>
            <param name="index">The <see cref="T:X11.TInt" /> element of the key code vector to get the key symbol for.</param>
            <returns>The <see cref="T:X11.TUint" /> key symbol for the indicated key code and the element of the key code vector on success,
            or <c>NoSymbol</c> (0) otherwise.</returns>
            <remarks>Warning: <see cref="M:X11.X11lib.XKeycodeToKeysym(System.IntPtr,X11.TUchar,X11.TInt)" /> is deprecated. Use <c>XkbKeycodeToKeysym</c> instead.</remarks>
        </member>
        <member name="M:X11.X11lib.XStringListToTextProperty(X11.TChar[]@,X11.TInt,X11.XTextProperty@)">
            <summary> Set the specified text property to be of type STRING (format 8) with a value representing the concatenation of the specified list of
            null-separated character strings. An extra null byte (which is not included in the nitems member) is stored at the end of the val field of
            text property. The strings are assumed (without verification) to be in the STRING encoding. To free the storage for the val field, use XFree(). </summary>
            <param name="list"> The <see cref="T:X11.TChar" />[] of null-terminated character strings to set into the text property.</param>
            <param name="count"> The number of strings to set to the text property. A <see cref="T:X11.TInt" /></param>
            <param name="textProperty"> The text property to set. <see cref="T:X11.XTextProperty" /></param>
            <returns> Nonzero on success, or zero otherwise. <see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib._XGetWMName(System.IntPtr,System.IntPtr,X11.XTextProperty@)">
            <summary>Get the window manager name of a window (in other words the application window title).
            Convenience function calls XGetTextProperty() to get the WM_NAME property.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window to set the window manager name of a window for.<see cref="T:System.IntPtr" /></param>
            <param name="textProperty">The text property holding the window manager name of a window to set.<see cref="T:X11.XTextProperty" /></param>
            <returns>It returns a nonzero status on success, or it returns a zero status otherwise.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.X11lib.XGetWMName(System.IntPtr,System.IntPtr)">
            <summary> Get the window manager name of a window (in other words the application window title). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the window manager name of a window for. <see cref="T:System.IntPtr" /></param>
            <returns> The window manager name of the indicated window to get. <see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.X11lib._XSetWMName(System.IntPtr,System.IntPtr,X11.XTextProperty@)">
            <summary> Set the window manager name of a window (in other words the application window title).
            Convenience function calls XSetTextProperty() to set the WM_NAME property. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the window manager name of a window for. <see cref="T:System.IntPtr" /></param>
            <param name="textProperty"> The text property holding the window manager name of a window to set. <see cref="T:X11.XTextProperty" /></param>
        </member>
        <member name="M:X11.X11lib.XSetWMName(System.IntPtr,System.IntPtr,System.String)">
            <summary> Set the window manager name of a window (in other words the application window title). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the window manager name of a window for. <see cref="T:System.IntPtr" /></param>
            <param name="windowTitle"> The indow manager name of a window to set. <see cref="T:System.String" /></param>
        </member>
        <member name="M:X11.X11lib._XSetWMIconName(System.IntPtr,System.IntPtr,X11.XTextProperty@)">
            <summary> Set the window manager name of a window's icon (in other words the application icon title).
            Convenience function calls XSetTextProperty() to set the WM_ICON_NAME property. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the window manager name of a window's icon for. <see cref="T:System.IntPtr" /></param>
            <param name="textProperty"> The text property holding the window manager name of a window's icon to set. <see cref="T:X11.XTextProperty" /></param>
        </member>
        <member name="M:X11.X11lib.XSetWMIconName(System.IntPtr,System.IntPtr,System.String)">
            <summary> Set the window manager name of a window's icon (in other words the application icon title). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the window manager name of a window's icon for. <see cref="T:System.IntPtr" /></param>
            <param name="windowIconTitle"> The indow manager name of a window's icon to set. <see cref="T:System.String" /></param>
        </member>
        <member name="M:X11.X11lib._XAllocWMHints">
            <summary> Allocate and return a pointer to a XWMHints structure. Note that all fields in the XWMHints structure are initially set to zero.
            If insufficient memory is available, XAllocWMHints() returns <c>null</c>. To free the memory allocated to this structure, use XFree(). </summary>
            <returns> The pointer to a XWMHints structure on success, or <c>null</c> otherwise. <see cref="T:X11.XWMHints" /></returns>
            <remarks> The (unmanaged) structure must be freed after usage. </remarks>
        </member>
        <member name="M:X11.X11lib.XAllocWMHints(X11.XWMHints@)">
            <summary> Allocate and return a pointer to a XWMHints structure. Note that all fields in the XWMHints structure are initially set to zero.
            If insufficient memory is available, XAllocWMHints() returns <c>null</c>. To free the memory allocated to this structure, use XFree(). </summary>
            <param name="wmHints"> The managed <see cref="T:X11.XWMHints" /> structure ready to use with MONO, filled with the values from allocated XWMHints structure. </param>
            <returns> The <see cref="T:System.IntPtr" /> to native memory containing the allocated  XWMHints structure.
            Must be used to free the native memory with XFree(). </returns>
        </member>
        <member name="M:X11.X11lib._XGetWMHints(System.IntPtr,System.IntPtr)">
            <summary> Read the window manager hints and return NULL if no WM_HINTS property was set on the window or return a pointer to a XWMHints
            structure if it succeeds. When finished with the data, free the space used for it by calling XFree(). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to get the window manager hints for. <see cref="T:System.IntPtr" /></param>
            <returns> The pointer to a XWMHints structure on success, or NULL if no WM_HINTS property was set on the window. <see cref="T:X11.XWMHints" /></returns>
        </member>
        <member name="M:X11.X11lib.XGetWMHints(System.IntPtr,System.IntPtr,X11.XWMHints@)">
            <summary> Read the window manager hints and return NULL if no WM_HINTS property was set on the window or return a pointer to a XWMHints
            structure if it succeeds. When finished with the data, free the space used for it by calling XFree(). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to get the window manager hints for. <see cref="T:System.IntPtr" /></param>
            <param name="wmHints"> The managed <see cref="T:X11.XWMHints" /> structure ready to use with MONO, filled with the values from read XWMHints structure. </param>
            <returns> The <see cref="T:System.IntPtr" /> to native memory containing the allocated  XWMHints structure.
            Must be used to free the native memory with XFree(). </returns>
        </member>
        <member name="M:X11.X11lib.XSetWMHints(System.IntPtr,System.IntPtr,X11.XWMHints@)">
            <summary> Set the window manager hints that include icon information and location, the initial state of the window,
            and whether the application relies on the window manager to get keyboard input. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the window manager hints for. <see cref="T:System.IntPtr" /></param>
            <param name="wmHints"> The pointer to a XWMHints structure contining the values to apply. <see cref="T:X11.XWMHints" /></param>
        </member>
        <member name="M:X11.X11lib.XSync(System.IntPtr,X11.TBoolean)">
            <summary> Flush the output buffer and then waits until all requests have been received and processed by the X server. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="discard"> The boolean value that indicates whether XSync() discards all events on the event queue. <see cref="T:X11.TBoolean" /></param>
            <remarks>Use 'discard' set to (X11.TBoolean)1 with maximum care!!! The default is 'discard' set to (X11.TBoolean)0. Any errors
            generated must be handled by the error handler. For each protocol error received by Xlib.XSync() calls the client application's
            error handling routine (see "Using the Default Error Handlers").
            Any events generated by the server are enqueued into the library's event queue. </remarks>
        </member>
        <member name="M:X11.X11lib.XSelectInput(System.IntPtr,System.IntPtr,X11.TLong)">
            <summary> Request that the X server report the events associated with the specified event mask. Initially, X will not report any of these events. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window whose events you are interested in. <see cref="T:System.IntPtr" /></param>
            <param name="eventMask"> Specifies the event mask. <see cref="T:X11.EventMask" /></param>
        </member>
        <member name="M:X11.X11lib.XQueryTree(System.IntPtr,System.IntPtr,System.IntPtr@,System.IntPtr@,System.IntPtr@,X11.TUint@)">
            <summary> Query window tree information. The XQueryTree function returns the root ID, the parent window ID, a pointer to the list of child
            windows (NULL when there are no children), and the number of children in the list for the specified window.
            The children are listed in current stacking order, from bottom-most (first) to top-most (last).
            To free a non-NULL children list when it is no longer needed, use XFree. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11window"> The <see cref="T:System.IntPtr" /> of the window whose list of children, root, parent, and number of children you want to obtain.</param>
            <param name="x11windowRootReturn"> Returns the <see cref="T:System.IntPtr" /> root window of the indicated window.</param>
            <param name="x11windowParentReturn"> Returns the <see cref="T:System.IntPtr" /> parent window of the indicated window.</param>
            <param name="x11windowChildrenReturn"> Returns the <see cref="T:System.IntPtr" />[] of children of the indicated window.</param>
            <param name="numChildrenReturn"> Returns the <see cref="T:X11.TUint" /> number of children of the indicated window.</param>
            <returns> XQueryTree returns <c>0</c> if it fails and <c>!0</c> if it succeeds. <see cref="T:X11.TInt" /></returns>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:X11.X11lib.XQueryTree(System.IntPtr,System.IntPtr)-->
        <member name="M:X11.X11lib.XPending(System.IntPtr)">
            <summary>Return the number of events that have been received from the X server but have not been removed from the event queue.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <remarks>XPending() is identical to XEventsQueued() with the mode QueuedAfterFlush specified.</remarks>
        </member>
        <member name="M:X11.X11lib.XQLength(System.IntPtr)">
            <summary>Return the number of events that have been received from the X server but have not been removed from the event queue.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <remarks>XPending() is identical to XEventsQueued() with the mode QueuedAlready specified.</remarks>
        </member>
        <member name="M:X11.X11lib.XNextEvent(System.IntPtr,X11.XEvent@)">
            <summary> Copies the first event from the event queue into the specified XEvent structure and then removes it from the queue.
            If the event queue is empty, XNextEvent() flushes the output buffer and blocks until an event is received.  </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11event"> Returns the next event in the queue. <see cref="T:X11.XEvent" /></param>
        </member>
        <member name="M:X11.X11lib.XWindowEvent(System.IntPtr,System.IntPtr,X11.TLong,X11.XEvent@)">
            <summary> Search the event queue for an event that matches both the specified window and event mask. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window, that specifies the widget for whicht the next event is to obtain. <see cref="T:System.IntPtr" /></param>
            <param name="eventMask"> The the event mask, specifying the events to obtain. <see cref="T:X11.EventMask" /></param>
            <param name="x11eventReturn"> Returns the matched <see cref="T:X11.XEvent" /> event's associated structure.</param>
            <remarks> If XWindowEvent() finds a match, it removes that event from the queue and copies it into the specified XEvent structure.
            The other events stored in the queue are not discarded. If a matching event is not in the queue, XWindowEvent() flushes the output
            buffer and blocks until one is received. </remarks>
        </member>
        <member name="M:X11.X11lib.XCheckMaskEvent(System.IntPtr,X11.TLong,X11.XEvent@)">
            <summary> Search the event queue. The first event that matches the specified mask will be removed and copied into the specified
            eventReturn structure. This function never blocks and it returns a Bool indicating if the event was returned. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="eventMask"> The the event mask, specifying the events to observe. <see cref="T:X11.EventMask" /></param>
            <param name="x11eventReturn"> Returns the matched event's associated structure. <see cref="T:System.IntPtr" /></param>
            <returns> Returns <c>true</c> if an event was removed from the event queue and copied into the specified x11eventReturn structure,
            or <c>false</c> otherwise. <see cref="T:X11.TBoolean" /></returns>
        </member>
        <member name="M:X11.X11lib.XCheckWindowEvent(System.IntPtr,System.IntPtr,X11.TLong,X11.XEvent@)">
            <summary> Search the event queue and then the events available on the server connection for the first event that matches the specified
            window and event mask. This function never blocks and it returns a Bool indicating if the event was returned. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window, that specifies the widget that wants to have the event checked.<see cref="T:System.IntPtr" /></param>
            <param name="eventMask"> The the event mask, specifying the events to observe. <see cref="T:X11.EventMask" /></param>
            <param name="x11eventReturn"> Returns the matched event's associated structure. <see cref="T:System.IntPtr" /></param>
            <returns>  If it finds a match, XCheckWindowEvent() removes that event, copies it into the specified XEvent structure, and returns True.
            The other events stored in the queue are not discarded. If the event you requested is not available, XCheckWindowEvent() returns False ,
            and the output buffer will have been flushed. <see cref="T:X11.TBoolean" /></returns>
        </member>
        <member name="M:X11.X11lib.XCheckIfEvent(System.IntPtr,X11.XEvent@,System.IntPtr,System.IntPtr)">
            <summary> Search the event queue and then any events available on the server connection for the first event that matches the
            specified predicate procedure. If it finds a match, XCheckIfEvent() removes the event from the queue and copies it into
            the client-supplied XEvent structure. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11eventReturn"> Returns the matched event's associated structure. <see cref="T:System.IntPtr" /></param>
            <param name="predProc"> Specify the punction <see cref="T:System.IntPtr" /> to the procedure that is to be called to determine if
            the next event in the queue matches what you want. </param>
            <param name="data"> Specifies the user-supplied <see cref="T:System.IntPtr" /> argument that will be passed to the predicate procedure.</param>
            <returns>Returns <see cref="T:X11.TBoolean" /><c>true</c> on success, or <c>false</c> otherwise.</returns>
            <remarks> If the predicate procedure finds a match, this event is removed from the queue. If the predicate procedure finds
            no match, the output buffer will have been flushed. All earlier events stored in the queue are NOT discarded.</remarks>
        </member>
        <member name="M:X11.X11lib.XCheckTypedWindowEvent(System.IntPtr,System.IntPtr,X11.XEventName,X11.XEvent@)">
            <summary>Search the event queue and then any events available on the server connection for the first event that matches the
            specified type and window. If it finds a match, XCheckTypedWindowEvent() removes the event from the queue and copies it into
            the client-supplied XEvent structure. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> Specify the window, to search an event for. <see cref="T:System.IntPtr" /></param>
            <param name="eventType"> Specify the event type to search for. <see cref="T:X11.XEventName" /></param>
            <param name="x11eventReturn"> Returns the matched event's associated structure. <see cref="T:System.IntPtr" /></param>
            <returns>Returns <see cref="T:X11.TBoolean" /><c>true</c> on success, or <c>false</c> otherwise.</returns>
            <remarks> If XCheckTypedWindowEvent() finds a match, this event is removed from the queue. If XCheckTypedWindowEvent() finds
            no match, the output buffer will have been flushed. All earlier events stored in the queue are NOT discarded.</remarks>
        </member>
        <member name="M:X11.X11lib.XFilterEvent(X11.XEvent@,System.IntPtr)">
            <summary>Filter X events for an input method.</summary>
            <param name="x11event">Specifies the <see cref="T:X11.XEvent" /> event to filter.</param>
            <param name="x11window">Specifies the <see cref="T:System.IntPtr" /> window for which the filter is to be applied. If the window argument
            is None, method applies the filter to the window specified in the <see cref="T:X11.XEvent" /> structure.</param>
            <returns>Returns <see cref="T:X11.TBoolean" /><c>true</c> if some input method has filtered the event and the client should discard
            the event, or <c>false</c> otherwise and  the client should continue processing the event. If a keyboard grab has occurred in
            the client and <c>true</c> is returned (event has been filtered), the client should ungrab the keyboard.</returns>
            <remarks>The window argument is provided so that layers above Xlib, that do event redirection, can indicate to which window
            an event has been redirected.</remarks>
        </member>
        <member name="M:X11.X11lib.XPeekEvent(System.IntPtr,X11.XEvent@)">
            <summary> Return the first event from the event queue, but do not remove the event from the queue.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11eventReturn"> Returns the matched <see cref="T:X11.XEvent" /> event's associated structure.</param>
            <remarks> If the queue is empty, XPeekEvent() flushes the output buffer and blocks until an event is received.
            It then copies the event into the client-supplied XEvent structure without removing it from the event queue. </remarks>
        </member>
        <member name="M:X11.X11lib.XSendEvent(System.IntPtr,System.IntPtr,X11.TBoolean,X11.TLong,X11.XEvent@)">
            <summary>Identify the destination window, determine which clients should receive the specified event,
            ignore any active grabs and add the specified event to the output buffer. </summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11window"> The <see cref="T:System.IntPtr" /> "destination window" the event is to be sent to,
            or "PointerWindow" (the window currently containing the mouse pointer),
            or "InputFocus" (the window that currently onwns the input focus).</param>
            <param name="propagate"> Determine which clients should receive the specified event.
            * True or false with EMPTY eventMask, the event is sent to the client that created the "destination window".
            	 If that client no longer exists, no event is sent. <see cref="T:X11.TBoolean" /></param>
            <param name="eventMask"> The event mask, that must match any of the event types defined for the "destination window".
            * True with ANY eventMask, the event is sent to every client selecting on "destination window"
            	 any of the event types in the eventMask argument.
            * False with ANY eventMask and NO clients have selected the event, that is sent, on "destination window"
            	 the "destination window" is replaced with the closest ancestor of "destination window". </param>
            <param name="eventSend"> The event that is to be sent (to be added to the output buffer). <see cref="T:X11.XEvent" /></param>
            <returns> Nonzero on success, or zero otherwise (if the conversion to wire protocol format failed). <see cref="T:X11.TInt" /></returns>
            <remarks> MUST NOT BE CALLED ON A DIFFERENT THREAD! </remarks>
        </member>
        <member name="M:X11.X11lib.XPutBackEvent(System.IntPtr,X11.XEvent@)">
            <summary>Pushes an event back onto the head of the display's event queue by copying the event into the queue. This can be useful
            for any event that should be processed later. There is no limit to the number calls to push back an event.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11event"> The <see cref="T:X11.XEvent" /> event to push back onto the head of the display's event queue.</param>
        </member>
        <member name="M:X11.X11lib.XGetEventData(System.IntPtr,X11.XGenericEventCookie@)">
            <summary>Retrieve the extra data for those <see cref="T:X11.XGenericEvent" />, that require additional memory to store information (cookie).
            The <see cref="T:X11.XGenericEventCookie" />'s data pointer is undefined until <see cref="M:X11.X11lib.XGetEventData(System.IntPtr,X11.XGenericEventCookie@)" /> is called.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11event">The <see cref="T:X11.XGenericEventCookie" /> event to retrieve the extra data for.</param>
            <returns>Returns <see cref="T:X11.TBoolean" /><c>true</c> if the cookie's data pointer points to the memory containing the event information,
            or <c>false</c> if the cookie is invalid or the event is not an event handled by cookie handlers or om multiple calls for the same event cookie.</returns>
            <remarks>No round-trip to the server is required. A client must call <see cref="M:X11.X11lib.XFreeEventData(System.IntPtr,X11.XGenericEventCookie@)" /> to free this memory.</remarks>
        </member>
        <member name="M:X11.X11lib.XFreeEventData(System.IntPtr,X11.XGenericEventCookie@)">
            <summary>Free the data associated with a <see cref="T:X11.XGenericEventCookie" />'s data pointer (cookie).</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11event">The <see cref="T:X11.XGenericEventCookie" /> event to free the extra data for.</param>
            <remarks>A client must call <see cref="M:X11.X11lib.XFreeEventData(System.IntPtr,X11.XGenericEventCookie@)" /> for each cookie claimed with <see cref="M:X11.X11lib.XGetEventData(System.IntPtr,X11.XGenericEventCookie@)" />.</remarks>
        </member>
        <member name="M:X11.X11lib.XSetSelectionOwner(System.IntPtr,System.IntPtr,System.IntPtr,X11.TTime)">
            <summary>Changes the owner and last-change time for the specified selection and has no effect if the specified time
            is earlier than the current last-change time of the specified selection or is later than the current X server time.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="atomSelection">The selection atom, that defines the selection buffer to use. Predefined are PRIMARY and SECONDARY.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The owner window, that specifies the widget that provides the data.<see cref="T:System.IntPtr" /></param>
            <param name="time">The <see cref="T:X11.TTime" /> time, this provision is made. It can be passed either a timestamp of the request triggering event or CurrentTime.</param>
            <remarks>If the new owner (whether a widget or IntPtr.Zero) is not the same as the current owner of the selection
            and the current owner is not IntPtr.Zero, the current owner is sent a SelectionClear event.</remarks>
            <remarks>If the client that is the owner of a selection is later terminated (that is, its connection is closed) or
            if the owner window it has specified in the request is later destroyed,
            the owner of the selection automatically reverts to IntPtr.Zero, but the last-change time is not affected.</remarks>
        </member>
        <member name="M:X11.X11lib.XGetSelectionOwner(System.IntPtr,System.IntPtr)">
            <summary>Retrive the window ID associated with the window that currently owns the specified selection.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="atomSelection">The selection atom, that defines the selection buffer to retrive the window ID for. Predefined are PRIMARY and SECONDARY.<see cref="T:System.IntPtr" /></param>
            <returns>The window ID associated with the window that currently owns the specified selection on success, or IntPtr.Zero otherwise.A <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XChangeProperty(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,System.IntPtr,X11.TInt)">
            <summary>Alter the property for the specified window and causes the X server to generate a PropertyNotify event on that window.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window">The requestor window, that specifies the widget that wants to have the property changed.<see cref="T:System.IntPtr" /></param>
            <param name="atomProperty">The property name, that identifies the data buffer for data transfer. It can also be passed IntPtr.Zero.<see cref="T:System.IntPtr" /></param>
            <param name="atomType">The atom identifier that defines the type of the property.<see cref="T:System.IntPtr" /></param>
            <param name="format">The format of the data, that should be viewed as a list of 8-bit, 16-bit, or 32-bit quantities. Possible values are 8, 16, and 32.<see cref="T:X11.TInt" /></param>
            <param name="mode">Specifies the mode of the operation. You can pass PropModeReplace, PropModePrepend, or PropModeAppend.<see cref="T:X11.TInt" /></param>
            <param name="data">The data in the specified format.<see cref="T:System.IntPtr" /></param>
            <param name="nElements">Specifies the number of elements of the specified data format.<see cref="T:X11.TInt" /></param>
        </member>
        <member name="M:X11.X11lib.XConvertSelection(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,X11.TTime)">
            <summary>Request that the specified selection be converted to the specified target type.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="atomSelection">The selection atom, that defines the selection buffer to use. Predefined are PRIMARY and SECONDARY.<see cref="T:System.IntPtr" /></param>
            <param name="atomTarget">The target atom, that defines the requested format.<see cref="T:System.IntPtr" /></param>
            <param name="atomProperty">The property name, that identifies the data buffer for data transfer. It can also be passed IntPtr.Zero.<see cref="T:System.IntPtr" /></param>
            <param name="requestor">The requestor window, that specifies the widget that requests the data.<see cref="T:System.IntPtr" /></param>
            <param name="time">The <see cref="T:X11.TTime" /> time, this request is made. It can be passed either a timestamp of the request triggering event or CurrentTime.</param>
        </member>
        <member name="M:X11.X11lib.XGetWindowProperty(System.IntPtr,System.IntPtr,System.IntPtr,X11.TLong,X11.TLong,System.Boolean,System.IntPtr,System.IntPtr@,X11.TInt@,X11.TUlong@,X11.TUlong@,System.IntPtr@)">
            <summary>Obtain the actual type of the property; the actual format of the property; the number of 8-bit, 16-bit, or 32-bit items transferred;
            the number of bytes remaining to be read in the property; and a pointer to the data actually returned.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window, that specifies the widget whose property is to obtain. <see cref="T:System.IntPtr" /></param>
            <param name="atomProperty">The property name, that identifies the data buffer for data transfer.<see cref="T:System.IntPtr" /></param>
            <param name="offset">The offset in the specified property (in 32-bit quantities) where the data is to be retrieved.<see cref="T:X11.TLong" /></param>
            <param name="length">The length in 32-bit multiples of the data to be retrieved.<see cref="T:X11.TLong" /></param>
            <param name="delete">A boolean value that determines whether the property is deleted.<see cref="T:System.Boolean" /></param>
            <param name="atomReqType">The atom identifier associated with the property type or AnyPropertyType.<see cref="T:System.IntPtr" /></param>
            <param name="atomActType">The atom identifier that defines the actual type of the property.<see cref="T:System.IntPtr" /></param>
            <param name="actualFormat">The actual format of the property.<see cref="T:X11.TInt" /></param>
            <param name="countItems">The actual number of 8-bit, 16-bit, or 32-bit items stored in the data.<see cref="T:X11.TUlong" /></param>
            <param name="countRemain">The number of bytes remaining to be read in the property if a partial read was performed.<see cref="T:X11.TUlong" /></param>
            <param name="data">The data in the specified format.<see cref="T:System.IntPtr" /></param>
            <returns>Nonzero on success, or zero otherwise.<see cref="T:System.Int32" /> To free the memory allocated for the data, use XFree().</returns>
        </member>
        <member name="M:X11.X11lib.XSetAndCheckWindowProperty(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Convenience function to set a property for the specified window and cause the X server to generate a PropertyNotify event on that window.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The requestor window, that specifies the widget that wants to have the property changed.<see cref="T:System.IntPtr" /></param>
            <param name="atomProperty"> The property to set for the specified window as an Atom. <see cref="T:System.IntPtr" /></param>
            <param name="atomValue"> The value to set for the specified window as an Atom. <see cref="T:System.IntPtr" /></param>
            <returns>Returns <c>true</c> on success, or <c>false</c> otherwise. <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.X11lib.XDeleteProperty(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Delete the specified property only if the property was defined on the specified window and
            cause the X server to generate a PropertyNotify event on the window unless the property does not exist.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window, that specifies the widget whose property is to delete. <see cref="T:System.IntPtr" /></param>
            <param name="atomProperty">The property name, that identifies the data buffer for data transfer.<see cref="T:System.IntPtr" /></param>
            <returns>Nonzero on success, or zero otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XCreateFontCursor(System.IntPtr,X11.XCursorFontShape)">
            <summary> X provides a set of standard cursor shapes in a special font named cursor.The shape argument specifies which glyph of the standard fonts to use. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="cursorFontShape"> The glyph of the cursor font to set. <see cref="T:System.UInt32" /></param>
            <returns> The cursor structure to use with XDefineCursor() on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XDefineCursor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary> Set the indicated cursor. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the cursor for. <see cref="T:System.IntPtr" /></param>
            <param name="cursor"> The cursor to set, or IntPtr.Zero to unset the current cursor. <see cref="T:System.IntPtr" /></param>
            <remarks> !!! Requires subsequent call of XFlush to take effect !!! </remarks>
            <remarks> !!! Doesn't work reliable an virtual machines based on VM-Ware !!! </remarks>
        </member>
        <member name="M:X11.X11lib.XUndefineCursor(System.IntPtr,System.IntPtr)">
            <summary> Undoes the effect of a previous XDefineCursor() call for indicated window. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to set the cursor for. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XRecolorCursor(System.IntPtr,System.IntPtr,X11.XColor@,X11.XColor@)">
            <summary> Change the color of the specified cursor, and if the cursor is being displayed on a screen, the change is visible immediately. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="cursor"> Specifies the <see cref="T:System.IntPtr" /> cursor to change the color for. </param>
            <param name="foregroundColor"> Specify the <see cref="T:X11.XColor" /> RGB values for the foreground of the source. </param>
            <param name="backgroundColor"> Specify the <see cref="T:X11.XColor" /> RGB values for the background of the source. </param>
        </member>
        <member name="M:X11.X11lib.XWarpPointer(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary> Move the pointer by the offsets (dest_x, dest_y) relative to the current position of the pointer. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="src_x11window"> Specify the source window or IntPtr.Zero. <see cref="T:System.IntPtr" /></param>
            <param name="dest_x11window"> Specify the destination window or IntPtr.Zero. <see cref="T:System.IntPtr" /></param>
            <param name="src_x"> X-coordinate to specify a rectangle in the source window. <see cref="T:System.Int32" /></param>
            <param name="src_y"> X-coordinate to specify a rectangle in the source window. <see cref="T:System.Int32" /></param>
            <param name="src_width"> Width to specify a rectangle in the source window. <see cref="T:System.UInt32" /></param>
            <param name="src_height"> Height to specify a rectangle in the source window. <see cref="T:System.UInt32" /></param>
            <param name="dest_x"> Specify the x-coordinates within the destination window. <see cref="T:System.Int32" /></param>
            <param name="dest_y">Specify the y-coordinates within the destination window. <see cref="T:System.Int32" /></param>
            <remarks> If src_x11window is IntPtr.Zero and dest_x11window is IntPtr.Zero, the pointer moves relative to the current position. </remarks>
            <remarks> If src_x11window is IntPtr.Zero and dest_x11window is a window, the pointer moves absolute to the window's origin. </remarks>
            <remarks> If src_x11window is a window, the pointer moves only within the src_x11window and if the specified rectangle contains the pointer. </remarks>
            <remarks> !!! Requires subsequent call of XFlush to take effect !!! </remarks>
            <remarks> !!! Doesn't work an virtual machines based on VM-Ware !!! </remarks>
        </member>
        <member name="M:X11.X11lib.XQueryPointer(System.IntPtr,System.IntPtr,System.IntPtr@,System.IntPtr@,X11.TInt@,X11.TInt@,X11.TInt@,X11.TInt@,X11.TUint@)">
            <summary> Return the root window, the pointer is logically on, and the pointer coordinates relative to the root window's origin. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The application's root window to query the pointer for. <see cref="T:System.IntPtr" /></param>
            <param name="x11windowRootReturn"> The display's root window that the pointer is in (returned). <see cref="T:System.IntPtr" /></param>
            <param name="x11windowChildReturn"> The widget's window that the pointer is in (returned) on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></param>
            <param name="rootReturnX"> The pointer's x-coordinate relative to the display's root window origin. <see cref="T:X11.TInt" /></param>
            <param name="rootReturnY"> The pointer's y-coordinate relative to the display's root window origin. <see cref="T:X11.TInt" /></param>
            <param name="winReturnX"> The pointer's x-coordinate relative to the widget's window origin on success, or 0 otherwise. <see cref="T:X11.TInt" /></param>
            <param name="winReturnY"> The pointer's y-coordinate relative to the widget's window origin on success, or 0 otherwise. <see cref="T:X11.TInt" /></param>
            <param name="maskReturn"> The current state of the modifier keys and pointer buttons. Use StateMask to compare. <see cref="T:X11.TUint" /></param>
            <returns> Nonzero on success, or zero otherwise. <see cref="T:X11.TBoolean" /></returns>
            <remarks> MUST NOT BE CALLED ON A DIFFERENT THREAD! </remarks>
        </member>
        <member name="M:X11.X11lib.XFreeStringList(System.IntPtr)">
            <summary>Release memory, allocated by XmbTextPropertyToTextList(), Xutf8TextPropertyToTextList() and XTextPropertyToStringList() and
            the missing charset list allocated by XCreateFontSet().</summary>
            <param name="ptr">The <see cref="T:System.IntPtr" /> list of null-terminated character strings (char**).</param>
        </member>
        <member name="M:X11.X11lib.XDisplayHeight(System.IntPtr,X11.TInt)">
            <summary>Return the height of indicated screen in pixels.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="screenNumber">The <see cref="T:X11.TInt" /> screen number, that specifies the appropriate screen on the X server.</param>
            <returns>The <see cref="T:System.Int32" /> height of indicated screen in pixels.</returns>
        </member>
        <member name="M:X11.X11lib.XDisplayWidth(System.IntPtr,X11.TInt)">
            <summary>Return the width of indicated screen in pixels.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="screenNumber">The <see cref="T:X11.TInt" /> screen number, that specifies the appropriate screen on the X server.</param>
            <returns>The <see cref="T:System.Int32" /> width of indicated screen in pixels.</returns>
        </member>
        <member name="M:X11.X11lib.XDisplayHeightMM(System.IntPtr,X11.TInt)">
            <summary>Return the height of indicated screen in millimeters.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="screenNumber">The <see cref="T:X11.TInt" /> screen number, that specifies the appropriate screen on the X server.</param>
            <returns>The <see cref="T:System.Int32" /> height of indicated screen in millimeters.</returns>
        </member>
        <member name="M:X11.X11lib.XDisplayWidthMM(System.IntPtr,X11.TInt)">
            <summary>Return the width of indicated screen in millimeters.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="screenNumber">The <see cref="T:X11.TInt" /> screen number, that specifies the appropriate screen on the X server.</param>
            <returns>The <see cref="T:System.Int32" /> width of indicated screen in millimeters.</returns>
        </member>
        <member name="M:X11.X11lib.XScreenCount(System.IntPtr)">
            <summary>Return the number of available screens.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <returns>The number of available screens.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XDefaultScreen(System.IntPtr)">
            <summary>Return the default screen number referenced by the XOpenDisplay() function.
            This macro or function should be used to retrieve the screen number in applications that will use only a single screen.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <returns>The default screen number.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XConnectionNumber(System.IntPtr)">
            <summary> Return the connection number for the specified display.
            On a POSIX-conformant system, this is the file descriptor of the connection. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <returns> The connection number. <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XScreenOfDisplay(System.IntPtr,X11.TInt)">
            <summary> Return a pointer to the indicated screen. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns> The pointer to the indicated screen on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XDefaultVisual(System.IntPtr,X11.TInt)">
            <summary> Return the default visual type for the specified screen. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns> The pointer to the default visual type on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XMatchVisualInfo(System.IntPtr,X11.TInt,X11.TInt,X11.TInt,X11.XVisualInfo@)">
            <summary> Return  the visual information for a visual that matches the specified depth and class for a screen.
            Because multiple visuals that match the specified depth and class can exist, the exact visual chosen is undefined. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <param name="depth"> The requested depth of the screen. <see cref="T:X11.TInt" /></param>
            <param name="screenClass"> The requested class of the screen. <see cref="T:X11.TInt" /></param>
            <param name="visualInfo"> The matching visual information. <see cref="T:X11.XVisualInfo" /></param>
            <returns> The requested default depth. <see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib.XGetVisualInfo(System.IntPtr,X11.TLong,X11.XVisualInfo@,X11.TInt@)">
            <summary> Get an array of visual structures that have attributes equal to the attributes specified by vinfoTemplate. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="vinfoMask"> The mask specifying, what member(s) of vinfoTemplate should determine the requested visual structures. <see cref="T:X11.TLong" /></param>
            <param name="vinfoTemplate"> The visual attributes that are to be used in matching the requested visual structures. <see cref="T:X11.XVisualInfo" /></param>
            <param name="countVisualsReturn"> The number of matching visual structures. <see cref="T:X11.TInt" /></param>
            <returns> The array of visual structures that mmet the specified conditions on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XDefaultDepth(System.IntPtr,X11.TInt)">
            <summary> Return the depth (number of planes) of the default root window for the specified screen.
            Other depths may also be supported on this screen (see .PN XMatchVisualInfo ). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns> The requested default depth. <see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib.XBlackPixel(System.IntPtr,X11.TInt)">
            <summary> Permanently allocated default colormap entry to convey the expected relative intensity of the color. Can be used in implementing a monochrome application. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns> The black pixel value. Only black and white pixel are guaranteed for all XServer. <see cref="T:X11.TPixel" /></returns>
        </member>
        <member name="M:X11.X11lib.XWhitePixel(System.IntPtr,X11.TInt)">
            <summary> Permanently allocated default colormap entry to convey the expected relative intensity of the color. Can be used in implementing a monochrome application. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns> The white pixel value. Only black and white pixel are guaranteed for all XServer. <see cref="T:X11.TPixel" /></returns>
        </member>
        <member name="M:X11.X11lib.XBlackPixelOfScreen(System.IntPtr)">
            <summary> Return the black pixel value of the specified screen. </summary>
            <param name="x11screen"> The screen pointer, that specifies  the appropriate screen structure. <see cref="T:System.IntPtr" /></param>
            <returns> The black pixel value. Only black and white pixel are guaranteed for all XServer. <see cref="T:X11.TPixel" /></returns>
        </member>
        <member name="M:X11.X11lib.XWhitePixelOfScreen(System.IntPtr)">
            <summary> Return the white pixel value of the specified screen. </summary>
            <param name="x11screen"> The screen pointer, that specifies  the appropriate screen structure. <see cref="T:System.IntPtr" /></param>
            <returns> The white pixel value. Only black and white pixel are guaranteed for all XServer. <see cref="T:X11.TPixel" /></returns>
        </member>
        <member name="M:X11.X11lib.XMaxCmapsOfScreen(System.IntPtr)">
            <summary>Return the maximum number of installed colormaps supported by the specified screen.</summary>
            <param name="x11screen"> The screen pointer, that specifies  the appropriate screen structure. <see cref="T:System.IntPtr" /></param>
            <returns>The maximum <see cref="T:X11.TInt" /> number of installed colormaps supported by the specified screen.</returns>
        </member>
        <member name="M:X11.X11lib.XDefaultColormap(System.IntPtr,X11.TInt)">
            <summary> Return the default colormap for allocation on the specified screen.
            Most routine allocations of color should be made out of this colormap. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="screenNumber"> The screen number, that specifies the appropriate screen on the X server. <see cref="T:X11.TInt" /></param>
            <returns> The requested default colormap on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XListInstalledColormaps(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary> Obtain a list of the currently installed colormaps for a given windowm. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to get the installed colormaps for. <see cref="T:System.IntPtr" /></param>
            <param name="numReturn"> The number of installed colormaps. <see cref="T:System.Int32" /></param>
            <returns> The array of installed colormap IDs. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib._XCreateColormap(System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt)">
            <summary> Create a colormap of the specified visual type for the screen on which the specified window resides and returns the
            colormap ID associated with it. Note that the specified window is only used to determine the screen. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window on whose screen the colormap has to be created. A <see cref="T:System.IntPtr" /></param>
            <param name="x11visual"> The visual type supported on the screen.
            If the visual type is not one supported by the screen, a BadMatch error results. <see cref="T:System.IntPtr" /></param>
            <param name="colormapAllocType"> The colormap entries to be allocated. AllocNone or AllocAll can be passed. <see cref="T:X11.TInt" /></param>
            <returns> The colormap ID on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XCreateColormap(System.IntPtr,System.IntPtr,System.IntPtr,X11.XColormapAllocType)">
            <summary> Create a colormap of the specified visual type for the screen on which the specified window resides and returns the
            colormap ID associated with it. Note that the specified window is only used to determine the screen. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window on whose screen the colormap has to be created. A <see cref="T:System.IntPtr" /></param>
            <param name="x11visual"> The visual type supported on the screen.
            If the visual type is not one supported by the screen, a BadMatch error results. <see cref="T:System.IntPtr" /></param>
            <param name="colormapAllocType"> The colormap entries to be allocated. AllocNone or AllocAll can be passed. <see cref="T:System.IntPtr" /></param>
            <returns> The colormap ID on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XInstallColormap(System.IntPtr,System.IntPtr)">
            <summary> Install the specified colormap for its associated screen. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="colormap"> The colormap to associate to a screen. <see cref="T:System.IntPtr" /></param>
            <remarks> All windows associated with this colormap immediately display with true colors.
            To associate a windos with this colormap during creation use XCreateWindow, XCreateSimpleWindow or
            assign the colormap later using XChangeWindowAttributes, or XSetWindowColormap. </remarks>
        </member>
        <member name="M:X11.X11lib.XUninstallColormap(System.IntPtr,System.IntPtr)">
            <summary> Removes the specified colormap from the required list for its screen. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="colormap"> The colormap to remove from the screen. <see cref="T:System.IntPtr" /></param>
            <remarks> As a result, the specified colormap might be uninstalled, and the X server might implicitly install
            or uninstall additional colormaps. Which colormaps get installed or uninstalled is server-dependent except
            that the required list must remain installed.
            If the specified colormap becomes uninstalled, the X server generates a ColormapNotify event on each window that
            has that colormap. In addition, for every other colormap that is installed or uninstalled as a result of a call
            to XUninstallColormap(), the X server generates a ColormapNotify event on each window that has that colormap.</remarks>
        </member>
        <member name="M:X11.X11lib.XFreeColormap(System.IntPtr,System.IntPtr)">
            <summary>Delete the association between the colormap resource ID and the colormap and frees the colormap storage.
            However, this function has no effect on the default colormap for a screen.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="colormap">The <see cref="T:System.IntPtr" /> colormap to be freed.</param>
            <remarks>If the specified colormap is an installed map for a screen, it is uninstalled (see XUninstallColormap).
            If the specified colormap is defined as the colormap for a window (by XCreateWindow(), XSetWindowColormap(), or
            XChangeWindowAttributes()), XFreeColormap() changes the colormap associated with the window to None and generates
            a ColormapNotify event. X does not define the colors displayed for a window with a colormap of None.</remarks>
        </member>
        <member name="M:X11.X11lib.XSetWindowColormap(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Set the specified colormap of the specified window. The colormap must have the same visual type as the window.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The <see cref="T:System.IntPtr" /> window to set the colormap for. </param>
            <param name="colormap"> The <see cref="T:System.IntPtr" /> colormap to set. </param>
        </member>
        <member name="M:X11.X11lib.XParseColor(System.IntPtr,System.IntPtr,System.String,X11.XColor@)">
            <summary>Look up the string name of a color with respect to the screen associated with the specified colormap.
            It returns the exact color value.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11colormap">The colormap to use.<see cref="T:System.IntPtr" /></param>
            <param name="colorname">The color's name to look up.<see cref="T:System.String" /></param>
            <param name="x11color">The exact color.<see cref="T:X11.XColor" /></param>
            <returns>Nonzero if the name is resolved, or it returns zero otherwise.<see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib.XLookupColor(System.IntPtr,System.IntPtr,System.String,X11.XColor@,X11.XColor@)">
            <summary>Look up the string name of a color with respect to the screen associated with the specified colormap.
            It returns both the exact color values and the closest values provided by the screen with respect to the visual type of the specified colormap.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11colormap">The colormap to use.<see cref="T:System.IntPtr" /></param>
            <param name="colorname">The color's name to look up.<see cref="T:System.String" /></param>
            <param name="x11colorExactDef">The exact color.<see cref="T:X11.XColor" /></param>
            <param name="x11colorScrDef">The nearest color provided by the hardware.<see cref="T:X11.XColor" /></param>
            <returns>Nonzero if the name is resolved, or it returns zero otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XQueryColor(System.IntPtr,System.IntPtr,X11.XColor@)">
            <summary>Return the current RGB value for the pixel in the XColor structure and sets the DoRed, DoGreen, and DoBlue flags.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11colormap">The colormap to use for pixel value decomposition (to RGB values).<see cref="T:System.IntPtr" /></param>
            <param name="x11color">The color to decomposite (to RGB values).<see cref="T:X11.XColor" /></param>
            <returns>Nonzero if the name is resolved, or it returns zero otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XAllocColor(System.IntPtr,System.IntPtr,X11.XColor@)">
            <summary> Allocate a read-only colormap entry corresponding to the closest RGB value supported by the hardware.
            XAllocColor() returns the pixel value of the color closest to the specified RGB elements supported by the hardware
            and returns the RGB value actually used. The corresponding colormap cell is read-only.
            Multiple clients that request the same effective RGB value can be assigned the same read-only entry,
            thus allowing entries to be shared. When the last client deallocates a shared cell, it is deallocated.
            XAllocColor() does not use or affect the flags in the XColor structure. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11colormap"> The colormap to use for nearest read-only color cell allocation. <see cref="T:System.IntPtr" /></param>
            <param name="x11color"> The color to allocate the nearest read-only color cell for. <see cref="T:X11.XColor" /></param>
            <returns> Nonzero on success, or zero otherwise. <see cref="T:System.Int32" /></returns>
            <remarks> !!!USE XAllocExactNamedColor() or XAllocExactNamedColor() FOR APPLICATIONS!!! </remarks>
        </member>
        <member name="M:X11.X11lib.XAllocNamedColor(System.IntPtr,System.IntPtr,System.String,X11.XColor@,X11.XColor@)">
            <summary>Look up the string name of a color with respect to the screen associated with the specified colormap.
            It returns both the exact color values and the closest values provided by the screen with respect to the visual
            type of the specified colormap. The pixel value is returned in x11colorScrDef. </summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11colormap">The colormap to use.<see cref="T:System.IntPtr" /></param>
            <param name="colorname">The color's name to look up.<see cref="T:System.String" /></param>
            <param name="x11colorExactDef">The exact color.<see cref="T:X11.XColor" /></param>
            <param name="x11colorScrDef">The nearest color provided by the hardware.<see cref="T:X11.XColor" /></param>
            <returns>Nonzero if the name is resolved, or it returns zero otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XFreeColors(System.IntPtr,System.IntPtr,X11.TPixel[],X11.TInt,X11.TUlong)">
            <summary> Free the cells represented by pixels whose values are in the pixels array. The planes argument should
            not have any bits set to 1 in common with any of the pixels. The set of all pixels is produced by ORing
            together subsets of the planes argument with the pixels. The request frees all of these pixels that were allocated
            by the client (using XAllocColor(), XAllocNamedColor(), XAllocColorCells(), and XAllocColorPlanes()). </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="colormap"> The <see cref="T:System.IntPtr" /> colormap to use for color cell deallocation.</param>
            <param name="pixels"> The <see cref="T:X11.TPixel" />[] of pixel values that map to the cells in the specified colormap to free.</param>
            <param name="nPixels"> The number of colors to free. <see cref="T:X11.TInt" /></param>
            <param name="planes"> The planes to free. <see cref="T:X11.TUlong" /></param>
        </member>
        <member name="M:X11.X11lib.XAllocColorCells(System.IntPtr,System.IntPtr,X11.TBoolean,X11.TUlong[]@,X11.TUint,X11.TUlong[]@,X11.TUint)">
            <summary>Allocates read/write color cells.</summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="colormap"> The <see cref="T:System.IntPtr" /> colormap to allocate color cells for. </param>
            <param name="contig"> The <see cref="T:X11.TBoolean" /> value that indicates whether the planes must be contiguous.</param>
            <param name="planeMasksReturn"> Returns an <see cref="T:X11.TUlong" />[] array of plane masks.</param>
            <param name="nplanes">The<see cref="T:X11.TUint" /> number of plane masks that are to be returned in the plane masks array.</param>
            <param name="pixelsReturn"> Returns an <see cref="T:X11.TUlong" />[] array of pixel values.</param>
            <param name="npixels"> The <see cref="T:X11.TUint" /> number of pixel values that are to be returned in the pixels_return array.</param>
            <returns> Returns <see cref="T:X11.TInt" /> nonzero on success, or zero otherwise.</returns>
            <remarks>If ncolors and nplanes are requested, then ncolors pixels and nplane plane masks are returned.
            No mask will have any bits set to 1 in common with any other mask or with any of the pixels.
            By ORing together each pixel with zero or more masks, ncolors * 2 pow(nplanes) distinct pixels can be produced.
            All of these are allocated writable by the request. For GrayScale or PseudoColor, each mask has exactly one bit set to 1.
            For DirectColor, each has exactly three bits set to 1. If contig is <c>true</c> and if all masks are ORed together,
            a single contiguous set of bits set to 1 will be formed for GrayScale or PseudoColor and three contiguous sets of bits
            set to 1 (one within each pixel subfield) for DirectColor. The RGB values of the allocated entries are undefined.</remarks>
        </member>
        <member name="M:X11.X11lib.XAllocExactNamedColor(System.IntPtr,System.IntPtr,System.String)">
            <summary> Allocate a read-only colormap entry corresponding to the exact RGB value.
            XAllocExactColor() returns the pixel value of the exact color specified. The corresponding colormap cell is read-only.
            Multiple clients that request the same effective RGB value can be assigned the same read-only entry,
            thus allowing entries to be shared. When the last client deallocates a shared cell, it is deallocated. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11colormap"> The colormap to use. <see cref="T:System.IntPtr" /></param>
            <param name="colorname"> The color's name to look up. <see cref="T:System.String" /></param>
            <returns> The pixel value of the requested color on success, or 0 as fallback. <see cref="T:X11.TColor" /></returns>
        </member>
        <member name="M:X11.X11lib.XAllocClosestNamedColor(System.IntPtr,System.IntPtr,System.String)">
            <summary> Allocate a read-only colormap entry corresponding to the closest RGB value supported by the hardware.
            XAllocExactColor() returns the pixel value of the closest color. The corresponding colormap cell is read-only.
            Multiple clients that request the same effective RGB value can be assigned the same read-only entry,
            thus allowing entries to be shared. When the last client deallocates a shared cell, it is deallocated. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11colormap"> The colormap to use. <see cref="T:System.IntPtr" /></param>
            <param name="colorname"> The color's name to look up. <see cref="T:System.String" /></param>
            <returns> The pixel value of the requested color on success, or 0 as fallback. <see cref="T:X11.TColor" /></returns>
        </member>
        <member name="M:X11.X11lib.XAllocClosestNamedColor(System.IntPtr,System.IntPtr,System.String,System.Boolean@)">
            <summary> Allocate a read-only colormap entry corresponding to the closest RGB value supported by the hardware.
            XAllocExactColor() returns the pixel value of the closest color. The corresponding colormap cell is read-only.
            Multiple clients that request the same effective RGB value can be assigned the same read-only entry,
            thus allowing entries to be shared. When the last client deallocates a shared cell, it is deallocated. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11colormap"> The colormap to use. <see cref="T:System.IntPtr" /></param>
            <param name="colorname"> The color's name to look up. <see cref="T:System.String" /></param>
            <param name="exact"> Returns true, if requested color has been allocated exactls, of false otherwise. <see cref="T:System.Boolean" /></param>
            <returns> The pixel value of the requested color on success, or 0 as fallback. <see cref="T:X11.TPixel" /></returns>
        </member>
        <member name="M:X11.X11lib.XCreateImage(System.IntPtr,System.IntPtr,X11.TUint,X11.XImageFormat,X11.TInt,System.IntPtr,X11.TUint,X11.TUint,X11.TInt,X11.TInt)">
            <summary> Allocate the memory needed for an XImage structure for the specified display *** but *** does not allocate space for the image itself.
            Rather, it initializes the structure byte-order, bit-order, and bitmap-unit values from the display and returns a pointer to the XImage structure.
            The red, green, and blue mask values are defined for Z format images only and are derived from the Visual structure passed in. Other values
            also are passed in. The offset permits the rapid displaying of the image without requiring each scanline to be shifted into position. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11visual"> The <see cref="T:System.IntPtr" /> visual to store the image.</param>
            <param name="depth"> The <see cref="T:X11.TUint" /> (color) depth of the image.</param>
            <param name="imageFormat"> The <see cref="T:X11.XImageFormat" /> image format.</param>
            <param name="offset"> The <see cref="T:X11.TInt" /> number of pixels to ignore at the beginning of the scanline.</param>
            <param name="data"> The  <see cref="T:System.Byte" />[] image data. In other words, a char* / byte* to the image data array</param>
            <param name="width"> The <see cref="T:X11.TUint" /> width of the image, in pixels.</param>
            <param name="height"> The <see cref="T:X11.TUint" /> height of the image, in pixels.</param>
            <param name="bitmapPad"> The <see cref="T:X11.TInt" /> quantum of a scanline (8, 16, or 32). In other words, the start of one scanline is separated in client memory
            from the start of the next scanline by an integer multiple of this many bits.</param>
            <param name="bytesPerLine"> The number of bytes in the client image between the start of one scanline and the start of the next. <see cref="T:X11.TInt" /></param>
            <returns> The new <see cref="T:System.IntPtr" /> XImage on success, or  <see cref="F:System.IntPtr.Zero" />  on any error.</returns>
            <remarks>  If a value of zero is passed in bytesPerLine, Xlib assumes that the scanlines are contiguous in memory and calculates the value of bytesPerLine itself. </remarks>
        </member>
        <member name="M:X11.X11lib.XCreatePixmapFromBitmapData(System.IntPtr,System.IntPtr,X11.TUchar[],X11.TUint,X11.TUint,X11.TPixel,X11.TPixel,X11.TUint)">
            <summary>Create a pixmap of the given depth and put the bitmap-formated data into it.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable, the bitmap-formated data (image) is to put on.</param>
            <param name="data">The bitmap-formated <see cref="T:System.UInt16" />[] data (image) to put on the pixmap.</param>
            <param name="width">The image width.<see cref="T:X11.TUint" /></param>
            <param name="height">The <see cref="T:X11.TUint" /> image height.</param>
            <param name="foregroundPixel">The <see cref="T:X11.TUlong" /> foreground pixel value to use.</param>
            <param name="backgroundPicel">The background pixel value to use.<see cref="T:X11.TUlong" /></param>
            <param name="depth">The <see cref="T:X11.TUint" /> color depth to create the pixmap for.</param>
            <returns>The new <see cref="T:System.IntPtr" /> XPixmap on success, or IntPtr.Zero on any error.</returns>
        </member>
        <member name="M:X11.X11lib._XDestroyImage(System.IntPtr)">
            <summary> Deallocate the memory associated with the XImage structure. </summary>
            <param name="x11ximage"> The image to destroy. <see cref="T:System.IntPtr" /></param>
            <remarks> Note that when the image is created using XCreateImage(), XGetImage(), or XSubImage(), the destroy procedure (_XImage.f.destroy_image), that this macro calls,
            frees both the image structure and the data pointed to by the image structure. *** Danger *** Don't delete associated graphic data from managed code! </remarks>
        </member>
        <member name="M:X11.X11lib.XDestroyImage(System.IntPtr)">
            <summary> Deallocate the memory associated with the XImage structure. </summary>
            <param name="x11ximage"> The image to destroy. <see cref="T:System.IntPtr" /></param>
            <remarks> Note that when the image is created using XCreateImage(), XGetImage(), or XSubImage(), the destroy procedure (_XImage.f.destroy_image), that this macro calls,
            frees both the image structure and the data pointed to by the image structure. *** Danger *** Don't delete associated graphic data from managed code! </remarks>
        </member>
        <member name="M:X11.X11lib.XPutImage(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TInt,X11.TInt,X11.TUint,X11.TUint)">
            <summary>Combines an image with a rectangle of the specified drawable.
            The section of the image defined by the srcOffsetX, srcOffsetY, width, and height arguments is drawn on the specified part of the drawable.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11drawable">The drawable, the image is to put on.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The crapchics context to use for drawing.<see cref="T:System.IntPtr" /></param>
            <param name="image">The image to be combined with the rectangle.<see cref="T:System.IntPtr" /></param>
            <param name="srcOffsetX">The offset in X from the left edge of the image.<see cref="T:X11.TInt" /></param>
            <param name="srcOffsetY">The offset in Y from the top edge of the image.<see cref="T:X11.TInt" /></param>
            <param name="destX">The x coordinate, which is relative to the origin of the drawable and is the coordinate of the subimage.<see cref="T:X11.TInt" /></param>
            <param name="destY">The y coordinate, which is relative to the origin of the drawable and is the coordinate of the subimage.<see cref="T:X11.TInt" /></param>
            <param name="width">The width of the subimage, which define the dimensions of the rectangle.<see cref="T:X11.TUint" /></param>
            <param name="height">The height of the subimage, which define the dimensions of the rectangle.<see cref="T:X11.TUint" /></param>
        </member>
        <member name="M:X11.X11lib.XGetImage(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,X11.TUlong,X11.TInt)">
            <summary> Get a pointer to an XImage structure. This structure provides the contents of the specified rectangle of the drawable in the specified format. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable, the imag is to put on. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The the x coordinate, which is relative to the origin of the drawable and define the upper-left corner of the rectangle. <see cref="T:X11.TInt" /></param>
            <param name="y"> The the y coordinate, which is relative to the origin of the drawable and define the upper-left corner of the rectangle. <see cref="T:X11.TInt" /></param>
            <param name="width"> The width of the subimage, which define the dimensions of the rectangle. <see cref="T:X11.TUint" /></param>
            <param name="height"> The height of the subimage, which define the dimensions of the rectangle. <see cref="T:X11.TUint" /></param>
            <param name="planeMask"> The plane mask. <see cref="T:X11.TUlong" /></param>
            <param name="format"> The format for the image (XYPixmap = (X11.TInt)1 or ZPixmap = (X11.TInt)2). <see cref="T:X11.TUint" /></param>
        </member>
        <member name="M:X11.X11lib.XCreatePixmap(System.IntPtr,System.IntPtr,X11.TUint,X11.TUint,X11.TUint)">
            <summary>Create a pixmap of the width, height, and depth you specified and returns a pixmap ID that identifies it.
            It is valid to pass an InputOnly window to the drawable argument.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11drawable">The drawable, the pixmap is created on. The server uses the specified drawable to determine on which screen to create the pixmap.<see cref="T:System.IntPtr" /></param>
            <param name="width">The width, which define the dimensions of the pixmap.<see cref="T:X11.TUint" /></param>
            <param name="height">The height, which define the dimensions of the pixmap.<see cref="T:X11.TUint" /></param>
            <param name="depth">The depth of the pixmap.<see cref="T:X11.TUint" /></param>
            <returns>The pixmap on success, or IntPtr.Zero otherwise.<see cref="T:System.IntPtr" /></returns>
            <remarks>The width and height arguments must be nonzero, or a BadValue error results.
            The depth argument must be one of the depths supported by the screen of the specified drawable, or a BadValue error results.
            The pixmap can be used only on this screen and only with other drawables of the same depth.
            The initial contents of the pixmap are undefined.</remarks>
        </member>
        <member name="M:X11.X11lib.XFreePixmap(System.IntPtr,System.IntPtr)">
            <summary> Delete the association between the pixmap ID and the pixmap.
            Then, the X server frees the pixmap storage when there are no references to it.
            The pixmap should never be referenced again. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11pixmap"> The pixmap to free. <see cref="T:System.IntPtr" /></param>
            <remarks> The XFreePixmap() function first deletes the association between the pixmap ID and the pixmap.
            Then, the X server frees the pixmap storage when there are no references to it. The pixmap should never be referenced again. </remarks>
        </member>
        <member name="M:X11.X11lib.XGetPixel(System.IntPtr,X11.TInt,X11.TInt)">
            <summary>Get the specified pixel from the indicated image.</summary>
            <param name="x11image">The image to get the pixel from.<see cref="T:System.IntPtr" /></param>
            <param name="x">The x coordinate of the pixel to get.<see cref="T:X11.TInt" /></param>
            <param name="y">The x coordinate of the pixel to get.<see cref="T:X11.TInt" /></param>
            <returns>The requestred pixel.<see cref="T:X11.TUlong" /></returns>
        </member>
        <member name="M:X11.X11lib.XSetClipMask(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary> Set (with x11pixmap) or unset (with IntPtr.Zero) a clip mask (transparency mask). </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to apply the clip mask on. <see cref="T:System.IntPtr" /></param>
            <param name="x11pixmap"> The clip mask (transparency mask) to apply. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XSetClipOrigin(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt)">
            <summary>Set the clip origin in the specified GC. The clip-mask origin is interpreted relative to
            the origin of whatever destination drawable is specified in the graphics request.</summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server. </param>
            <param name="x11gc"> The <see cref="T:System.IntPtr" /> crapchics context to apply the clip origin on. </param>
            <param name="clipOriginX"> The <see cref="T:X11.TInt" /> x coordinate of the clip-mask origin.</param>
            <param name="clipOriginY"> The <see cref="T:X11.TInt" /> y coordinate of the clip-mask origin.</param>
        </member>
        <member name="M:X11.X11lib.XSetClipRectangles(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.XRectangle[],X11.TInt,X11.TInt)">
            <summary>  Change the clip-mask in the specified GC to the specified list of rectangles and sets the clip origin. The
            output is clipped to remain contained within the rectangles. The clip-origin is interpreted relative to the origin of
            whatever destination drawable is specified in a graphics request. The rectangle coordinates are interpreted relative
            to the clip-origin. The rectangles should be nonintersecting, or the graphics results will be undefined. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11gc"> The <see cref="T:System.IntPtr" /> grapchics context to apply the clip rectangles on.</param>
            <param name="clipOriginX"> The <see cref="T:X11.TInt" /> x-coordinate of the clip-mask origin.</param>
            <param name="clipOriginY"> The <see cref="T:X11.TInt" /> y-coordinate of the clip-mask origin.</param>
            <param name="rectangles"> The <see cref="T:X11.XRectangle" />[] array of rectangles that define the clip-mask.</param>
            <param name="numRectangles"> The <see cref="T:X11.TInt" /> number of rectangles.</param>
            <param name="ordering"> The <see cref="T:X11.TInt" /> ordering relations on the rectangles. Any value of XClipRectanglesOrdering can be passed.</param>
            <remarks> Note that the list of rectangles can be empty, which effectively disables output.
            This is the opposite of passing None as the clip-mask in XCreateGC, XChangeGC, and XSetClipMask. </remarks>
        </member>
        <member name="M:X11.X11lib.XCopyArea(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,X11.TInt,X11.TInt)">
            <summary> Combine the specified rectangle of src with the specified rectangle of dest. The drawables must have the same root and depth. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawableSrc"> Specify the source rectangle to be combined. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawableDest"> Specify the source rectangle to be combined. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The grapchics context to apply the rectangle combination on. <see cref="T:System.IntPtr" /></param>
            <param name="srcOffsetX"> Specify the x <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the source rectangle
            and specify its upper-left corner. </param>
            <param name="srcOffsetY"> Specify the y <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the source rectangle
            and specify its upper-left corner. </param>
            <param name="width"> Specify the <see cref="T:X11.TUint" /> width, which is the dimension of both the source and destination rectangles. </param>
            <param name="height"> Specify the <see cref="T:X11.TUint" /> height, which is the dimension of both the source and destination rectangles. </param>
            <param name="dstOffsetX"> Specify the x <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the destination rectangle
            and specify its upper-left corner. </param>
            <param name="dstOffsetY"> Specify the y <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the destination rectangle
            and specify its upper-left corner. </param>
            <remarks> If regions of the source rectangle are obscured and have not been retained in backing store or if regions outside the
            boundaries of the source drawable are specified, those regions are not copied.
            Instead, the following occurs on all corresponding destination regions that are either visible or are retained in backing store.
            * If the destination is a window with a background other than None, corresponding regions of the destination are tiled with that
            background (with plane-mask of all ones and GXcopy function). Regardless of tiling or whether the destination is a window or a
            pixmap, if graphics-exposures is <c>true</c>, then GraphicsExpose events for all corresponding destination regions are generated.
            * If graphics-exposures is <c>true</c> but no GraphicsExpose events are generated, a NoExpose event is generated. Note that by
            default graphics-exposures is True in new GCs.
            This function uses these GC components: function, plane-mask, subwindow-mode, graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask. </remarks>
        </member>
        <member name="M:X11.X11lib.XCopyPlane(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,X11.TInt,X11.TInt,X11.TUlong)">
            <summary> Modify the specified rectangle of dest unsing a single bit plane of the specified source rectangle combined with the specified GC.
            The drawables must have the same root but need not have the same depth. The plane must have exactly one bit set to 1 (that identifies the
            plane) and the value of plane must be less than 2 power(n), where n is the depth of src.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawableSrc"> Specify the source rectangle to be combined. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawableDest"> Specify the source rectangle to be combined. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The grapchics context to apply the rectangle combination on. <see cref="T:System.IntPtr" /></param>
            <param name="srcOffsetX"> Specify the x <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the source rectangle
            and specify its upper-left corner. </param>
            <param name="srcOffsetY"> Specify the y <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the source rectangle
            and specify its upper-left corner. </param>
            <param name="width"> Specify the <see cref="T:X11.TUint" /> width, which is the dimension of both the source and destination rectangles. </param>
            <param name="height"> Specify the <see cref="T:X11.TUint" /> height, which is the dimension of both the source and destination rectangles. </param>
            <param name="dstOffsetX"> Specify the x <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the destination rectangle
            and specify its upper-left corner. </param>
            <param name="dstOffsetY"> Specify the y <see cref="T:X11.TInt" /> coordinate, which are relative to the origin of the destination rectangle
            and specify its upper-left corner. </param>
            <param name="plane">Specify the index of the <see cref="T:X11.TUlong" /> bit plane. You must set exactly one bit to 1. </param>
            <remarks> Effectively, XCopyPlane() forms a pixmap of the same depth as the rectangle of dest and with a size specified by the source region.
            It uses the foreground/background pixels in the GC (foreground everywhere the bit plane in src contains a bit set to 1, background everywhere
            the bit plane in src contains a bit set to 0) and the equivalent of a CopyArea() protocol request is performed with all the same exposure semantics.
            This can also be thought of as using the specified region of the source bit plane as a stipple with a fill-style of FillOpaqueStippled for filling
            a rectangular area of the destination.
            This function uses these GC components: function, plane-mask, foreground, background, subwindow-mode, graphics-exposures, clip-x-origin,
            clip-y-origin, and clip-mask. </remarks>
        </member>
        <member name="M:X11.X11lib.XPutPixel(System.IntPtr,X11.TInt,X11.TInt,X11.TPixel)">
            <summary> Overwrite the pixel in the named image with the specified pixel value. The input pixel value must be in normalized format (that is,
            the least-significant byte of the long is the least-significant byte of the pixel). The image must contain the x and y coordinates. </summary>
            <param name="x11image"> The image to overwrite a containing pixel. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The logical x coordinate of the pixel to overwrite. <see cref="T:X11.TInt" /></param>
            <param name="y"> The logical y coordinate of the pixel to overwrite. <see cref="T:X11.TInt" /></param>
            <param name="pixel"> The pixel value to overwrite. <see cref="T:X11.TPixel" /></param>
        </member>
        <member name="M:X11.X11lib.XCreateBitmapFromData(System.IntPtr,System.IntPtr,X11.TUchar[],X11.TUint,X11.TUint)">
            <summary>Allows to include a bitmap file into the program code that was written out by XWriteBitmapFile () without reading in the bitmap file.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="X11drawableSrc">The <see cref="T:System.IntPtr" /> drawable that indicates the screen.</param>
            <param name="data">The <see cref="T:X11.TUchar" />[] data in bitmap format.</param>
            <param name="width">The <see cref="T:X11.TUint" /> width of the bitmap.</param>
            <param name="height">The <see cref="T:X11.TUint" /> height of the bitmap.</param>
            <returns>The server side <see cref="T:System.IntPtr" /> pixmap on success, or <c>null</c> otherwise.</returns>
            <remarks>It is your responsibility to free the bitmap using XFreePixmap() when finished.</remarks>
        </member>
        <member name="M:X11.X11lib.XReadBitmapFile(System.IntPtr,System.IntPtr,X11.TChar[],X11.TUint@,X11.TUint@,System.IntPtr@,X11.TInt@,X11.TInt@)">
            <summary> Read in a file containing a bitmap. The file is parsed in the encoding of the current locale.
            The ability to read other than the standard format is implementation dependent</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="X11drawableSrc"> Specify the <see cref="T:System.IntPtr" /> drawable that indicates the screen. </param>
            <param name="filepath"> Specify the file <see cref="T:X11.TChar" />[] name to use. The format of the file name is operating-system dependent. </param>
            <param name="widthReturn"> Return the <see cref="T:X11.TUint" /> width of the read in bitmap file. </param>
            <param name="heightReturn"> Return the <see cref="T:X11.TUint" /> height of the read in bitmap file. </param>
            <param name="bitmapReturn"> Returns the <see cref="T:System.IntPtr" /> bitmap that is created. </param>
            <param name="xHotReturn"> Return the hotspot x <see cref="T:X11.TInt" /> coordinate. </param>
            <param name="yHotReturn"> Return the hotspot y <see cref="T:X11.TInt" /> coordinate. </param>
            <returns> If the file cannot be opened, XReadBitmapFile() returns BitmapOpenFailed.
            If the file can be opened but does not contain valid bitmap data, it returns BitmapFileInvalid.
            If insufficient working storage is allocated, it returns BitmapNoMemory.
            If the file is readable and valid, it returns BitmapSuccess. <see cref="T:X11.TInt" /></returns>
            <remarks> XReadBitmapFile() returns the bitmap's height and width, as read from the file, to widthReturn and heightReturn.
            It then creates a pixmap of the appropriate size, reads the bitmap data from the file into the pixmap, and assigns the pixmap
            to the caller's variable bitmapReturn. The caller must free the bitmap using XFreePixmap() when finished. If name_x_hot and name_y_hot
            exist (in the bitmap file), XReadBitmapFile() returns them to xHotReturn and yHotReturn; otherwise, it returns -1,-1. </remarks>
        </member>
        <member name="M:X11.X11lib.XClearWindow(System.IntPtr,System.IntPtr)">
            <summary> Clear the entire area in the specified window and is equivalent to XClearArea(display, w, 0, 0, 0, 0, False).
            If the window has a defined background tile, the rectangle is tiled with a plane-mask of all ones and GXcopy function.
            If the window has background None, the contents of the window are not changed.
            If you specify a window whose class is InputOnly , a BadMatch error results. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11window"> The window to clear. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XCreateGC(System.IntPtr,System.IntPtr,X11.TUlong,System.IntPtr)">
            <summary> Create a graphics context.
            It can be used with any destination drawable having the same root and depth as the specified drawable. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="valuesMask"> Determine which components in the GC are to be set using the information in the specified values structure.
            This argument is the bitwise inclusive OR of zero or more of the valid GC component mask bits. <see cref="T:System.UInt64" /></param>
            <param name="values"> The values as specified by the valuemask in a XGCValues structure. <see cref="T:System.IntPtr" /></param>
            <returns> The graphics context on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XCreateGC(System.IntPtr,System.IntPtr,X11.TUlong,X11.XGCValues@)">
            <summary> Create a graphics context.
            It can be used with any destination drawable having the same root and depth as the specified drawable. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="valuesMask"> Determine which components in the GC are to be set using the information in the specified values structure.
            This argument is the bitwise inclusive OR of zero or more of the valid GC component mask bits. <see cref="T:System.UInt64" /></param>
            <param name="values"> The values as specified by the valuemask in a XGCValues structure. <see cref="T:System.IntPtr" /></param>
            <returns> The graphics context on success, or IntPtr.Zero otherwise. <see cref="T:X11.XGCValues" /></returns>
        </member>
        <member name="M:X11.X11lib.XFreeGC(System.IntPtr,System.IntPtr)">
            <summary>  Destroy the specified GC as well as all the associated storage. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The graphics context to destroy. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XGContextFromGC(System.IntPtr)">
            <summary> Get the resource ID for the indicated graphics context. </summary>
            <param name="x11gc"> The graphics context to get the resource ID for. <see cref="T:System.IntPtr" /></param>
            <returns> The resource ID for the indicated graphics context. <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.X11lib.XSetForeground(System.IntPtr,System.IntPtr,X11.TPixel)">
            <summary> Set the foreground to the specified graphics context. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The graphics context. <see cref="T:System.IntPtr" /></param>
            <param name="foreground"> The foreground to set. <see cref="T:X11.TPixel" /></param>
        </member>
        <member name="M:X11.X11lib.XSetBackground(System.IntPtr,System.IntPtr,X11.TPixel)">
            <summary> Set the background to the specified graphics context. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The graphics context. <see cref="T:System.IntPtr" /></param>
            <param name="background"> The background to set. <see cref="T:X11.TPixel" /></param>
        </member>
        <member name="M:X11.X11lib.XSetWindowBackground(System.IntPtr,System.IntPtr,X11.TPixel)">
            <summary>Set the background of the window to the specified graphics context.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window to set the background for.<see cref="T:System.IntPtr" /></param>
            <param name="background">The background to set.<see cref="T:X11.TPixel" /></param>
            <remarks>XSetWindowBackground() uses a pixmap of undefined size filled with the pixel value you passed.
            If the background of an InputOnly window is changed, a BadMatch error results.
            The XSetBackground() does not change the current contents of the window.</remarks>
        </member>
        <member name="M:X11.X11lib.XSetWindowBackgroundPixmap(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Set the background pixmap of the window to the specified pixmap.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window to set the background pixmap.<see cref="T:System.IntPtr" /></param>
            <param name="x11pixmap">The background pixmap, ParentRelative, or None.<see cref="T:System.IntPtr" /></param>
            <remarks>The background pixmap can immediately be freed if no further explicit references to it are to be made. If ParentRelative
            is specified, the background pixmap of the window's parent is used, or on the root window, the default background is restored.
            If the background of an InputOnly window is changed, a BadMatch error results.
            If the background is set to None, the window has no defined background. A XSetWindowBackground () redefines the background.
            The XSetWindowBackgroundPixmap() does not change the current contents of the window.</remarks>
        </member>
        <member name="M:X11.X11lib.XClearArea(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,System.Boolean)">
            <summary>Paint a rectangular area in the specified window according to the specified dimensions with the window's background pixel or pixmap.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11window">The window to paint the background for (and implicit the upper-left corner of the rectangle).<see cref="T:System.IntPtr" /></param>
            <param name="x">The x coordinate, which is relative to the origin of the window.<see cref="T:X11.TInt" /></param>
            <param name="y">The y coordinate, which is relative to the origin of the window.<see cref="T:X11.TInt" /></param>
            <param name="width">The width, which is the dimensions of the rectangle.
            If width is zero, it is replaced with the current width of the window minus x. <see cref="T:X11.TUint" /></param>
            <param name="height">The height, which is the dimensions of the rectangle.
            If height is zero, it is replaced with the current height of the window minus y.<see cref="T:X11.TUint" /></param>
            <param name="exposures">Determine whether 'Expose' events are to be generated.<see cref="T:System.Boolean" /></param>
            <remarks>The subwindow-mode effectively is ClipByChildren. If the window has a defined background tile, the rectangle
            clipped by any children is filled with this tile. If the window has background None, the contents of the window are not changed.
            In either case, if exposures is True, one or more Expose events are generated for regions of the rectangle that are either
            visible or are being retained in a backing store. If the area of an InputOnly window is cleared, a BadMatch error results.</remarks>
        </member>
        <member name="M:X11.X11lib.XSetFunction(System.IntPtr,System.IntPtr,X11.XGCFunction)">
            <summary> Set the pixel manipulation function of indicated graphics context. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The graphics context to set the pixel manipulation function for. <see cref="T:System.IntPtr" /></param>
            <param name="function"> The pixel manipulation function to set. <see cref="T:X11.XGCFunction" /></param>
        </member>
        <member name="M:X11.X11lib.XSetLineAttributes(System.IntPtr,System.IntPtr,X11.TUint,X11.XGCLineStyle,X11.XGCCapStyle,X11.XGCJoinStyle)">
            <summary>Set all attributes for line drawing.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The graphics context to set the line attributes for.<see cref="T:System.IntPtr" /></param>
            <param name="lineWidth">The line width, that specifies the line-width to set for the specified GC.<see cref="T:X11.TUint" /></param>
            <param name="lineStyle">The line style, that specifies the line-style to set for the specified GC. Can be LineSolid, LineOnOffDash, or LineDoubleDash.<see cref="T:X11.XGCLineStyle" /></param>
            <param name="capStyle">The cap style, tat specifies the line cap-style to set for the specified GC. Can be CapNotLast, CapButt, CapRound, or CapProjecting.<see cref="T:X11.XGCCapStyle" /></param>
            <param name="joinStyle">The join styl, that specifies the line join-style to set for the specified GC. Can be JoinMiter, JoinRound, or JoinBevel.<see cref="T:X11.XGCJoinStyle" /></param>
        </member>
        <member name="M:X11.X11lib.XGetGCValues(System.IntPtr,System.IntPtr,X11.TUlong,X11.XGCValues@)">
            <summary>The XGetGCValues() function returns the components specified by valuemask for the specified GC.
            If the valuemask contains a valid set of GC mask bits (GCFunction, GCPlaneMask, GCForeground, GCBackground,
            GCLineWidth, GCLineStyle, GCCapStyle, GCJoinStyle, GCFillStyle, GCFillRule, GCTile, GCStipple, GCTileStipXOrigin,
            GCTileStipYOrigin, GCFont, GCSubwindowMode, GCGraphicsExposures, GCClipXOrigin, GCCLipYOrigin, GCDashOffset,
            or GCArcMode) and no error occurs, XGetGCValues() sets the requested components in values and returns nonzero.
            Otherwise, it returns a zero status.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The crapchics context to get the values for.<see cref="T:System.IntPtr" /></param>
            <param name="valuemask">The flags, determining which values to get.<see cref="T:System.UInt32" /></param>
            <param name="values">The structure containing the investigated values.<see cref="T:X11.XGCValues" /></param>
            <returns> Nonzero on success, or zero otherwise.<see cref="T:System.Int32" /></returns>
            <remarks> Note that the clip-mask and dash-list (represented by the GCClipMask and GCDashList bits,
            respectively, in the valuemask) cannot be requested. Also note that an invalid resource ID (with one
            or more of the three most-significant bits set to 1) will be returned for GCFont, GCTile, and GCStipple
            if the component has never been explicitly set by the client.</remarks>
        </member>
        <member name="M:X11.X11lib.XChangeGC(System.IntPtr,System.IntPtr,X11.TUlong,X11.XGCValues@)">
            <summary>Change the components specified by valuemask for the specified GC.
            The values argument contains the values to be set. The values and restrictions are the same as for XCreateGC().
            Changing the clip-mask overrides any previous XSetClipRectangles() request on the context.
            Changing the dash-offset or dash-list overrides any previous XSetDashes() request on the context.
            The order in which components are verified and altered is server-dependent.
            If an error is generated, a subset of the components may have been altered.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The crapchics context to change the values for.<see cref="T:System.IntPtr" /></param>
            <param name="valuemask">The flags, determining which values to change.<see cref="T:System.UInt32" /></param>
            <param name="values">The structure containing the change values.<see cref="T:X11.XGCValues" /></param>
        </member>
        <member name="M:X11.X11lib._XSetFillStyle(System.IntPtr,System.IntPtr,X11.TInt)">
            <summary>Set the fill-style in the specified GC.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The crapchics context to set the fill-style for.<see cref="T:System.IntPtr" /></param>
            <param name="fillStyle">Specifies the <see cref="T:X11.TInt" /> fill-rule has to be set for the specified GC. It can be passed FillSolid, FillTiled, FillStippled, or FillOpaqueStippled.</param>
        </member>
        <member name="M:X11.X11lib.XSetFillStyle(System.IntPtr,System.IntPtr,X11.XGCFillStyle)">
            <summary>Set the fill-style in the specified GC.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The crapchics context to set the fill-style for.<see cref="T:System.IntPtr" /></param>
            <param name="fillStyle">Specifies the <see cref="T:X11.XGCFillStyle" /> fill-rule has to be set for the specified GC. It can be passed FillSolid, FillTiled, FillStippled, or FillOpaqueStippled.</param>
        </member>
        <member name="M:X11.X11lib.XSetStipple(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Set (with x11pixmap) or unset (with IntPtr.Zero) the stipple mask (transparency mask) in the specified GC.
            The stipple must have a depth of one, or a BadMatch error results.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The grapchics context to apply the clip mask on.<see cref="T:System.IntPtr" /></param>
            <param name="x11pixmap">The stipple mask (transparency mask) to apply to the GC.<see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib._XSetTile(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Set the fill tile in the specified GC. The tile and GC must have the same depth, or a BadMatch error results.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11gc">The <see cref="T:System.IntPtr" /> grapchics context to apply the clip mask on.</param>
            <param name="x11pixmap">The <see cref="T:System.IntPtr" /> fill tile to apply to the GC.</param>
        </member>
        <member name="M:X11.X11lib.XSetTSOrigin(System.IntPtr,System.IntPtr,X11.TInt,X11.TInt)">
            <summary>Set the tile/stipple origin in the specified GC. When graphics requests call for tiling or stippling,
            the parent's origin will be interpreted relative to whatever destination drawable is specified in the graphics request. </summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The grapchics context to apply the clip mask on.<see cref="T:System.IntPtr" /></param>
            <param name="originX">The x coordinate of the tile and stipple origin. <see cref="T:X11.TInt" /></param>
            <param name="originY">The y coordinate of the tile and stipple origin. <see cref="T:X11.TInt" /></param>
        </member>
        <member name="M:X11.X11lib.XCreateRegion">
            <summary>Create a new empty region.</summary>
            <returns>The new empty region.<see cref="T:System.IntPtr" /></returns>
            <remarks>Don't forget to call XDestroyRegion().</remarks>
        </member>
        <member name="M:X11.X11lib.XUnionRectWithRegion(X11.XRectangle@,System.IntPtr,System.IntPtr)">
            <summary>Update the destination region from a union of the specified rectangle and the specified source region.</summary>
            <param name="rect">The rectangle to update the destination region.<see cref="T:X11.XRectangle" /></param>
            <param name="sourceRegion">The region to update the destination region.<see cref="T:System.IntPtr" /></param>
            <param name="destRegion">The destination region.<see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XSetRegion(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Set the clip-mask in the GC to the specified region. The region is specified relative to the drawable's origin.
            The resulting GC clip origin is implementation dependent. Once it is set in the GC, the region can be destroyed.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="x11gc">The crapchics context to set the clip-mask for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="region">The region that defines the clip-mask.<see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XDestroyRegion(System.IntPtr)">
            <summary>Destroy the indicated region.</summary>
            <param name="region">The region to destroy.<see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XDrawPoint(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary> Draw a line between the specified set of points (x1, y1) and (x2, y2) using the components of the specified GC.
            It does not perform joining at coincident endpoints. For any given line, XDrawLine() does not draw a pixel more than once.
            If lines intersect, the intersecting pixels are drawn multiple times. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The point x-coordinate. <see cref="T:System.Int32" /></param>
            <param name="y"> The point y-coordinate. <see cref="T:System.Int32" /></param>
            <remarks> XDrawPoint() use these GC components: function, plane-mask, foreground, subwindow-mode, clip-x-origin, clip-y-origin
            and clip-mask. XDrawPoint() also uses these GC mode-dependent component: foreground. </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawPoint(System.IntPtr,System.IntPtr,System.IntPtr,System.Double,System.Double)">
            <summary> Draw a line between the specified set of points (x1, y1) and (x2, y2) using the components of the specified GC.
            It does not perform joining at coincident endpoints. For any given line, XDrawLine() does not draw a pixel more than once.
            If lines intersect, the intersecting pixels are drawn multiple times. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The point x-coordinate. <see cref="T:System.Double" /></param>
            <param name="y"> The point y-coordinate. <see cref="T:System.Double" /></param>
            <remarks> XDrawPoint() use these GC components: function, plane-mask, foreground, subwindow-mode, clip-x-origin, clip-y-origin
            and clip-mask. XDrawPoint() also uses these GC mode-dependent component: foreground. </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawLine(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Draw a line between the specified set of points (x1, y1) and (x2, y2) using the components of the specified GC.
            It does not perform joining at coincident endpoints. For any given line, XDrawLine() does not draw a pixel more than once.
            If lines intersect, the intersecting pixels are drawn multiple times. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x1"> The start point x-coordinate. <see cref="T:System.Int32" /></param>
            <param name="y1"> The start point y-coordinate. <see cref="T:System.Int32" /></param>
            <param name="x2"> The end point x-coordinate. <see cref="T:System.Int32" /></param>
            <param name="y2"> The end point x-coordinate. <see cref="T:System.Int32" /></param>
            <remarks> XDrawLine() use these GC components: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode,
            clip-x-origin, clip-y-origin, and clip-mask. XDrawLine() also uses these GC mode-dependent components: foreground, background, tile,
            stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawLine(System.IntPtr,System.IntPtr,System.IntPtr,System.Double,System.Double,System.Double,System.Double)">
            <summary> Draw a line between the specified set of points (x1, y1) and (x2, y2) using the components of the specified GC.
            It does not perform joining at coincident endpoints. For any given line, XDrawLine() does not draw a pixel more than once.
            If lines intersect, the intersecting pixels are drawn multiple times. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x1"> The start point x-coordinate. <see cref="T:System.Double" /></param>
            <param name="y1"> The start point y-coordinate. <see cref="T:System.Double" /></param>
            <param name="x2"> The end point x-coordinate. <see cref="T:System.Double" /></param>
            <param name="y2"> The end point x-coordinate. <see cref="T:System.Double" /></param>
            <remarks> XDrawLine() use these GC components: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode,
            clip-x-origin, clip-y-origin, and clip-mask. XDrawLine() also uses these GC mode-dependent components: foreground, background, tile,
            stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. </remarks>
        </member>
        <member name="M:X11.X11lib._XDrawArc(System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,X11.TInt,X11.TInt)">
            <summary> Draw  a single circular or elliptical arc specified by a bounding rectangle and two angles.
            The center of the circle or ellipse is the center of the rectangle, and the major and minor axes are specified by the width and height.
            Positive angles indicate counterclockwise motion, and negative angles indicate clockwise motion.
            If the magnitude of angle2 is greater than 360 degrees, XDrawArc() truncates it to 360 degrees.
            Specifying an arc with one endpoint and a clockwise extent draws the same pixels as specifying
            the other endpoint and an equivalent counterclockwise extent, except as it affects joins. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The bounding box x-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="y"> The bounding box y-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="width"> The bounding box width. <see cref="T:X11.TInt" /></param>
            <param name="height"> The bounding box height. <see cref="T:X11.TInt" /></param>
            <param name="startAngle"> The arc's start angle, relative to the 3 o clock position counterclockwise in units of degrees * 64. <see cref="T:X11.TInt" /></param>
            <param name="sweepAngle"> The angle between startAngle and the end of the arc, counterclockwise in units of degrees * 64. <see cref="T:X11.TInt" /></param>
            <remarks> XDrawLine() use these GC components: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style,
            subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. It also uses these GC mode-dependent components: foreground,
            background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawArc(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Draw  a single circular or elliptical arc specified by a bounding rectangle and two angles.
            The center of the circle or ellipse is the center of the rectangle, and the major and minor axes are specified by the width and height.
            Positive angles indicate counterclockwise motion, and negative angles indicate clockwise motion.
            If the magnitude of angle2 is greater than 360 degrees, XDrawArc() truncates it to 360 degrees.
            Specifying an arc with one endpoint and a clockwise extent draws the same pixels as specifying
            the other endpoint and an equivalent counterclockwise extent, except as it affects joins. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The bounding box x-coordinate. <see cref="T:System.Int32" /></param>
            <param name="y"> The bounding box y-coordinate. <see cref="T:System.Int32" /></param>
            <param name="width"> The bounding box width. <see cref="T:System.Int32" /></param>
            <param name="height"> The bounding box height. <see cref="T:System.Int32" /></param>
            <param name="startAngle"> The arc's start angle, relative to the 3 o clock position counterclockwise in units of degrees * 64. <see cref="T:System.Int32" /></param>
            <param name="sweepAngle"> The angle between startAngle and the end of the arc, counterclockwise in units of degrees * 64. <see cref="T:System.Int32" /></param>
            <remarks> XDrawLine() use these GC components: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style,
            subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. It also uses these GC mode-dependent components: foreground,
            background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. </remarks>
        </member>
        <member name="M:X11.X11lib._XDrawLines(System.IntPtr,System.IntPtr,System.IntPtr,X11.XPoint[],X11.TInt,X11.TInt)">
            <summary> Draw numPoints-1 lines between each pair of points (point[i], point[i+1]) in the array of XPoint structure
            using the components of the specified GC. It draws the lines in the order listed in the array.
            The lines join correctly at all intermediate points, and if the first and last points coincide, the first and last lines
            also join correctly. For any given line, XDrawLines does not draw a pixel more than once.
            If thin (zero line-width) lines intersect, the intersecting pixels are drawn multiple times. If wide lines intersect, the
            intersecting pixels are drawn only once, as though the entire PolyLine protocol request were a single, filled shape. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable"> The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="x11gc"> The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="points"> The <see cref="T:X11.XPoint" />[] array of points, defining the lines to draw.</param>
            <param name="numPoints"> The <see cref="T:X11.TInt" /> number of points in the array.</param>
            <param name="coordMode"> The <see cref="T:X11.TInt" /> coordinate mode. You can pass CoordModeOrigin or CoordModePrevious.
            CoordModeOrigin treats all coordinates as relative to the origin, and CoordModePrevious treats all coordinates
            after the first as relative to the previous point.</param>
        </member>
        <member name="M:X11.X11lib.XDrawLines(System.IntPtr,System.IntPtr,System.IntPtr,X11.XPoint[],System.Int32,X11.XCoordinateMode)">
            <summary> Draw numPoints-1 lines between each pair of points (point[i], point[i+1]) in the array of XPoint structure
            using the components of the specified GC. It draws the lines in the order listed in the array.
            The lines join correctly at all intermediate points, and if the first and last points coincide, the first and last lines
            also join correctly. For any given line, XDrawLines does not draw a pixel more than once.
            If thin (zero line-width) lines intersect, the intersecting pixels are drawn multiple times. If wide lines intersect, the
            intersecting pixels are drawn only once, as though the entire PolyLine protocol request were a single, filled shape. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable"> The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="x11gc"> The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="points"> The <see cref="T:X11.XPoint" />[] array of points, defining the lines to draw.</param>
            <param name="numPoints"> The <see cref="T:System.Int32" /> number of points in the array.</param>
            <param name="coordMode"> The <see cref="T:X11.XCoordinateMode" /> coordinate mode. You can pass CoordModeOrigin or CoordModePrevious.
            CoordModeOrigin treats all coordinates as relative to the origin, and CoordModePrevious treats all coordinates
            after the first as relative to the previous point.</param>
        </member>
        <member name="M:X11.X11lib.XDrawRectangle(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Draw the outlines of the specified rectangle as if a five-point PolyLine protocol request were specified for the rectangle
            For the specified rectangle, this function does not draw a pixel more than once. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The left top corner x-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="width"> The rectangle width. <see cref="T:X11.TUint" /></param>
            <param name="height"> The rectangle height. <see cref="T:X11.TUint" /></param>
            <remarks> The function uses these GC components: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list.  </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawRectangle(System.IntPtr,System.IntPtr,System.IntPtr,System.Double,System.Double,System.Double,System.Double)">
            <summary> Draw the outlines of the specified rectangle as if a five-point PolyLine protocol request were specified for the rectangle
            For the specified rectangle, this function does not draw a pixel more than once. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The left top corner x-coordinate. <see cref="T:System.Double" /></param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:System.Double" /></param>
            <param name="width"> The rectangle width. <see cref="T:System.Double" /></param>
            <param name="height"> The rectangle height. <see cref="T:System.Double" /></param>
            <remarks> The function uses these GC components: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list.  </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawRectangle2(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Draw the specified rectangle as if a four-point polygon protocol request. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The left top corner x-coordinate. <see cref="T:System.Int32" /></param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:System.Int32" /></param>
            <param name="width"> The rectangle width. <see cref="T:System.Int32" /></param>
            <param name="height"> The rectangle height. <see cref="T:System.Int32" /></param>
            <remarks> The function uses these GC components: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawRectangle2(System.IntPtr,System.IntPtr,System.IntPtr,System.Double,System.Double,System.Double,System.Double)">
            <summary> Draw the specified rectangle as if a four-point polygon protocol request. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The left top corner x-coordinate. <see cref="T:System.Double" /></param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:System.Double" /></param>
            <param name="width"> The rectangle width. <see cref="T:System.Double" /></param>
            <param name="height"> The rectangle height. <see cref="T:System.Double" /></param>
            <remarks> The function uses these GC components: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. </remarks>
        </member>
        <member name="M:X11.X11lib.XDrawRectangle(System.IntPtr,System.IntPtr,System.IntPtr,System.Drawing.Rectangle)">
            <summary> Draw the specified rectangle as if a four-point polygon protocol request. </summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="x11gc">The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle" /> boundin rectangle.</param>
            <remarks>The function uses these GC components: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. </remarks>
        </member>
        <member name="M:X11.X11lib.XFillRectangle(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Fill the specified rectangle as if a four-point FillPolygon protocol request.
            For any given rectangle, XFillRectangle() does not draw a pixel more than once. If rectangles intersect, the intersecting pixels are drawn multiple times. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The left top corner x-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="width"> The rectangle width. <see cref="T:X11.TUint" /></param>
            <param name="height"> The rectangle height. <see cref="T:X11.TUint" /></param>
            <remarks> The function uses these GC components: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. </remarks>
        </member>
        <member name="M:X11.X11lib.XFillRectangle(System.IntPtr,System.IntPtr,System.IntPtr,System.Double,System.Double,System.Double,System.Double)">
            <summary> Fill the specified rectangle as if a four-point FillPolygon protocol request.
            For any given rectangle, XFillRectangle() does not draw a pixel more than once. If rectangles intersect, the intersecting pixels are drawn multiple times. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The left top corner x-coordinate. <see cref="T:System.Double" /></param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:System.Double" /></param>
            <param name="width"> The rectangle width. <see cref="T:System.Double" /></param>
            <param name="height"> The rectangle height. <see cref="T:System.Double" /></param>
            <remarks> The function uses these GC components: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. </remarks>
        </member>
        <member name="M:X11.X11lib.XFillPolygon(System.IntPtr,System.IntPtr,System.IntPtr,X11.XPoint[],System.Int32,X11.XPolygonShape,X11.XCoordinateMode)">
            <summary> Fill the region closed by the specified path. The path is closed automatically if the last point in the list
            does not coincide with the first point. XFillPolygon() does not draw a pixel of the region more than once.
            The fill-rule of the GC controls the filling behavior of self-intersecting polygons.
            This function uses these GC components: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin,
            clip-y-origin, and clip-mask. It also uses these GC mode-dependent components: foreground, background, tile, stipple,
            tile-stipple-x-origin, and tile-stipple-y-origin. </summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="x11gc">The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="points">The <see cref="T:X11.XPoint" />[] array of points, defining the polygon to fill.</param>
            <param name="numPoints">The <see cref="T:System.Int32" /> number of points in the array.</param>
            <param name="shapeComplexity">The shape complexity. You can pass Complex, Convex or Nonconvex.
            * Complex means the path may self-intersect. Note that contiguous coincident points in the path are not treated as self-intersection.
            * Convex means for every pair of points inside the polygon, the line segment connecting them does not intersect the path.
            If known by the client, specifying Convex can improve performance.
            If Convex is specified for a path that is not convex, the graphics results are undefined.
            * Nonconvex means the path does not self-intersect, but the shape is not wholly convex.
            If known by the client, specifying Nonconvex instead of Complex may improve performance.
            If Nonconvex is specified for a self-intersecting path, the graphics results are undefined. <see cref="T:X11.XPolygonShape" /></param>
            <param name="coordMode">The <see cref="T:X11.XCoordinateMode" /> coordinate mode. You can pass CoordModeOrigin or CoordModePrevious.
            CoordModeOrigin treats all coordinates as relative to the origin, and CoordModePrevious treats all coordinates
            after the first as relative to the previous point.</param>
        </member>
        <member name="M:X11.X11lib.XFillArc(System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TUint,X11.TUint,X11.TInt,X11.TInt)">
            <summary> Fill region closed by the infinitely thin path described by the specified arc and, depending on the arc-mode specified in the GC,
            one (ArcChord) or two (ArcPieSlice) line segments. For ArcChord , the single line segment joining the endpoints of the arc is used.
            For ArcPieSlice , the two line segments joining the endpoints of the arc with the center point are used. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11drawable"> The drawable to draw on. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x"> The left top bounding rectangle x-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="y"> The left top bounding rectangle y-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="width"> The bounding rectangle width. <see cref="T:X11.TUint" /></param>
            <param name="height"> The bounding rectangle height. <see cref="T:X11.TUint" /></param>
            <param name="angle1"> The start of the arc relative to the three-o'clock position from the center, in units of degrees * 64. <see cref="T:X11.TInt" /></param>
            <param name="angle2"> The the path and extent of the arc relative to the start of the arc, in units of degrees * 64.  <see cref="T:X11.TInt" /></param>
            <remarks> The function uses these GC components: : function, plane-mask, fill-style, arc-mode, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also uses these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. </remarks>
        </member>
        <member name="M:X11.X11lib.XSupportsLocale">
            <summary>Check if Xlib functions are capable of operating under the current locale.</summary>
            <returns>True, if Xlib functions are capable of operating under the current locale, or false otherwise.<see cref="T:System.Boolean" /></returns>
            <remarks>If it returns False, Xlib locale-dependent functions, for which the XLocaleNotSupported return status is defined,
            will return XLocaleNotSupported. Other Xlib locale-dependent routines will operate in the 'C' locale.</remarks>
        </member>
        <member name="M:X11.X11lib.XSetLocaleModifiers(X11.TChar[])">
            <summary>Set the X modifiers for the current locale setting.</summary>
            <param name="modifiers">The null-terminated <see cref="T:X11.TChar" />[] string of the form '{@category=value}', that is, having zero or more concatenated
            '@category=value' entries, where category is a category name and value is the (possibly empty) setting for that category.
            The values are encoded in the current locale. Category names are restricted to the POSIX Portable Filename Character Set.</param>
            <returns>The string reprecenting the current modifierrs on success (can be empty, if only implementation-dependent default modifiers are activated),
            or IntPtr.Zero if invalid values are given for one or more modifier categories and none of the current modifiers are changed.<see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XQueryTextExtents(System.IntPtr,X11.TInt,X11.TChar[],X11.TInt,X11.TInt@,X11.TInt@,X11.TInt@,X11.XCharStruct@)">
            <summary> Return the bounding box of the specified 8-bit character string in the specified font or the font contained in the specified GC.
            This function queries the X server and, therefore, suffer the round-trip overhead that is avoided by XTextExtents().
            The function returns a XCharStruct structure, whose members are set to the values as follows. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="resourceID"> Specifies either the <see cref="T:X11.TInt" /> font ID or the graphics context ID that contains the font.</param>
            <param name="text"> The <see cref="T:System.SByte" />[] text to measure.</param>
            <param name="length"> The <see cref="T:System.Int32" /> length of the text to measure.</param>
            <param name="direction"> The <see cref="T:X11.TInt" /> direction hint (FontLeftToRight or FontRightToLeft).</param>
            <param name="fontAscent"> The <see cref="T:X11.TInt" /> font ascent.</param>
            <param name="fontDescent"> The <see cref="T:X11.TInt" /> font descent.</param>
            <param name="overall"> The <see cref="T:X11.XCharStruct" /> overall size stored in the specified XCharStruct structure.</param>
            <remarks> The ascent member is set to the maximum of the ascent metrics of all characters in the string.
            The descent member is set to the maximum of the descent metrics.
            The width member is set to the sum of the character-width metrics of all characters in the string.
            For each character in the string, let W be the sum of the character-width metrics of all characters preceding it in the string.
            Let L be the left-side-bearing metric of the character plus W. Let R be the right-side-bearing metric of the character plus W.
            The lbearing member is set to the minimum L of all characters in the string. The rbearing member is set to the maximum R.
            For fonts defined with linear indexing rather than 2-byte matrix indexing, each XChar2b structure is interpreted as a 16-bit number
            with byte1 as the most-significant byte. If the font has no defined default character, undefined characters in the string are taken
            to have all zero metrics. Characters with all zero metrics are ignored.
            If the font has no defined default_char, the undefined characters in the string are also ignored.</remarks>
        </member>
        <member name="M:X11.X11lib.XQueryTextExtents16(System.IntPtr,X11.XID,X11.XChar2b[],X11.TInt,X11.TInt@,X11.TInt@,X11.TInt@,X11.XCharStruct@)">
            <summary> Return the bounding box of the specified 16-bit character string in the specified font or the font contained in the specified GC.
            This function queries the X server and, therefore, suffer the round-trip overhead that is avoided by XTextExtents16().
            The function returns a XCharStruct structure, whose members are set to the values as follows. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="resourceID"> Specifies either the font ID or the graphics context ID that contains the font. <see cref="T:X11.TInt" /></param>
            <param name="text"> The <see cref="T:System.SByte" />[] text to measure.</param>
            <param name="length"> The length of the text to measure. <see cref="T:System.Int32" /></param>
            <param name="direction"> The direction hint (FontLeftToRight or FontRightToLeft). <see cref="T:X11.TInt" /></param>
            <param name="fontAscent"> The font ascent. <see cref="T:X11.TInt" /></param>
            <param name="fontDescent"> The font descent. <see cref="T:X11.TInt" /></param>
            <param name="overall"> The overall size stored in the specified XCharStruct structure. <see cref="T:X11.XCharStruct" /></param>
            <remarks> The ascent member is set to the maximum of the ascent metrics of all characters in the string.
            The descent member is set to the maximum of the descent metrics.
            The width member is set to the sum of the character-width metrics of all characters in the string.
            For each character in the string, let W be the sum of the character-width metrics of all characters preceding it in the string.
            Let L be the left-side-bearing metric of the character plus W. Let R be the right-side-bearing metric of the character plus W.
            The lbearing member is set to the minimum L of all characters in the string. The rbearing member is set to the maximum R.
            For fonts defined with linear indexing rather than 2-byte matrix indexing, each XChar2b structure is interpreted as a 16-bit number
            with byte1 as the most-significant byte. If the font has no defined default character, undefined characters in the string are taken
            to have all zero metrics. Characters with all zero metrics are ignored.
            If the font has no defined default_char, the undefined characters in the string are also ignored.</remarks>
        </member>
        <member name="M:X11.X11lib.XTextWidth(System.IntPtr,X11.TChar[],X11.TInt)">
            <summary> Determine the width of an 8-bit character string.</summary>
            <param name="xFontStruct"> Specify the <see cref="T:System.IntPtr" /> font used for the width computation. </param>
            <param name="text"> Specify the <see cref="T:X11.TChar" />[] character string to measure. </param>
            <param name="length"> Specify the <see cref="T:X11.TInt" /> character count in the specified string. </param>
            <returns> The <see cref="T:X11.TInt" /> width of an 8-bit character string. </returns>
        </member>
        <member name="M:X11.X11lib.XTextWidth16(System.IntPtr,X11.XChar2b[],X11.TInt)">
            <summary> Determine the width of an 16-bit character string.</summary>
            <param name="xFontStruct"> Specify the <see cref="T:System.IntPtr" /> font used for the width computation. </param>
            <param name="text"> Specify the <see cref="T:X11.XChar2b" />[] character string to measure. </param>
            <param name="length"> Specify the <see cref="T:X11.TInt" /> character count in the specified string. </param>
            <returns> The <see cref="T:X11.TInt" /> width of an 16-bit character string. </returns>
        </member>
        <member name="M:X11.X11lib.XDrawString(System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.TChar[],X11.TInt)">
            <summary> Draw a string without cleaning the background.
            Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable.
            The drawable is modified only where the font character has a bit set to 1. </summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable"> The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="x11gc"> The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="x"> The <see cref="T:X11.TInt" /> left top corner x-coordinate.</param>
            <param name="y"> The left top corner y-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="text"> The <see cref="T:System.SByte" />[] text to draw.</param>
            <param name="length"> The <see cref="T:X11.TInt" /> length of the text to draw.</param>
            <remarks> The function uses these GC components: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also use these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin.</remarks>
        </member>
        <member name="M:X11.X11lib.XDrawString16(System.IntPtr,System.IntPtr,System.IntPtr,X11.TInt,X11.TInt,X11.XChar2b[],X11.TInt)">
            <summary> Draw a string without cleaning the background.
            Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable.
            The drawable is modified only where the font character has a bit set to 1. </summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="x11gc">The crapchics context to use for drawing. <see cref="T:System.IntPtr" /></param>
            <param name="x">The leftmost <see cref="T:X11.TInt" /> x-coordinate to start drawing left to right.</param>
            <param name="y">The baseline <see cref="T:X11.TInt" /> y-coordinate to start drawing left to right.</param>
            <param name="text">The <see cref="T:X11.XChar2b" />[] text to draw.</param>
            <param name="length">The <see cref="T:X11.TInt" /> length of the text to draw.</param>
            <remarks>The function uses these GC components: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.
            It also use these GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin.</remarks>
        </member>
        <member name="M:X11.X11lib._XExtentsOfFontSet(X11.XID)">
            <summary>Get the XFontSetExtents structure for the fonts used by the Xmb and Xwc layers for the given font set.</summary>
            <param name="x11fontSet">Specifies the fontset to obtain the maximum extents structure for.<see cref="T:X11.XID" /></param>
            <returns>The font set extents of the indicated font set.<see cref="T:System.IntPtr" /></returns>
            <remarks>The XFontSetExtents structure is owned by Xlib and should not be modified or freed by the client. It will be
            freed by a call to XFreeFontSet with the associated XFontSet. Until freed, its contents will not be modified by Xlib.</remarks>
        </member>
        <member name="M:X11.X11lib.XExtentsOfFontSet(X11.XID)">
            <summary>Get the XFontSetExtents structure for the fonts used by the Xmb and Xwc layers for the given font set.</summary>
            <param name="x11fontSet">Specifies the fontset to obtain the maximum extents structure for.<see cref="T:X11.XID" /></param>
            <returns>The font set extents of the indicated font set.<see cref="T:X11.XFontSetExtents" /></returns>
            <remarks>The XFontSetExtents structure is owned by Xlib and should not be modified or freed by the client. It will be
            freed by a call to XFreeFontSet with the associated XFontSet. Until freed, its contents will not be modified by Xlib.</remarks>
        </member>
        <member name="M:X11.X11lib._XwcTextExtents(X11.XID,X11.TWchar[],X11.TInt,System.IntPtr,System.IntPtr)">
            <summary>Set the components of the specified overallInk and overallLogical arguments to the overall bounding box of the string's image
            and a logical bounding box for spacing purposes.</summary>
            <param name="xFontSet">Specifies the <see cref="T:X11.XID" /> font set.</param>
            <param name="text">Specifies the <see cref="T:X11.TWchar" />[] string.</param>
            <param name="length">Specifies the <see cref="T:X11.TInt" /> number of characters in the string argument.</param>
            <param name="overallInk">Returns the <see cref="T:System.IntPtr" /> overall ink bounding box of the string's image.</param>
            <param name="overallLogical">Returns the <see cref="T:System.IntPtr" /> overall logical bounding box for spacing purposes.</param>
            <returns>Returns the <see cref="T:X11.TInt" /> value returned by XwcTextEscapement(), which is the escapement in pixels.</returns>
        </member>
        <member name="M:X11.X11lib.XwcTextExtents(X11.XID,X11.TWchar[],X11.TInt,X11.XRectangle@,X11.XRectangle@)">
            <summary>Set the components of the specified overallInk and overallLogical arguments to the overall bounding box of the string's image
            and a logical bounding box for spacing purposes.</summary>
            <param name="xFontSet">Specifies the <see cref="T:X11.XID" /> font set.</param>
            <param name="text">Specifies the <see cref="T:X11.TWchar" />[] string.</param>
            <param name="length">Specifies the <see cref="T:X11.TInt" /> number of characters in the string argument.</param>
            <param name="overallInk">Returns the <see cref="T:X11.XRectangle" /> overall ink bounding box of the string's image.</param>
            <param name="overallLogical">Returns the <see cref="T:X11.XRectangle" /> overall logical bounding box for spacing purposes.</param>
            <returns>Returns the <see cref="T:X11.TInt" /> value returned by XwcTextEscapement(), which is the escapement in pixels.</returns>
        </member>
        <member name="M:X11.X11lib.XwcTextEscapement(X11.XID,X11.TWchar[],X11.TInt)">
            <summary>Obtain the escapement of text.</summary>
            <param name="xFontSet">Specifies the <see cref="T:X11.XID" /> font set.</param>
            <param name="text">Specifies the <see cref="T:X11.TWchar" />[] string.</param>
            <param name="length">Specifies the <see cref="T:X11.TInt" /> number of characters in the string argument.</param>
            <returns>The <see cref="T:X11.TInt" /> escapement in pixels of the specified string as a value, using the fonts loaded for the specified font set.
            The escapement is the distance in pixels in the primary draw direction from the drawing origin to the origin of the next character
            to be drawn, assuming that the rendering of the next character is not dependent on the supplied string.</returns>
        </member>
        <member name="M:X11.X11lib.XmbDrawString(System.IntPtr,System.IntPtr,X11.XID,System.IntPtr,X11.TInt,X11.TInt,System.SByte[],X11.TInt)">
            <summary>Draw the specified text with the foreground pixel.
            When the fontSet has missing charsets, each unavailable character is drawn with the default string returned by XCreateFontSet.
            The behavior for an invalid codepoint is undefined.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="fontSet">The <see cref="T:X11.XID" /> fontset to use for drawing.</param>
            <param name="x11gc">The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="x">The leftmost <see cref="T:X11.TInt" /> x-coordinate to start drawing left to right.</param>
            <param name="y">The baseline <see cref="T:X11.TInt" /> y-coordinate to start drawing left to right.</param>
            <param name="text">The <see cref="T:System.SByte" />[] text to draw.</param>
            <param name="length">The <see cref="T:X11.TInt" /> length of the text to draw (as number of bytes).</param>
        </member>
        <member name="M:X11.X11lib.XwcDrawString(System.IntPtr,System.IntPtr,X11.XID,System.IntPtr,X11.TInt,X11.TInt,X11.TWchar[],X11.TInt)">
            <summary>Draw the specified text with the foreground pixel.
            When the fontSet has missing charsets, each unavailable character is drawn with the default string returned by XCreateFontSet.
            The behavior for an invalid codepoint is undefined.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="fontSet">The <see cref="T:X11.XID" /> fontset to use for drawing.</param>
            <param name="x11gc">The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="x">The leftmost <see cref="T:X11.TInt" /> x-coordinate to start drawing left to right.</param>
            <param name="y">The baseline <see cref="T:X11.TInt" /> y-coordinate to start drawing left to right.</param>
            <param name="text">The <see cref="T:X11.TWchar" />[] text to draw.</param>
            <param name="length">The length of the text to draw (as number of wchars).<see cref="T:X11.TInt" /></param>
        </member>
        <member name="M:X11.X11lib.Xutf8DrawString(System.IntPtr,System.IntPtr,X11.XID,System.IntPtr,X11.TInt,X11.TInt,System.SByte[],X11.TInt)">
            <summary>Draw the specified text with the foreground pixel.
            When the fontSet has missing charsets, each unavailable character is drawn with the default string returned by XCreateFontSet.
            The behavior for an invalid codepoint is undefined.</summary>
            <param name="x11display">The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable to draw on.</param>
            <param name="fontSet">The <see cref="T:X11.XID" /> fontset to use for drawing.</param>
            <param name="x11gc">The <see cref="T:System.IntPtr" /> grapchics context to use for drawing.</param>
            <param name="x">The leftmost <see cref="T:X11.TInt" /> x-coordinate to start drawing left to right.</param>
            <param name="y">The baseline <see cref="T:X11.TInt" /> y-coordinate to start drawing left to right.</param>
            <param name="text">The <see cref="T:System.SByte" />[] text to draw.</param>
            <param name="length">The <see cref="T:X11.TInt" /> length of the text to draw (as number of bytes).</param>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMPreeditArea">
            <summary>The client must provide geometry management of an area in which the input method can do off-the-spot pre-editing.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMPreeditCallbacks">
            <summary>The client must provide pre-edit callback procedures so that the input method can cooperate with the application to perform on-the-spot pre-editing.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMPreeditPosition">
            <summary>The client must provide the location of the insertion cursor so that the input method can do over-the-spot pre-editing.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMPreeditNothing">
            <summary>The input method can perform root window pre-editing with no geometry management provided by the client.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMPreeditNone">
            <summary>The input method does not do any pre-editing, or does not display any pre-edit data.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMStatusArea">
            <summary>The client must provide geometry management of an area in which the input method can display status values.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMStatusCallbacks">
            <summary>The client must provide status callback procedures so that the input method can request the application to display status data when needed.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMStatusNothing">
            <summary>The input method can display status information in the root window with no geometry management provided by the client.</summary>
        </member>
        <member name="F:X11.X11lib.XimStyle.XIMStatusNone">
            <summary>The input method does not display any status information.</summary>
        </member>
        <member name="F:X11.X11lib._XIMStyles.count_styles">
            <summary>The number of styles in the list.</summary>
        </member>
        <member name="F:X11.X11lib._XIMStyles.supported_styles">
            <summary>The list of supported styles.</summary>
        </member>
        <member name="F:X11.X11lib._XIMStyles.Zero">
            <summary>Represents a <see cref="T:X11.X11lib._XIMStyles" /> that has been initialized to zero.</summary>
        </member>
        <member name="T:X11.X11lib.LookupStringStatus">
            <summary> The possible X*LookupString() status. </summary>
        </member>
        <member name="F:X11.X11lib.LookupStringStatus.XBufferOverflow">
            <summary> X*LookupString() result buffer too small. </summary>
        </member>
        <member name="F:X11.X11lib.LookupStringStatus.XLookupNone">
            <summary> X*LookupString() found nothing to process. </summary>
        </member>
        <member name="F:X11.X11lib.LookupStringStatus.XLookupChars">
            <summary> X*LookupString() provides character to process. </summary>
        </member>
        <member name="F:X11.X11lib.LookupStringStatus.XLookupKeySym">
            <summary> X*LookupString() provides key sym (special keys) to process. </summary>
        </member>
        <member name="F:X11.X11lib.LookupStringStatus.XLookupBoth">
            <summary> X*LookupString() provides character and key sym (special keys) to process. </summary>
        </member>
        <member name="M:X11.X11lib.XOpenIM(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary> Open an input method, matching the current locale and modifiers specification.
            Current locale and modifiers are bound to the input method at opening time.
            The locale associated with an input method cannot be changed dynamically.
            This implies that the strings returned by XmbLookupString or XwcLookupString,
            for any input context affiliated with a given input method will be encoded in the locale
            current at the time the input method is opened.
            XOpenIM will identify a default input method corresponding to the current locale.
            That default can be modified using XSetLocaleModifiers for the input method modifier. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="resourceDb"> Specifies a pointer to the resource database. <see cref="T:System.IntPtr" /></param>
            <param name="resName"> Specifies the full resource name of the application. <see cref="T:System.String" /></param>
            <param name="resClass"> Specifies the full class name of the application. <see cref="T:System.String" /></param>
            <returns> The input method on success, or IntPrt.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
            <remarks> The resourceDb argument is the resource database to be used by the input method for looking up resources
            that are private to the input method. It is not intended that this database be used to look up values
            that can be set as IC values in an input context. If db is NULL, no database is passed to the input method. </remarks>
            <remarks> The resName and resClass arguments specify the resource name and class of the application.
            They are intended to be used as prefixes by the input method when looking up resources that are common to all input
            contexts that may be created for this input method. The characters used for resource names and classes must be in the
            X Portable Character Set. The resources looked up are not fully specified if resName or resClass is IntPrt.Zero. </remarks>
        </member>
        <member name="M:X11.X11lib.XCloseIM(System.IntPtr)">
            <summary> Close the specified input method. </summary>
            <param name="inputMethod"> The input method to close. <see cref="T:System.IntPtr" /></param>
            <returns> The result status. <see cref="T:X11.TInt" /></returns>
        </member>
        <member name="M:X11.X11lib._XGetIMValues(System.IntPtr,System.String,System.IntPtr,System.IntPtr)">
            <summary> Query properties or features of the specified input method, using a variable argument list. </summary>
            <param name="inputMethod"> The input method to get properties or features for. <see cref="T:System.IntPtr" /></param>
            <param name="valueName"> The value name of the property or feature to query for. <see cref="T:System.String" /></param>
            <param name="valueReturn"> The property or feature query result. <see cref="T:System.IntPtr" /></param>
            <param name="end"> The variable argument list end (IntPtr.Zero). <see cref="T:System.IntPtr" /></param>
            <returns> IntPtr.Zero on success, or the name of the first argument that could not be set. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XGetIMValueSupportedStyles(System.IntPtr,X11.X11lib.XimStyle[]@)">
            <summary> Query the input method's supported styles. </summary>
            <param name="inputMethod"> The <see cref="T:System.IntPtr" /> input method to query the supported styles for.</param>
            <param name="valueReturn"> The <see cref="T:X11.X11lib.XimStyle" />[] supported styles on successful query.</param>
            <returns>Returns <see cref="T:System.Boolean" /><c>true</c> on successful query, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:X11.X11lib._XCreateIC(System.IntPtr,System.String,System.IntPtr,System.String,System.IntPtr,System.IntPtr)">
            <summary> Create an input context within the specified input method, using a variable argument list. </summary>
            <param name="inputMethod"> The input method to create an input context for. <see cref="T:System.IntPtr" /></param>
            <param name="valueName1"> The value name of the first variable argument. <see cref="T:System.String" /></param>
            <param name="value1"> The value of the first variable argument. <see cref="T:System.IntPtr" /></param>
            <param name="valueName2"> The value name of the second variable argument. <see cref="T:System.String" /></param>
            <param name="value2"> The value of the second variable argument. <see cref="T:System.IntPtr" /></param>
            <param name="end"> The variable argument list end (IntPtr.Zero). <see cref="T:System.IntPtr" /></param>
            <returns> The input context on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XCreateIC(System.IntPtr,System.Int64,System.IntPtr)">
            <summary> Create an input context within the specified input method. </summary>
            <param name="inputMethod"> The input method to create an input context for. <see cref="T:System.IntPtr" /></param>
            <param name="inputStyle"> The input style to use. <see cref="T:System.Int64" /></param>
            <param name="clientWindow"> The client window to create an input context for. <see cref="T:System.IntPtr" /></param>
            <returns> The input context on succes, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XDestroyIC(System.IntPtr)">
            <summary> Destroy the specified input context. </summary>
            <param name="inputContext"> The input context to destroy. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib._XGetICValues(System.IntPtr,System.String,System.IntPtr,System.IntPtr)">
            <summary> Query input context attributes, using a variable argument list. </summary>
            <param name="inputContext"> The input context to get values for. <see cref="T:System.IntPtr" /></param>
            <param name="valueName"> The value name of the first variable argument. <see cref="T:System.String" /></param>
            <param name="valueReturn"> The value of the first variable argument. <see cref="T:System.IntPtr" /></param>
            <param name="end"> The variable argument list end (IntPtr.Zero). <see cref="T:System.IntPtr" /></param>
            <returns> The input context on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
            <returns> IntPtr.Zero on success, or the name of the first argument that could not be set. <see cref="T:System.IntPtr" /></returns>
        </member>
        <member name="M:X11.X11lib.XGetICValueFilterEvents(System.IntPtr,X11.TLong@,System.IntPtr)">
            <summary> Query input context attributes. </summary>
            <param name="inputContext"> The input context to get values for. <see cref="T:System.IntPtr" /></param>
            <param name="filterEvents"> The filter events to query the supported filter events for. <see cref="T:X11.TLong" /></param>
            <param name="clientWindow"> The client window to query the supported filter events for. <see cref="T:System.IntPtr" /></param>
            <returns> True on successful query, or false otherwise. <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.X11lib.XSetICFocus(System.IntPtr)">
            <summary> Allow a client to notify an input method that the focus window attached to the specified input
            context has received keyboard focus. The input method should take action to provide appropriate feedback.
            Complete feedback specification is a matter of user interface policy.
            Calling XSetICFocus does not affect the focus window value. </summary>
            <param name="inputContext"> The input contect to set the focus for.  <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XUnsetICFocus(System.IntPtr)">
            <summary>  Allow a client to notify an input method that the specified input context has lost the keyboard
            focus and that no more input is expected on the focus window attached to that input context.
            The input method should take action to provide appropriate feedback. Complete feedback specification
            is a matter of user interface policy.
            Calling XUnsetICFocus does not affect the focus window value; the client may still receive events from
            the input method that are directed to the focus window. </summary>
            <param name="inputContext"> The input contect to unset the focus for.  <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XwcLookupString(System.IntPtr,X11.XKeyEvent@,X11.TWchar[],X11.TInt,X11.TUint@,X11.TInt@)">
            <summary>Return the string from the input method specified in the bufferReturn argument.
            If no string is returned, the bufferReturn argument is unchanged.</summary>
            <param name="inputContext">The <see cref="T:System.IntPtr" /> input context to use.</param>
            <param name="evt">The <see cref="T:X11.XKeyEvent" /> key event to be used.</param>
            <param name="bufferReturn">The <see cref="T:X11.TWchar" />[] string returned (if any) from the input method.</param>
            <param name="bufferLength">The <see cref="T:X11.TInt" /> space available in the return buffer.</param>
            <param name="keysym">The <see cref="T:X11.TUint" /> KeySym (encoding of a symbol on the cap of a key) computed from the event if this argument is not IntPtr.Zero.</param>
            <param name="status">Returns a <see cref="T:X11.TInt" /> value indicating what kind of data is returned.</param>
            <returns>The <see cref="T:X11.TInt" /> length of the string in characters.</returns>
            <remarks>Typically the KeyPress event succeeds and the KeyRelease event fails. The behavior when passed a KeyRelease event is undefined.</remarks>
        </member>
        <member name="M:X11.X11lib.XListFonts(System.IntPtr,System.String,X11.TInt,X11.TInt@)">
            <summary> Return an array of available font names (as controlled by the font search path; see XSetFontPath()) that
            match the string passed to the pattern argument. The pattern string can contain any characters, but each asterisk (*)
            is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="pattern"> The font name pattern, to apply to the requested fontlist. <see cref="T:System.String" /></param>
            <param name="maxNames"> The maximum number of font names to be returned. <see cref="T:X11.TInt" /></param>
            <param name="returnedNames"> The actual number of returned font names. <see cref="T:X11.TInt" /></param>
            <returns> The requested list of font names on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
            <remarks> Each returned string is null-terminated. The client should call XFreeFontNames() when finished with the result to free the memory. </remarks>
        </member>
        <member name="M:X11.X11lib.XFreeFontNames(System.IntPtr)">
            <summary> Free the array and strings returned by XListFonts() or XListFontsWithInfo(). </summary>
            <param name="fontNameArray"> The array of font name strings to free. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XLoadFont(System.IntPtr,System.String)">
            <summary> Load the specified font and returns its associated font resource id. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="name"> The name (pattern) of the font, which is a null-terminated string. <see cref="T:System.String" /></param>
            <returns> The font ID on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
            <remarks> To free a font that is no longer needed, use XFreeFont(). </remarks>
        </member>
        <member name="M:X11.X11lib.XQueryFont(System.IntPtr,X11.XID)">
            <summary> Query a pointer to the XFontStruct structure, which contains information associated with the font. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="fontID"> The font ID (e. g. from XLoadFont()). <see cref="T:X11.XID" /></param>
            <returns> The XFontStruct structure on success, or IntPtr.Zero otherwise. <see cref="T:System.IntPtr" /></returns>
            <remarks> To free this data, use XFreeFontInfo(). </remarks>
        </member>
        <member name="M:X11.X11lib.XLoadQueryFont(System.IntPtr,System.String)">
            <summary>Load the specified font and returns its appropriate XFontStruct structure.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="name">The name (pattern) of the font, which is a null-terminated string.<see cref="T:System.String" /></param>
            <returns>The XFontStruct structure on success, or IntPtr.Zero otherwise.<see cref="T:System.IntPtr" /></returns>
            <remarks>To free a font that is no longer needed, use XFreeFont().</remarks>
        </member>
        <member name="M:X11.X11lib.XUnloadFont(System.IntPtr,X11.XID)">
            <summary>Delete the association between the font resource id and the specified font.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="fontResourceId">The font resource id to delete the association to the font.<see cref="T:X11.XID" /></param>
        </member>
        <member name="M:X11.X11lib.XFreeFont(System.IntPtr,System.IntPtr)">
            <summary>Delete the association between the font resource id and the specified font and free the XFontStruct structure.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="fontResourceId">The font resource id to delete the association to the font.<see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XSetFont(System.IntPtr,System.IntPtr,X11.XID)">
            <summary> Associate a font to the indicated grapchics context. </summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="x11gc"> The grapchics context to associate the font with. <see cref="T:System.IntPtr" /></param>
            <param name="fontResourceId"> The font resource Id to associate to the grapchics context. <see cref="T:X11.XID" /></param>
        </member>
        <member name="M:X11.X11lib.XFreeFontInfo(System.IntPtr,System.IntPtr,X11.TInt)">
            <summary> Free a font structure or an array of font structures, and optionally an array of font names.
            If NULL is passed for names, no font names are freed. </summary>
            <param name="names"> The list of font names to free optionally. <see cref="T:System.IntPtr" /></param>
            <param name="freeXFontStruct"> The font structure to free. <see cref="T:System.IntPtr" /></param>
            <param name="nameCount"> The number of font names to free optionally. <see cref="T:X11.TInt" /></param>
        </member>
        <member name="M:X11.X11lib.XGetFontProperty(System.IntPtr,System.IntPtr,X11.TUlong@)">
            <summary> Return the value of the specified font property, identified by an atom for that property. </summary>
            <param name="xFontStruct"> Specify the <see cref="T:System.IntPtr" /> storage associated with the font. </param>
            <param name="atom"> Specify the <see cref="T:System.IntPtr" /> atom for the property name you want returned. </param>
            <param name="valueReturn"> Returns the <see cref="T:X11.TUlong" /> value of the font property. </param>
            <returns> Returns <see cref="T:X11.TBoolean" /><c>false</c> if the property was not defined, or <c>true</c> otherwise.</returns>
            <remarks> A set of predefined atoms exists for font properties, which can be found in X11/Xatom.h.
            This set contains the standard properties associated with a font. Although it is not guaranteed, it is likely
            that the predefined font properties will be present. </remarks>
        </member>
        <member name="M:X11.X11lib.XCreateFontSet(System.IntPtr,System.String,System.IntPtr@,X11.TInt@,System.IntPtr)">
            <summary>Create a font set for the specified display. The font set is bound to the current locale when XCreateFontSet () is called.
            The font set may be used in subsequent calls to obtain font and character information and to image text in the locale of the font set.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="baseFontNameList">The list of base font names that Xlib uses to load the fonts needed for the locale.
            The base font names are a comma-separated list. The string is null-terminated and is assumed to be in the Host Portable Character Encoding; otherwise,
            the result is implementation dependent. White space immediately on either side of a separating comma is ignored.<see cref="T:System.String" /></param>
            <param name="missingCharSetList">Returns the missing charsets.<see cref="T:System.IntPtr" /></param>
            <param name="count">Returns the number of missing charsets.<see cref="T:System.Int32" /></param>
            <param name="terminator">Returns the string drawn for missing charsets.<see cref="T:System.IntPtr" /></param>
            <returns>The created font set for the specified display.<see cref="T:X11.XID" /></returns>
        </member>
        <member name="M:X11.X11lib._XFontsOfFontSet(X11.XID,System.IntPtr@,System.IntPtr@)">
            <summary>Get a list of one or more XFontStructs structures and font names for the fonts used by the Xmb and Xwc layers for the given font set.</summary>
            <param name="x11fontSet">Specifies the fontset to obtain ne or more XFontStructs and font names for.<see cref="T:X11.XID" /></param>
            <param name="fontStructArray">Returns the list of XFontStructs structures.<see cref="T:System.IntPtr" /></param>
            <param name="fontNameArray">Returns the list of font names.<see cref="T:System.IntPtr" /></param>
            <returns>The number of XFontStruct structures and font names.<see cref="T:X11.TInt" /></returns>
            <remarks>A list of pointers to the XFontStruct structures is returned to fontStructArray.
            A list of pointers to null-terminated, fully specified font name strings in the locale of the font set is returned to fontNameArray.
            The fontNameArray order corresponds to the fontStructArray order. </remarks>
        </member>
        <member name="M:X11.X11lib.XFontsOfFontSet(X11.XID,X11.XFontStruct[]@,System.String[]@)">
            <summary>Get a list of one or more XFontStructs structures and font names for the fonts used by the Xmb and Xwc layers for the given font set.</summary>
            <param name="x11fontSet">Specifies the <see cref="T:X11.XID" /> fontset to obtain ne or more XFontStructs and font names for.</param>
            <param name="fontStructArray">Returns the <see cref="T:X11.XFontStruct" />[] list of XFontStructs structures.</param>
            <param name="fontNameArray">Returns the <see cref="T:System.IntPtr" /> list of font names.</param>
            <returns>The <see cref="T:X11.TInt" /> number of XFontStruct structures and font names.</returns>
            <remarks>A list of pointers to the XFontStruct structures is returned to fontStructArray.
            A list of pointers to null-terminated, fully specified font name strings in the locale of the font set is returned to fontNameArray.
            The fontNameArray order corresponds to the fontStructArray order. </remarks>
        </member>
        <member name="M:X11.X11lib.XFreeFontSet(System.IntPtr,X11.XID)">
            <summary>Free a font set.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="fontset">Specifies the font set to free.<see cref="T:X11.XID" /></param>
            <remarks>Frees the associated base font name list, font name list, XFontStruct list, and XFontSetExtents(),  if any, as well.</remarks>
        </member>
        <member name="M:X11.X11lib._XListExtensions(System.IntPtr,X11.TInt@)">
            <summary>Return a list (char**) of all extensions supported by the server.
            If the data returned by the server is in the Latin Portable Character Encoding, then the returned strings
            are in the Host Portable Character Encoding. Otherwise, the result is implementation dependent. </summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="numExtensions">The number of extensions listed.</param>
            <returns>The (char**) list of extension names on success.<see cref="T:System.IntPtr" /></returns>
            <remarks>Don't forget to call XFreeExtensionList().</remarks>
        </member>
        <member name="M:X11.X11lib.XListExtensions(System.IntPtr,System.String@)">
            <summary>Return a list (line-break separated) of all extensions supported by the server.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="nameExtensions">The list (line-break separated) of all extensions supported by the server.<see cref="T:System.String" /></param>
            <returns>The (char**) list of extension names on success.<see cref="T:System.IntPtr" /></returns>
            <remarks>Don't forget to call XFreeExtensionList().</remarks>
        </member>
        <member name="M:X11.X11lib.XFreeExtensionList(System.IntPtr)">
            <summary>Free the memory allocated by XListExtensions(). </summary>
            <param name="listExtensions">Specifies the list of extension names. <see cref="T:System.IntPtr" /></param>
        </member>
        <member name="M:X11.X11lib.XQueryExtension(System.IntPtr,System.String,X11.TInt@,X11.TInt@,X11.TInt@)">
            <summary>Determine whether the named extension is present.</summary>
            <param name="x11display">The display pointer, that specifies the connection to the X server.<see cref="T:System.IntPtr" /></param>
            <param name="name">The extension name.<see cref="T:System.String" /></param>
            <param name="majorOpcode">The major opcode for the indicated extension on success, or zero otherwise.
            Any minor opcode and the request formats are specific to the extension.<see cref="T:X11.TInt" /></param>
            <param name="firstEvent">If the extension involves additional event types, the base event type code on success, or zero otherwise.
            The format of the events is specific to the extension.<see cref="T:X11.TInt" />T</param>
            <param name="firstError">If the extension involves additional error codes, the base error code on success, or zero otherwise.
            The format of additional data in the errors is specific to the extension.<see cref="T:X11.TInt" /></param>
            <returns>True if the indicated extension is not present, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.X11lib.setlocale(X11.TInt,X11.TChar[])">
            <summary>This function is used to set or query the program's current locale.</summary>
            <param name="category">Determine which <see cref="T:X11.TInt" /> parts of the program's current locale should be modified.</param>
            <param name="locale">The <see cref="T:X11.TChar" />[] parts of the program's current locale to be set.</param>
            <returns>The <see cref="T:System.IntPtr" /> current (new) locale on success, or IntPtr.Zero on a wrong/unsupported 'locale' string.
            The return string is owned by the runtime library - DO NOT FREE OR MANIPULATE it.</returns>
            <remarks>The effects, a locale has:
            - What multibyte character sequences are valid, and how they are interpreted.
            - Classification of which characters in the local character set are considered alphabetic, and upper- and lower-case conversion conventions.
            - The collating sequence for the local language and character set (see section Collation Functions).
            - Formatting of numbers and currency amounts.
            - Formatting of dates and times (see section Formatting Date and Time).
            - What language to use for output, including error messages. (The C library doesn't yet help you implement this.)
            - What language to use for user answers to yes-or-no questions.
            - What language to use for more complex user input. (The C library doesn't yet help you implement this.)
            See 'http://www.cs.utah.edu/dept/old/texinfo/glibc-manual-0.02/library_7.html' for details.</remarks>
        </member>
        <member name="M:X11.X11lib.malloc(X11.TUint,X11.TUint)">
            <summary> Allocate unused space for an object whose size in bytes is specified by size and whose value is unspecified.
            The order and contiguity of storage allocated by successive calls to malloc() is unspecified. </summary>
            <param name="elements"> The <see cref="T:X11.TUint" /> number of elements to allocate an array for.</param>
            <param name="elementSize"> The <see cref="T:X11.TUint" /> size of the object to allocate space for in bytes.</param>
            <returns> Upon successful completion with size not equal to 0, malloc() shall return a  <see cref="T:System.IntPtr" />  pointer to the
            allocated space. If size is 0, either a null pointer or a unique pointer that can be successfully passed to free() shall be returned.
            Otherwise, it shall return a null pointer and set *** errno *** to indicate the error.</returns>
        </member>
        <member name="M:X11.X11lib.calloc(X11.TUint,X11.TUint)">
            <summary> Allocate unused space for an array of nelem elements each of whose size in bytes is elsize.
            The space shall be initialized to all bits 0. The order and contiguity of storage allocated by successive
            calls to calloc() is unspecified. </summary>
            <param name="elements"> The number of elements to allocate an array for. <see cref="T:X11.TUint" /></param>
            <param name="elementSize"> The size of any element to allocate an array for in bytes. <see cref="T:X11.TUint" /></param>
            <returns> Upon successful completion with both nelem and elsize non-zero, calloc() shall return a <see cref="T:System.IntPtr" />
            pointer to the allocated space. If either nelem or elsize is 0, then either a null pointer or a unique pointer
            value that can be successfully passed to free() shall be returned. Otherwise, it shall return a null pointer
            and set *** errno *** to indicate the error.</returns>
        </member>
        <member name="M:X11.X11lib.free(System.IntPtr)">
            <summary> Frees the space pointed to by pointer to be deallocated; that is, made available for further allocation.
            If pointer is a null pointer, no action shall occur.</summary>
            <param name="pointer">The <see cref="T:System.IntPtr" /> pointer to the space to deallocate.</param>
        </member>
        <member name="T:X11.XGCValues">
            <summary>The <see cref="T:X11.XGCValues" /> structure provides data transfer for XCreateGC(), XCopyGC(),
            XChangeGC(), XGetGCValues(), XFreeGC() and XGContextFromGC() calls.</summary>
            <remarks>See: http://www.sbin.org/doc/Xlib/chapt_05.html</remarks>
        </member>
        <member name="F:X11.XGCValues.function">
            <summary>The logical operation.</summary>
        </member>
        <member name="F:X11.XGCValues.plane_mask">
            <summary>The plane mask.</summary>
        </member>
        <member name="F:X11.XGCValues.foreground">
            <summary>The foreground pixel.</summary>
        </member>
        <member name="F:X11.XGCValues.background">
            <summary>The background pixel.</summary>
        </member>
        <member name="F:X11.XGCValues.line_width">
            <summary>The line width (in pixels).</summary>
        </member>
        <member name="F:X11.XGCValues.line_style">
            <summary>The line style.</summary>
        </member>
        <member name="F:X11.XGCValues.cap_style">
            <summary>The cap style.</summary>
        </member>
        <member name="F:X11.XGCValues.join_style">
            <summary>The join style.</summary>
        </member>
        <member name="F:X11.XGCValues.fill_style">
            <summary>The fill style.</summary>
        </member>
        <member name="F:X11.XGCValues.fill_rule">
            <summary>The fill rule.</summary>
        </member>
        <member name="F:X11.XGCValues.arc_mode">
            <summary>The arc modee.</summary>
        </member>
        <member name="F:X11.XGCValues.tile">
            <summary>The tile pixmap for tiling operations.</summary>
        </member>
        <member name="F:X11.XGCValues.stipple">
            <summary>The stipple 1 plane pixmap for stippling.</summary>
        </member>
        <member name="F:X11.XGCValues.ts_x_origin">
            <summary>The offset for tile or stipple operations.</summary>
        </member>
        <member name="F:X11.XGCValues.ts_y_origin">
            <summary>The offset for tile or stipple operations.</summary>
        </member>
        <member name="F:X11.XGCValues.font">
            <summary>The default text font for text operations.</summary>
        </member>
        <member name="F:X11.XGCValues.subwindow_mode">
            <summary>The subwindow mode.</summary>
        </member>
        <member name="F:X11.XGCValues.graphics_exposures">
            <summary>The should exposures be generated flag.</summary>
        </member>
        <member name="F:X11.XGCValues.clip_x_origin">
            <summary>The origin for clipping.</summary>
        </member>
        <member name="F:X11.XGCValues.clip_y_origin">
            <summary>The origin for clipping.</summary>
        </member>
        <member name="F:X11.XGCValues.clip_mask">
            <summary>The clipp mask.</summary>
        </member>
        <member name="F:X11.XGCValues.dash_offset">
            <summary>The dash offset.</summary>
        </member>
        <member name="F:X11.XGCValues.dashes">
            <summary>The dashes.</summary>
        </member>
        <member name="T:X11.XGCValueMask">
            <summary>The <see cref="T:X11.XGCValueMask" /> enumeration specifies the flags, that define which GC value(s)
            is/are to apply (to retrieve or set data via the <see cref="T:X11.XGCValues" /> structure).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCFunction">
            <summary>Apply the logical operation (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCPlaneMask">
            <summary>Apply the plane mask (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCForeground">
            <summary>Apply the foreground pixel (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCBackground">
            <summary>Apply the background pixel (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCLineWidth">
            <summary>Apply the line width in pixels (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCLineStyle">
            <summary>Apply the line style (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCCapStyle">
            <summary>Apply the cap style (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCJoinStyle">
            <summary>Apply the join style (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCFillStyle">
            <summary>Apply the fill style (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCFillRule">
            <summary>Apply thefill rule (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCTile">
            <summary>Apply the tile pixmap for tiling operations (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCStipple">
            <summary>Apply the stipple 1 plane pixmap for stippling (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCTileStipXOrigin">
            <summary>Apply the offset for tile or stipple operations (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCTileStipYOrigin">
            <summary>Apply the offset for tile or stipple operations (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCFont">
            <summary>Apply the default text font for text operations (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCSubwindowMode">
            <summary>Apply the subwindow mode (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCGraphicsExposures">
            <summary>Apply the benerate graphics exposure (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCClipXOrigin">
            <summary>Apply the origin for clipping (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCClipYOrigin">
            <summary>Apply the origin for clipping (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCClipMask">
            <summary>Apply the clip mask (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCDashOffset">
            <summary>Apply the dash offset (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCDashList">
            <summary>Apply the dash list (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XGCValueMask.GCArcMode">
            <summary>Apply the arc mode (to retrieve or set data).</summary>
        </member>
        <member name="T:X11.XGCJoinStyle">
            <summary>The join-style defines how corners are drawn for wide lines.</summary>
            <remarks>See: http://www.sbin.org/doc/Xlib/chapt_05.html</remarks>
        </member>
        <member name="F:X11.XGCJoinStyle.JoinMiter">
            <summary>The outer edges of two lines extend to meet at an angle. However, if the angle is less than 11 degrees, then a JoinBevel join-style is used instead.</summary>
            <remarks>   END of two joined lines with 4px width and 45° angle
            ##########################/
            ######################/XX
            #################/XXXX
            #############/XXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            </remarks>
        </member>
        <member name="F:X11.XGCJoinStyle.JoinRound">
            <summary>The corner is a circular arc with the diameter equal to the line-width, centered on the joinpoint. </summary>
            <remarks>   END of two joined lines with 4px width and 45° angle
            ##############
            ##############XX
            ##############XXXX
            #############XXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            </remarks>
        </member>
        <member name="F:X11.XGCJoinStyle.JoinBevel">
            <summary>The corner has CapButt endpoint styles with the triangular notch filled.</summary>
            <remarks>   END of two joined lines with 4px width and 45° angle
            #########\
            ###########\
            ############X\
            ############XXX\
            XXXXXXX\
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            XXXXXXXX
            </remarks>
        </member>
        <member name="T:X11.XGCLineStyle">
            <summary>The line-style defines which sections of a line are drawn.</summary>
            <remarks>See: http://www.sbin.org/doc/Xlib/chapt_05.html</remarks>
        </member>
        <member name="F:X11.XGCLineStyle.LineSolid">
            <summary>The full path of the line is drawn.</summary>
        </member>
        <member name="F:X11.XGCLineStyle.LineOnOffDash">
            <summary>Only the even dashes are drawn, and cap-style applies to all internal ends of the individual dashes,
            except CapNotLast is treated as CapButt.</summary>
        </member>
        <member name="F:X11.XGCLineStyle.LineDoubleDash">
            <summary>The full path of the line is drawn, but the even dashes are filled differently than the odd dashes
            (see fill-style) with CapButt style used where even and odd dashes meet. Typically the dashes are drawn with
            the foreground pixel value, gaps are drawn with the background pixel values.</summary>
        </member>
        <member name="T:X11.XGCFunction">
            <summary>The <see cref="T:X11.XGCFunction" /> enumeration specifies the possible raster operations.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXclear">
            <summary>The result is always 0, independent from src and dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXand">
            <summary>The result is the logical combination of src <c>AND</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXandReverse">
            <summary>The result is the logical combination of src <c>AND NOT</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXcopy">
            <summary>The result is identical to the src.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXandInverted">
            <summary>The result is the logical combination of <c>NOT</c> src <c>AND</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXnoop">
            <summary>The result is identical to the dst/leaves the target unchanged.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXxor">
            <summary>The result is the logical combination of src <c>XOR</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXor">
            <summary>The result is the logical combination of src <c>OR</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXnor">
            <summary>The result is the logical combination of <c>NOT</c> src <c>AND NOT</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXequiv">
            <summary>The result is the logical combination of <c>NOT</c> src <c>XOR</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXinvert">
            <summary>The result is the logical calculation <c>NOT</c> dst, means invertation of dst values.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXorReverse">
            <summary>The result is the logical combination of src <c>OR NOT</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXcopyInverted">
            <summary>The result is the logical calculation <c>NOT</c> src, means invertation of src values.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXorInverted">
            <summary>The result is the logical combination of <c>NOT</c> src <c>OR</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXnand">
            <summary>The result is the logical combination of <c>NOT</c> src <c>OR NOT</c> dst.</summary>
        </member>
        <member name="F:X11.XGCFunction.GXset">
            <summary>The result is always 1, independent from src and dst.</summary>
        </member>
        <member name="T:X11.XGCFillStyle">
            <summary>Specify how to fill text and polygon [e.g. by XDrawText(), XDrawText16(), XFillRectangle(), XFillPolygon(), and XFillArc()],
            how to draw lines [e.g. with XDrawLine(), XDrawSegments(), XDrawRectangle(), XDrawArc()] and
            to draw even dashes of a dashed line [with line-style LineOnOffDash, LineDoubleDash].</summary>
        </member>
        <member name="F:X11.XGCFillStyle.FillSolid">
            <summary>Fill with the foreground color.</summary>
        </member>
        <member name="F:X11.XGCFillStyle.FillTiled">
            <summary>Fill with a tile bitmap.</summary>
        </member>
        <member name="F:X11.XGCFillStyle.FillStippled">
            <summary>Fill with foreground masked by stipple.</summary>
        </member>
        <member name="F:X11.XGCFillStyle.FillOpaqueStippled">
            <summary>Fill with a tile bitmap with the same width and height as stipple,
            but with background everywhere stipple has a zero and with foreground everywhere stipple has a one.</summary>
        </member>
        <member name="T:X11.XGCCapStyle">
            <summary>The cap-style defines how the endpoints of a path are drawn.</summary>
            <remarks>See: http://www.sbin.org/doc/Xlib/chapt_05.html</remarks>
        </member>
        <member name="F:X11.XGCCapStyle.CapNotLast">
            <summary>This is equivalent to CapButt except that for a line-width of zero the final endpoint is not drawn.</summary>
            <remarks>   END of a line with 4px width
            ############ |
            ############ |
            ############ |
            ############ |
            </remarks>
        </member>
        <member name="F:X11.XGCCapStyle.CapButt">
            <summary>The line is square at the endpoint (perpendicular to the slope of the line) with no projection beyond. </summary>
            <remarks>   END of a line with 4px width
            #############|
            #############|
            #############|
            #############|
            </remarks>
        </member>
        <member name="F:X11.XGCCapStyle.CapRound">
            <summary>The line has a circular arc with the diameter equal to the line-width, centered on the endpoint. (This is equivalent to CapButt for line-width of zero). </summary>
            <remarks>   END of a line with 4px width
            #############|#
            #############|##
            #############|##
            #############|#
            </remarks>
        </member>
        <member name="F:X11.XGCCapStyle.CapProjecting">
            <summary>The line is square at the end, but the path continues beyond the endpoint for a distance equal to half the line-width. (This is equivalent to CapButt for line-width of zero).</summary>
            <remarks>   END of a line with 4px width
            #############|##
            #############|##
            #############|##
            #############|##
            </remarks>
        </member>
        <member name="T:X11.XGCFillRule">
            <summary>Define what pixels are inside a path to draw.</summary>
            <remarks>The fill-rule defines what pixels are inside (drawn) for paths given in
            XFillPolygon() requests and can be set to EvenOddRule or WindingRule.</remarks>
            <remarks>See: http://www.sbin.org/doc/Xlib/chapt_05.html</remarks>
        </member>
        <member name="F:X11.XGCFillRule.EvenOddRule">
            <summary>For EvenOddRule, a point is inside if an infinite ray with the point as origin
            crosses the path an odd number of times.</summary>
        </member>
        <member name="F:X11.XGCFillRule.WindingRule">
            <summary>For WindingRule, a point is inside if an infinite ray with the point as origin
            crosses an unequal number of clockwise and counterclockwise directed path segments.</summary>
        </member>
        <member name="T:X11.XWMHints">
            <summary>The <see cref="T:X11.XWMHints" /> structure provides data transfer for
            XSetWMHints(), XGetWMHints() calls.</summary>
        </member>
        <member name="F:X11.XWMHints.flags">
            <summary>Marks which fields in this structure are defined.</summary>
        </member>
        <member name="F:X11.XWMHints.input">
            <summary>Does this application rely on the window manager to get keyboard input?</summary>
        </member>
        <member name="F:X11.XWMHints.initial_state">
            <summary>The initial window state.</summary>
        </member>
        <member name="F:X11.XWMHints.icon_pixmap">
            <summary>The pixmap to be used as icon.</summary>
        </member>
        <member name="F:X11.XWMHints.icon_window">
            <summary>The window to be used as icon.</summary>
        </member>
        <member name="F:X11.XWMHints.icon_x">
            <summary>The initial x position of icon.</summary>
        </member>
        <member name="F:X11.XWMHints.icon_y">
            <summary>The initial y position of icon.</summary>
        </member>
        <member name="F:X11.XWMHints.icon_mask">
            <summary>The pixmap to be used as mask for icon_pixmap.</summary>
        </member>
        <member name="F:X11.XWMHints.window_group">
            <summary>The id of related window group.</summary>
        </member>
        <member name="T:X11.XWMHintMask">
            <summary>The <see cref="T:X11.XWMHintMask" /> enumeration specifies the flags, that define which WM hint value(s)
            is/are to apply (to retrieve or set data via the <see cref="T:X11.XWMHints" /> structure).</summary>
        </member>
        <member name="F:X11.XWMHintMask.InputHint">
            <summary>Apply the input hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.StateHint">
            <summary>Apply the state hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.IconPixmapHint">
            <summary>Apply the icon pixmap hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.IconWindowHint">
            <summary>Apply the icon window hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.IconPositionHint">
            <summary>Apply the icon position hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.IconMaskHint">
            <summary>Apply the icon mask hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.WindowGroupHint">
            <summary>Apply the window group hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.UrgencyHint">
            <summary>Apply the urgency hint value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWMHintMask.AllHints">
            <summary>Apply sll hint values (to retrieve or set data).</summary>
        </member>
        <member name="T:X11.XWindowMapState">
            <summary>The <see cref="T:X11.XWindowMapState" /> enumeration specifies the map state used for the <see cref="T:X11.XWindowAttributes" /> structure.</summary>
        </member>
        <member name="F:X11.XWindowMapState.IsUnmapped">
            <summary>The window is initially unmaped.</summary>
        </member>
        <member name="F:X11.XWindowMapState.IsUnviewable">
            <summary>The window is initially unviewable.</summary>
        </member>
        <member name="F:X11.XWindowMapState.IsViewable">
            <summary>The window is initially viewable.</summary>
        </member>
        <member name="T:X11.XWindowClass">
            <summary>The <see cref="T:X11.XWindowClass" /> enumeration specifies the window classes for XCreateWindow() calls.</summary>
        </member>
        <member name="F:X11.XWindowClass.CopyFromParent">
            <summary>Copy the window class data from parent window.</summary>
        </member>
        <member name="F:X11.XWindowClass.InputOutput">
            <summary>Identify a window class, that cannot be used as a drawable (act as a source or destination for graphics requests).</summary>
            <remarks>Act identically to <c>InputOnly</c> in other respects (properties, grabs, input control, and so on).</remarks>
        </member>
        <member name="F:X11.XWindowClass.InputOnly">
            <summary>Identify a window class, that can be used as a drawable.</summary>
        </member>
        <member name="T:X11.XWindowAttributes">
            <summary>The <see cref="T:X11.XWindowAttributes" /> structure provides the data exchange for XCreateWindow(), XGetGeometry(),
            XQueryPointer(), XQueryTree(), XGetWindowAttributes(), XSetWindowAttributes() and XChangeWindowAttributes() calls.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.x">
            <summary>The x location of window relative to the origin of the window's parent (parent window or WM border/window decoration).</summary>
            <remarks>See <see cref="!:XTranslateCoordinates" /> for location of window relative to the screen.</remarks>
        </member>
        <member name="F:X11.XWindowAttributes.y">
            <summary>The y location of window relative to the origin of the window's parent (parent window or WM border/window decoration).</summary>
            <remarks>See <see cref="!:XTranslateCoordinates" /> for location of window relative to the screen.</remarks>
        </member>
        <member name="F:X11.XWindowAttributes.width">
            <summary>The width of window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.height">
            <summary>The height of window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.border_width">
            <summary>The border width of window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.depth">
            <summary>The depth of window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.visual">
            <summary>The the associated visual structure.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.root">
            <summary>The root of screen containing window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.cls">
            <summary>The window class.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.bit_gravity">
            <summary>The bit gravity of the window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.win_gravity">
            <summary>The window gravity of the window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.backing_store">
            <summary>The draw into umpapped window to speed up mapping (aviod Expose event) flag.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.backing_planes">
            <summary>The planes to be preserved if possible.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.backing_pixel">
            <summary>The value to be used when restoring planes.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.save_under">
            <summary>The should bits under be saved flag.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.colormap">
            <summary>The color map to be associated with window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.map_installed">
            <summary>The is color map currently installed flag.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.map_state">
            <summary>The window map state.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.all_event_masks">
            <summary>The set of events all receiver have interest in.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.your_event_mask">
            <summary>The event mask of this window.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.do_not_propagate_mask">
            <summary>The set of events that should not propagate.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.override_redirect">
            <summary>The override-redirect flag.</summary>
        </member>
        <member name="F:X11.XWindowAttributes.screen">
            <summary>The back pointer to correct screen.</summary>
        </member>
        <member name="T:X11.XWindowAttributeMask">
            <summary>The <see cref="T:X11.XWindowAttributeMask" /> enumeration specifies the flags, that define which window attribute(s)
            is/are to apply (to retrieve or set data via the <see cref="T:X11.XSetWindowAttributes" /> structure).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBackPixmap">
            <summary>Apply the back pixmap value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBackPixel">
            <summary>Apply the back pixel value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBorderPixmap">
            <summary>Apply the border pixmap value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBorderPixel">
            <summary>Apply the border pixel value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBitGravity">
            <summary>Apply the bit gravity value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWWinGravity">
            <summary>Apply the window gravity value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBackingStore">
            <summary>Apply the backing store value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBackingPlanes">
            <summary>Apply the backing planes value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWBackingPixel">
            <summary>Apply the backing pixel value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWOverrideRedirect">
            <summary>Apply the override redirect value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWSaveUnder">
            <summary>Apply the save under value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWEventMask">
            <summary>Apply the event mask value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWDontPropagate">
            <summary>Apply the don't propagate value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWColormap">
            <summary>Apply the colormap value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XWindowAttributeMask.CWCursor">
            <summary>Apply the cursor value (to retrieve or set data).</summary>
        </member>
        <member name="T:X11.XColormapAllocType">
            <summary>The <see cref="T:X11.XColormapAllocType" /> enumeration specifies the colormap allocation type for XCreateColormap() calls.</summary>
        </member>
        <member name="F:X11.XColormapAllocType.AllocNone">
            <summary>Define, that XCreateColorMap() doesn't allocate color entries.</summary>
            <remarks>For StaticGray, StaticColor, and TrueColor visuals color entries can't be allocated at all.
            For other visuals, the colormap is left empty initially.</remarks>
        </member>
        <member name="F:X11.XColormapAllocType.AllocAll">
            <summary>Allocate color entries during XCreateColorMap().</summary>
            <remarks>Not applicable for StaticGray, StaticColor, and TrueColor visuals.</remarks>
        </member>
        <member name="T:X11.XColor">
            <summary>The <see cref="T:X11.XColor" /> structure provides data transfer from/to the colormap.</summary>
        </member>
        <member name="F:X11.XColor.pixel">
            <summary>The pixel value.</summary>
        </member>
        <member name="F:X11.XColor.red">
            <summary>The red color component value, in the range 0 to 65535 inclusive.</summary>
        </member>
        <member name="F:X11.XColor.green">
            <summary>The green color component value, in the range 0 to 65535 inclusive.</summary>
        </member>
        <member name="F:X11.XColor.blue">
            <summary>The blue color component value, in the range 0 to 65535 inclusive.</summary>
        </member>
        <member name="F:X11.XColor.flags">
            <summary>The color components apply flags.</summary>
        </member>
        <member name="F:X11.XColor.pad">
            <summary>Align the structure size.</summary>
        </member>
        <member name="F:X11.XColor.DoRed">
            <summary>Apply the red color component (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XColor.DoGreen">
            <summary>Apply the green color component (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XColor.DoBlue">
            <summary>Apply the blue color component (to retrieve or set data).</summary>
        </member>
        <member name="T:X11.XColorMapping">
            <summary>The <see cref="T:X11.XColorMapping" /> structure maps a color name to it's ARGB value.</summary>
        </member>
        <member name="F:X11.XColorMapping.Name">
            <summary>The name of the color.</summary>
        </member>
        <member name="F:X11.XColorMapping.ARGB">
            <summary>The ARGB Value of the color.</summary>
        </member>
        <member name="M:X11.XColorMapping.#ctor(System.String,System.UInt32)">
            <summary>Initializing constructor.</summary>
            <param name="name">The name of the color.<see cref="T:System.String" /></param>
            <param name="argb">The RGB Value of the color.<see cref="T:System.UInt32" /></param>
        </member>
        <member name="T:X11.XColorNames">
            <summary>The <see cref="T:X11.XColorNames" /> class provides the names of all predefined X11 colors.</summary>
        </member>
        <member name="F:X11.XColorNames.AliceBlue">
            <summary>The predefined color name <c>AliceBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.AntiqueWhite">
            <summary>The predefined color name <c>AntiqueWhite</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Aqua">
            <summary>The predefined color name <c>Aqua</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Aquamarine">
            <summary>The predefined color name <c>Aquamarine</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Azure">
            <summary>The predefined color name <c>Azure</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Beige">
            <summary>The predefined color name <c>Beige</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Bisque">
            <summary>The predefined color name <c>Bisque</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Black">
            <summary>The predefined color name <c>Black</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.BlanchedAlmond">
            <summary>The predefined color name <c>BlanchedAlmond</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Blue">
            <summary>The predefined color name <c>Blue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.BlueViolet">
            <summary>The predefined color name <c>BlueViolet</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Brown">
            <summary>The predefined color name <c>Brown</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.BurlyWood">
            <summary>The predefined color name <c>BurlyWood</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.CadetBlue">
            <summary>The predefined color name <c>CadetBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Chartreuse">
            <summary>The predefined color name <c>Chartreuse</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Chocolate">
            <summary>The predefined color name <c>Chocolate</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Coral">
            <summary>The predefined color name <c>Coral</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.CornflowerBlue">
            <summary>The predefined color name <c>CornflowerBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Cornsilk">
            <summary>The predefined color name <c>Cornsilk</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Crimson">
            <summary>The predefined color name <c>Crimson</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Cyan">
            <summary>The predefined color name <c>Cyan</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkBlue">
            <summary>The predefined color name <c>DarkBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkCyan">
            <summary>The predefined color name <c>DarkCyan</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkGoldenrod">
            <summary>The predefined color name <c>DarkGoldenrod</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkGray">
            <summary>The predefined color name <c>DarkGray</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkGreen">
            <summary>The predefined color name <c>DarkGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkKhaki">
            <summary>The predefined color name <c>DarkKhaki</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkMagenta">
            <summary>The predefined color name <c>DarkMagenta</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkOliveGreen">
            <summary>The predefined color name <c>DarkOliveGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkOrange">
            <summary>The predefined color name <c>DarkOrange</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkOrchid">
            <summary>The predefined color name <c>DarkOrchid</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkRed">
            <summary>The predefined color name <c>DarkRed</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkSalmon">
            <summary>The predefined color name <c>DarkSalmon</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkSeaGreen">
            <summary>The predefined color name <c>DarkSeaGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkSlateBlue">
            <summary>The predefined color name <c>DarkSlateBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkSlateGray">
            <summary>The predefined color name <c>DarkSlateGray</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkTurquoise">
            <summary>The predefined color name <c>DarkTurquoise</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DarkViolet">
            <summary>The predefined color name <c>DarkViolet</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DeepPink">
            <summary>The predefined color name <c>DeepPink</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DeepSkyBlue">
            <summary>The predefined color name <c>DeepSkyBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DimGray">
            <summary>The predefined color name <c>DimGray</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.DodgerBlue">
            <summary>The predefined color name <c>DodgerBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.FireBrick">
            <summary>The predefined color name <c>FireBrick</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.FloralWhite">
            <summary>The predefined color name <c>FloralWhite</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.ForestGreen">
            <summary>The predefined color name <c>ForestGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Fuchsia">
            <summary>The predefined color name <c>Fuchsia</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gainsboro">
            <summary>The predefined color name <c>Gainsboro</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.GhostWhite">
            <summary>The predefined color name <c>GhostWhite</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gold">
            <summary>The predefined color name <c>Gold</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Goldenrod">
            <summary>The predefined color name <c>Goldenrod</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray">
            <summary>The predefined color name <c>Gray</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Green">
            <summary>The predefined color name <c>Green</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.GreenYellow">
            <summary>The predefined color name <c>GreenYellow</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Honeydew">
            <summary>The predefined color name <c>Honeydew</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.HotPink">
            <summary>The predefined color name <c>HotPink</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.IndianRed">
            <summary>The predefined color name <c>IndianRed</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Indigo">
            <summary>The predefined color name <c>Indigo</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Ivory">
            <summary>The predefined color name <c>Ivory</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Khaki">
            <summary>The predefined color name <c>Khaki</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Lavender">
            <summary>The predefined color name <c>Lavender</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LavenderBlush">
            <summary>The predefined color name <c>LavenderBlush</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LawnGreen">
            <summary>The predefined color name <c>LawnGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LemonChiffon">
            <summary>The predefined color name <c>LemonChiffon</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightBlue">
            <summary>The predefined color name <c>LightBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightCoral">
            <summary>The predefined color name <c>LightCoral</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightCyan">
            <summary>The predefined color name <c>LightCyan</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightGoldenrodYellow">
            <summary>The predefined color name <c>LightGoldenrodYellow</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightGreen">
            <summary>The predefined color name <c>LightGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightGrey">
            <summary>The predefined color name <c>LightGrey</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightPink">
            <summary>The predefined color name <c>LightPink</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightSalmon">
            <summary>The predefined color name <c>LightSalmon</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightSeaGreen">
            <summary>The predefined color name <c>LightSeaGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightSkyBlue">
            <summary>The predefined color name <c>LightSkyBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightSlateGray">
            <summary>The predefined color name <c>LightSlateGray</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightSteelBlue">
            <summary>The predefined color name <c>LightSteelBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LightYellow">
            <summary>The predefined color name <c>LightYellow</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Lime">
            <summary>The predefined color name <c>Lime</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.LimeGreen">
            <summary>The predefined color name <c>LimeGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Linen">
            <summary>The predefined color name <c>Linen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Magenta">
            <summary>The predefined color name <c>Magenta</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Maroon">
            <summary>The predefined color name <c>Maroon</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumAquamarine">
            <summary>The predefined color name <c>MediumAquamarine</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumBlue">
            <summary>The predefined color name <c>MediumBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumOrchid">
            <summary>The predefined color name <c>MediumOrchid</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumPurple">
            <summary>The predefined color name <c>MediumPurple</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumSeaGreen">
            <summary>The predefined color name <c>MediumSeaGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumSlateBlue">
            <summary>The predefined color name <c>MediumSlateBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumSpringGreen">
            <summary>The predefined color name <c>MediumSpringGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumTurquoise">
            <summary>The predefined color name <c>MediumTurquoise</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MediumVioletRed">
            <summary>The predefined color name <c>MediumVioletRed</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MidnightBlue">
            <summary>The predefined color name <c>MidnightBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MintCream">
            <summary>The predefined color name <c>MintCream</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.MistyRose">
            <summary>The predefined color name <c>MistyRose</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Moccasin">
            <summary>The predefined color name <c>Moccasin</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.NavajoWhite">
            <summary>The predefined color name <c>NavajoWhite</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Navy">
            <summary>The predefined color name <c>Navy</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.OldLace">
            <summary>The predefined color name <c>OldLace</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Olive">
            <summary>The predefined color name <c>Olive</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.OliveDrab">
            <summary>The predefined color name <c>OliveDrab</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Orange">
            <summary>The predefined color name <c>Orange</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.OrangeRed">
            <summary>The predefined color name <c>OrangeRed</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Orchid">
            <summary>The predefined color name <c>Orchid</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.PaleGoldenrod">
            <summary>The predefined color name <c>PaleGoldenrod</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.PaleGreen">
            <summary>The predefined color name <c>PaleGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.PaleTurquoise">
            <summary>The predefined color name <c>PaleTurquoise</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.PaleVioletRed">
            <summary>The predefined color name <c>PaleVioletRed</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.PapayaWhip">
            <summary>The predefined color name <c>PapayaWhip</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.PeachPuff">
            <summary>The predefined color name <c>PeachPuff</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Peru">
            <summary>The predefined color name <c>Peru</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Pink">
            <summary>The predefined color name <c>Pink</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Plum">
            <summary>The predefined color name <c>Plum</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.PowderBlue">
            <summary>The predefined color name <c>PowderBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Purple">
            <summary>The predefined color name <c>Purple</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Red">
            <summary>The predefined color name <c>Red</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.RosyBrown">
            <summary>The predefined color name <c>RosyBrown</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.RoyalBlue">
            <summary>The predefined color name <c>v</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SaddleBrown">
            <summary>The predefined color name <c>SaddleBrown</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Salmon">
            <summary>The predefined color name <c>Salmon</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SandyBrown">
            <summary>The predefined color name <c>SandyBrown</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SeaGreen">
            <summary>The predefined color name <c>SeaGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SeaShell">
            <summary>The predefined color name <c>SeaShell</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Sienna">
            <summary>The predefined color name <c>Sienna</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Silver">
            <summary>The predefined color name <c>Silver</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SkyBlue">
            <summary>The predefined color name <c>SkyBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SlateBlue">
            <summary>The predefined color name <c>SlateBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SlateGray">
            <summary>The predefined color name <c>SlateGray</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Snow">
            <summary>The predefined color name <c>Snow</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SpringGreen">
            <summary>The predefined color name <c>SpringGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.SteelBlue">
            <summary>The predefined color name <c>SteelBlue</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Tan">
            <summary>The predefined color name <c>Tan</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Teal">
            <summary>The predefined color name <c>Teal</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Thistle">
            <summary>The predefined color name <c>Thistle</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Tomato">
            <summary>The predefined color name <c>Tomato</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Transparent">
            <summary>The predefined color name <c>Transparent</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Turquoise">
            <summary>The predefined color name <c>Turquoise</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Violet">
            <summary>The predefined color name <c>Violet</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Wheat">
            <summary>The predefined color name <c>Wheat</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.White">
            <summary>The predefined color name <c>White</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.WhiteSmoke">
            <summary>The predefined color name <c>WhiteSmoke</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Yellow">
            <summary>The predefined color name <c>Yellow</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.YellowGreen">
            <summary>The predefined color name <c>YellowGreen</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray0">
            <summary>The predefined color name <c>Gray0</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray1">
            <summary>The predefined color name <c>Gray1</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray2">
            <summary>The predefined color name <c>Gray2</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray3">
            <summary>The predefined color name <c>Gray3</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray4">
            <summary>The predefined color name <c>Gray4</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray5">
            <summary>The predefined color name <c>Gray5</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray6">
            <summary>The predefined color name <c>Gray6</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray7">
            <summary>The predefined color name <c>Gray7</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray8">
            <summary>The predefined color name <c>Gray8</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray9">
            <summary>The predefined color name <c>Gray9</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray10">
            <summary>The predefined color name <c>Gray10</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray11">
            <summary>The predefined color name <c>Gray11</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray12">
            <summary>The predefined color name <c>Gray12</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray13">
            <summary>The predefined color name <c>Gray13</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray14">
            <summary>The predefined color name <c>Gray14</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray15">
            <summary>The predefined color name <c>Gray15</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray16">
            <summary>The predefined color name <c>Gray16</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray17">
            <summary>The predefined color name <c>Gray17</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray18">
            <summary>The predefined color name <c>Gray18</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray19">
            <summary>The predefined color name <c>Gray19</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray20">
            <summary>The predefined color name <c>Gray20</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray21">
            <summary>The predefined color name <c>Gray21</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray22">
            <summary>The predefined color name <c>Gray22</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray23">
            <summary>The predefined color name <c>Gray23</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray24">
            <summary>The predefined color name <c>Gray24</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray25">
            <summary>The predefined color name <c>Gray25</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray26">
            <summary>The predefined color name <c>Gray26</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray27">
            <summary>The predefined color name <c>Gray27</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray28">
            <summary>The predefined color name <c>Gray28</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray29">
            <summary>The predefined color name <c>Gray29</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray30">
            <summary>The predefined color name <c>Gray30</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray31">
            <summary>The predefined color name <c>Gray31</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray32">
            <summary>The predefined color name <c>Gray32</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray33">
            <summary>The predefined color name <c>Gray33</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray34">
            <summary>The predefined color name <c>Gray34</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray35">
            <summary>The predefined color name <c>Gray35</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray36">
            <summary>The predefined color name <c>Gray36</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray37">
            <summary>The predefined color name <c>Gray37</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray38">
            <summary>The predefined color name <c>Gray38</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray39">
            <summary>The predefined color name <c>Gray39</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray40">
            <summary>The predefined color name <c>Gray40</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray41">
            <summary>The predefined color name <c>Gray41</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray42">
            <summary>The predefined color name <c>Gray42</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray43">
            <summary>The predefined color name <c>Gray43</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray44">
            <summary>The predefined color name <c>Gray44</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray45">
            <summary>The predefined color name <c>Gray45</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray46">
            <summary>The predefined color name <c>Gray46</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray47">
            <summary>The predefined color name <c>Gray47</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray48">
            <summary>The predefined color name <c>Gray48</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray49">
            <summary>The predefined color name <c>Gray49</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray50">
            <summary>The predefined color name <c>Gray50</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray51">
            <summary>The predefined color name <c>Gray51</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray52">
            <summary>The predefined color name <c>Gray52</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray53">
            <summary>The predefined color name <c>Gray53</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray54">
            <summary>The predefined color name <c>Gray54</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray55">
            <summary>The predefined color name <c>Gray55</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray56">
            <summary>The predefined color name <c>Gray56</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray57">
            <summary>The predefined color name <c>Gray57</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray58">
            <summary>The predefined color name <c>Gray58</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray59">
            <summary>The predefined color name <c>Gray59</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray60">
            <summary>The predefined color name <c>Gray60</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray61">
            <summary>The predefined color name <c>Gray61</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray62">
            <summary>The predefined color name <c>Gray62</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray63">
            <summary>The predefined color name <c>Gray63</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray64">
            <summary>The predefined color name <c>Gray64</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray65">
            <summary>The predefined color name <c>Gray65</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray66">
            <summary>The predefined color name <c>Gray66</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray67">
            <summary>The predefined color name <c>Gray67</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray68">
            <summary>The predefined color name <c>Gray68</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray69">
            <summary>The predefined color name <c>Gray69</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray70">
            <summary>The predefined color name <c>Gray70</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray71">
            <summary>The predefined color name <c>Gray71</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray72">
            <summary>The predefined color name <c>Gray72</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray73">
            <summary>The predefined color name <c>Gray73</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray74">
            <summary>The predefined color name <c>Gray74</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray75">
            <summary>The predefined color name <c>Gray75</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray76">
            <summary>The predefined color name <c>Gray76</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray77">
            <summary>The predefined color name <c>Gray77</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray78">
            <summary>The predefined color name <c>Gray78</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray79">
            <summary>The predefined color name <c>Gray79</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray80">
            <summary>The predefined color name <c>Gray80</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray81">
            <summary>The predefined color name <c>Gray81</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray82">
            <summary>The predefined color name <c>Gray82</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray83">
            <summary>The predefined color name <c>Gray83</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray84">
            <summary>The predefined color name <c>Gray84</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray85">
            <summary>The predefined color name <c>Gray85</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray86">
            <summary>The predefined color name <c>Gray86</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray87">
            <summary>The predefined color name <c>Gray87</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray88">
            <summary>The predefined color name <c>Gray88</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray89">
            <summary>The predefined color name <c>Gray89</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray90">
            <summary>The predefined color name <c>Gray90</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray91">
            <summary>The predefined color name <c>Gray91</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray92">
            <summary>The predefined color name <c>Gray92</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray93">
            <summary>The predefined color name <c>Gray93</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray94">
            <summary>The predefined color name <c>Gray94</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray95">
            <summary>The predefined color name <c>Gray95</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray96">
            <summary>The predefined color name <c>Gray96</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray97">
            <summary>The predefined color name <c>Gray97</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray98">
            <summary>The predefined color name <c>Gray98</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray99">
            <summary>The predefined color name <c>Gray99</c>.</summary>
        </member>
        <member name="F:X11.XColorNames.Gray100">
            <summary>The predefined color name <c>Gray100</c>.</summary>
        </member>
        <member name="M:X11.XColorNames.IndexOf(System.String)">
            <summary>Determine the color map index if the indicatewd color name.</summary>
            <param name="s">The color name to determine the index for.<see cref="T:System.String" /></param>
            <returns>The color map index on success, or -1 otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="F:X11.XColorNames.ColorMap">
            <summary>The color map of known color names.</summary>
        </member>
        <member name="T:X11.TColor">
            <summary>Define a value type to support legacy X11 drawing (using TPixel) and newer APIs (using RGB).</summary>
            <remarks>Keep behaviour and interface an near to System.Drawing.Color as possible.</remarks>
        </member>
        <member name="F:X11.TColor._pixel">
            <summary>The X11 color pixel, suitable for the current color model (for legacy drawing).</summary>
        </member>
        <member name="F:X11.TColor._pixelInited">
            <summary>Determine whether the pixel value has been initialized.</summary>
        </member>
        <member name="F:X11.TColor._alpha">
            <summary>The alpha channel (for advanced drawing with GL or Cairo).</summary>
            <remarks>A value of 0 means completely transparent, a value of 255 means completely opaque.</remarks>
        </member>
        <member name="F:X11.TColor._red">
            <summary>The red color component (for advanced drawing with GL or Cairo).</summary>
        </member>
        <member name="F:X11.TColor._green">
            <summary>The green color component (for advanced drawing with GL or Cairo).</summary>
        </member>
        <member name="F:X11.TColor._blue">
            <summary>The blue color component (for advanced drawing with GL or Cairo).</summary>
        </member>
        <member name="F:X11.TColor.FallbackWhite">
            <summary>The fallback <see cref="T:X11.TColor" /> white (the pixel value is not initialized).</summary>
        </member>
        <member name="F:X11.TColor.FallbackBlack">
            <summary>The fallback <see cref="T:X11.TColor" /> black (the pixel value is not initialized).</summary>
        </member>
        <member name="F:X11.TColor.FallbackTransparentWhite">
            <summary>The fallback <see cref="T:X11.TColor" /> fully transparent white (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.AliceBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> AliceBlue that has an ARGB value of #FFF0F8FF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.AntiqueWhite">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> AntiqueWhite that has an ARGB value of #FFFAEBD7 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Aqua">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Aqua that has an ARGB value of #FF00FFFF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Aquamarine">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Aquamarine that has an ARGB value of #FF7FFFD4 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Azure">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Azure that has an ARGB value of #FFF0FFFF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Beige">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Beige that has an ARGB value of #FFF5F5DC (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Bisque">
            <summary>Get a system-defined <see cref="T:X11.TColor" />Bisque  that has an ARGB value of #FFFFE4C4 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Black">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Black that has an ARGB value of #FF000000 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.BlanchedAlmond">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> BlanchedAlmond that has an ARGB value of #FFFFEBCD (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Blue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Blue that has an ARGB value of #FF0000FF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.BlueViolet">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> BlueViolet that has an ARGB value of #FF8A2BE2 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Brown">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Brown that has an ARGB value of #FFA52A2A (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.BurlyWood">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> BurlyWood that has an ARGB value of #FFDEB887 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.CadetBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> CadetBlue that has an ARGB value of #FF5F9EA0 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Chartreuse">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Chartreuse that has an ARGB value of #FF7FFF00 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Chocolate">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Chocolate that has an ARGB value of #FFD2691E (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Coral">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Coral that has an ARGB value of #FFFF7F50 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.CornflowerBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> CornflowerBlue that has an ARGB value of #FF6495ED (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Cornsilk">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Cornsilk that has an ARGB value of #FFFFF8DC (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Crimson">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Crimson that has an ARGB value of #FFDC143C (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Cyan">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Cyan that has an ARGB value of #FF00FFFF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkBlue that has an ARGB value of #FF00008B (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkCyan">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkCyan that has an ARGB value of #FF008B8B (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkGoldenrod">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkGoldenrod that has an ARGB value of #FFB8860B (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkGray">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkGray that has an ARGB value of #FFA9A9A9 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkGreen that has an ARGB value of #FF006400 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkKhaki">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkKhaki that has an ARGB value of #FFBDB76B (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkMagenta">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkMagenta that has an ARGB value of #FF8B008B (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkOliveGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkOliveGreen that has an ARGB value of #FF556B2F (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkOrange">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkOrange that has an ARGB value of #FFFF8C00 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkOrchid">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkOrchid that has an ARGB value of #FF9932CC (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkRed">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkRed that has an ARGB value of #FF8B0000 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkSalmon">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkSalmon that has an ARGB value of #FFE9967A (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkSeaGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkSeaGreen that has an ARGB value of #FF8FBC8F (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkSlateBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkSlateBlue that has an ARGB value of #FF483D8B (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkSlateGray">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkSlateGray that has an ARGB value of #FF2F4F4F (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkTurquoise">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkTurquoise that has an ARGB value of #FF00CED1 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DarkViolet">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DarkViolet that has an ARGB value of #FF9400D3 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DeepPink">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DeepPink that has an ARGB value of #FFFF1493 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DeepSkyBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DeepSkyBlue that has an ARGB value of #FF00BFFF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DimGray">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DimGray that has an ARGB value of #FF696969 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.DodgerBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> DodgerBlue that has an ARGB value of #FF1E90FF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Firebrick">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Firebrick that has an ARGB value of #FFB22222 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.FloralWhite">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> FloralWhite that has an ARGB value of #FFFFFAF0 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.ForestGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> ForestGreen that has an ARGB value of #FF228B22 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Fuchsia">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Fuchsia that has an ARGB value of #FFFF00FF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Gainsboro">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Gainsboro that has an ARGB value of #FFDCDCDC (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.GhostWhite">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> GhostWhite that has an ARGB value of #FFF8F8FF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Gold">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Gold that has an ARGB value of #FFFFD700 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Goldenrod">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Goldenrod that has an ARGB value of #FFDAA520 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Gray">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Gray that has an ARGB value of #FF808080 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Green">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Green that has an ARGB value of #FF008000 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.GreenYellow">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> GreenYellow that has an ARGB value of #FFADFF2F (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Honeydew">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Honeydew that has an ARGB value of #FFF0FFF0 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.HotPink">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> HotPink that has an ARGB value of #FFFF69B4 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.IndianRed">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> IndianRed that has an ARGB value of #FFCD5C5C (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Indigo">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Indigo that has an ARGB value of #FF4B0082 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Ivory">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Ivory that has an ARGB value of #FFFFFFF0 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Khaki">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Khaki that has an ARGB value of #FFF0E68C (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Lavender">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Lavender that has an ARGB value of #FFE6E6FA (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LavenderBlush">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LavenderBlush that has an ARGB value of #FFFFF0F5 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LawnGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LawnGreen that has an ARGB value of #FF7CFC00 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LemonChiffon">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LemonChiffon that has an ARGB value of #FFFFFACD (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightBlue that has an ARGB value of #FFADD8E6 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightCoral">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightCoral that has an ARGB value of #FFF08080 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightCyan">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightCyan that has an ARGB value of #FFE0FFFF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightGoldenrodYellow">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightGoldenrodYellow that has an ARGB value of #FFFAFAD2 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightGray">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightGray that has an ARGB value of #FFD3D3D3 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightGreen that has an ARGB value of #FF90EE90 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightPink">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightPink that has an ARGB value of #FFFFB6C1 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightSalmon">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightSalmon that has an ARGB value of #FFFFA07A (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightSeaGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightSeaGreen that has an ARGB value of #FF20B2AA (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightSkyBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightSkyBlue that has an ARGB value of #FF87CEFA (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightSlateGray">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightSlateGray that has an ARGB value of #FF778899 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightSteelBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightSteelBlue that has an ARGB value of #FFB0C4DE (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LightYellow">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LightYellow that has an ARGB value of #FFFFFFE0 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Lime">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Lime that has an ARGB value of #FF00FF00 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.LimeGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> LimeGreen that has an ARGB value of #FF32CD32 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Linen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Linen that has an ARGB value of #FFFAF0E6 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Magenta">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Magenta that has an ARGB value of #FFFF00FF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Maroon">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Maroon that has an ARGB value of #FF800000 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumAquamarine">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumAquamarine that has an ARGB value of #FF66CDAA (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumBlue that has an ARGB value of #FF0000CD (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumOrchid">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumOrchid that has an ARGB value of #FFBA55D3 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumPurple">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumPurple that has an ARGB value of #FF9370DB (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumSeaGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumSeaGreen that has an ARGB value of #FF3CB371 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumSlateBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumSlateBlue that has an ARGB value of #FF7B68EE (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumSpringGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumSpringGreen that has an ARGB value of #FF00FA9A (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumTurquoise">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumTurquoise that has an ARGB value of #FF48D1CC (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MediumVioletRed">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MediumVioletRed that has an ARGB value of #FFC71585 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MidnightBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MidnightBlue that has an ARGB value of #FF191970 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MintCream">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MintCream that has an ARGB value of #FFF5FFFA (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.MistyRose">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> MistyRose that has an ARGB value of #FFFFE4E1 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Moccasin">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Moccasin that has an ARGB value of #FFFFE4B5 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.NavajoWhite">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> NavajoWhite that has an ARGB value of #FFFFDEAD (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Navy">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Navy that has an ARGB value of #FF000080 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.OldLace">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> OldLace that has an ARGB value of #FFFDF5E6 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Olive">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Olive that has an ARGB value of #FF808000 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.OliveDrab">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> OliveDrab that has an ARGB value of #FF6B8E23 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Orange">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Orange that has an ARGB value of #FFFFA500 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.OrangeRed">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> OrangeRed that has an ARGB value of #FFFF4500 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Orchid">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Orchid that has an ARGB value of #FFDA70D6 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.PaleGoldenrod">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> PaleGoldenrod that has an ARGB value of #FFEEE8AA (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.PaleGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> PaleGreen that has an ARGB value of #FF98FB98 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.PaleTurquoise">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> PaleTurquoise that has an ARGB value of #FFAFEEEE (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.PaleVioletRed">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> PaleVioletRed that has an ARGB value of #FFDB7093 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.PapayaWhip">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> PapayaWhip that has an ARGB value of #FFFFEFD5 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.PeachPuff">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> PeachPuff that has an ARGB value of #FFFFDAB9 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Peru">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Peru that has an ARGB value of #FFCD853F (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Pink">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Pink that has an ARGB value of #FFFFC0CB (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Plum">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Plum that has an ARGB value of #FFDDA0DD (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.PowderBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> PowderBlue that has an ARGB value of #FFB0E0E6 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Purple">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Purple that has an ARGB value of #FF800080 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Red">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Red that has an ARGB value of #FFFF0000 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.RosyBrown">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> RosyBrown that has an ARGB value of #FFBC8F8F (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.RoyalBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> RoyalBlue that has an ARGB value of #FF4169E1 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SaddleBrown">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SaddleBrown that has an ARGB value of #FF8B4513 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Salmon">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Salmon that has an ARGB value of #FFFA8072 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SandyBrown">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SandyBrown that has an ARGB value of #FFF4A460 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SeaGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SeaGreen that has an ARGB value of #FF2E8B57 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SeaShell">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SeaShell that has an ARGB value of #FFFFF5EE (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Sienna">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Sienna that has an ARGB value of #FFA0522D (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Silver">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Silver that has an ARGB value of #FFC0C0C0 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SkyBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SkyBlue that has an ARGB value of #FF87CEEB (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SlateBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SlateBlue that has an ARGB value of #FF6A5ACD (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SlateGray">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SlateGray that has an ARGB value of #FF708090 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Snow">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Snow that has an ARGB value of #FFFFFAFA (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SpringGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SpringGreen that has an ARGB value of #FF00FF7F (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.SteelBlue">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> SteelBlue that has an ARGB value of #FF4682B4 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Tan">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Tan that has an ARGB value of #FFD2B48C (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Teal">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Teal that has an ARGB value of #FF008080 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Thistle">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Thistle that has an ARGB value of #FFD8BFD8 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Tomato">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Tomato that has an ARGB value of #FFFF6347 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Transparent">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Transparent that has a system-defined color (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Turquoise">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Turquoise that has an ARGB value of #FF40E0D0 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Violet">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Violet that has an ARGB value of #FFEE82EE (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Wheat">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Wheat that has an ARGB value of #FFF5DEB3 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.White">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> White that has an ARGB value of #FFFFFFFF (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.WhiteSmoke">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> WhiteSmoke that has an ARGB value of #FFF5F5F5 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.Yellow">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> Yellow that has an ARGB value of #FFFFFF00 (the pixel value is not initialized).</summary>
        </member>
        <member name="P:X11.TColor.YellowGreen">
            <summary>Get a system-defined <see cref="T:X11.TColor" /> YellowGreen that has an ARGB value of #FF9ACD32 (the pixel value is not initialized).</summary>
        </member>
        <member name="M:X11.TColor.#ctor(X11.TPixel,System.Byte,System.Byte,System.Byte)">
            <summary>Initialize a new X11.TColor instance without alpha (opaque).</summary>
            <param name="pixel">The X11 color pixel, suitable for the current color model (for legacy drawing).<see cref="T:X11.TPixel" /></param>
            <param name="red">The red color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="green">The green color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="blue">The blue color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
        </member>
        <member name="M:X11.TColor.#ctor(X11.TPixel,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Initialize a new X11.TColor instance with alpha (transparency).</summary>
            <param name="pixel">The X11 color pixel, suitable for the current color model (for legacy drawing).<see cref="T:X11.TPixel" /></param>
            <param name="alpha">The color transparency component (0 = fully transparent, 256 = fully opaque).<see cref="T:System.Byte" /></param>
            <param name="red">The red color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="green">The green color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="blue">The blue color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
        </member>
        <member name="M:X11.TColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Initialize a new X11.TColor instance with alpha (transparency).</summary>
            <param name="alpha">The color transparency component (0 = fully transparent, 256 = fully opaque).<see cref="T:System.Byte" /></param>
            <param name="red">The red color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="green">The green color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="blue">The blue color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
        </member>
        <member name="M:X11.TColor.FromPRGB(X11.TPixel,System.Byte,System.Byte,System.Byte)">
            <summary>Initialize a new X11.TColor instance with pixel value but without alpha value (initialize as completely opaque).</summary>
            <param name="pixel">The X11 color pixel, suitable for the current color model (for legacy drawing).<see cref="T:X11.TPixel" /></param>
            <param name="red">The red color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="green">The green color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="blue">The blue color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
        </member>
        <member name="M:X11.TColor.FromPARGB(X11.TPixel,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Initialize a new X11.TColor instance with pixel value and with alpha value (transparency).</summary>
            <param name="pixel">The X11 color pixel, suitable for the current color model (for legacy drawing).<see cref="T:X11.TPixel" /></param>
            <param name="alpha">The color transparency component (0 = fully transparent, 256 = fully opaque).<see cref="T:System.Byte" /></param>
            <param name="red">The red color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="green">The green color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="blue">The blue color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <returns>The color.<see cref="T:X11.TColor" /></returns>
        </member>
        <member name="M:X11.TColor.FromARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Initialize a new X11.TColor instance with alpha value (transparency) but without pixel value (must be initialized at first utilization).</summary>
            <param name="alpha">The color transparency component (0 = fully transparent, 256 = fully opaque).<see cref="T:System.Byte" /></param>
            <param name="red">The red color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="green">The green color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <param name="blue">The blue color component (for advanced drawing with GL or Cairo).<see cref="T:System.Byte" /></param>
            <returns>The color.<see cref="T:X11.TColor" /></returns>
        </member>
        <member name="M:X11.TColor.FromARGB(System.UInt32)">
            <summary>Initialize a new X11.TColor instance without alpha value (transparency) and without pixel value (must be initialized at first utilization).</summary>
            <param name="argb">The alpha, red, green and blue color component .<see cref="T:System.UInt32" /></param>
            <returns>The color.<see cref="T:X11.TColor" /></returns>
        </member>
        <member name="M:X11.TColor.FromRGB(System.Byte,System.Byte,System.Byte)">
            <summary>Initialize a new X11.TColor instance without alpha value (transparency) and without pixel value (must be initialized at first utilization).</summary>
            <param name="red">The red color component.<see cref="T:System.Byte" /></param>
            <param name="green">The green color component.<see cref="T:System.Byte" /></param>
            <param name="blue">The blue color component.<see cref="T:System.Byte" /></param>
            <returns>The color.<see cref="T:X11.TColor" /></returns>
        </member>
        <member name="M:X11.TColor.FromRGB(System.Int32)">
            <summary>Initialize a new X11.TColor instance without alpha value (transparency) and without pixel value (must be initialized at first utilization).</summary>
            <param name="rgb">The red, green and blue color component .<see cref="T:System.Int32" /></param>
            <returns>The color.<see cref="T:X11.TColor" /></returns>
        </member>
        <member name="M:X11.TColor.FromName(System.String)">
            <summary>Initialize a new X11.TColor instance with alpha value (transparency) but without pixel value (must be initialized at first utilization).</summary>
            <param name="colorName">The color name to initialize the color.<see cref="T:System.String" /></param>
            <returns>The color.<see cref="T:X11.TColor" /></returns>
            <remarks>The 'colorName' must either be a HTML color name (with syntax #RGB, #RRGGBB, #AARRGGBB) or a known color name (e. g. 'Red').</remarks>
        </member>
        <member name="M:X11.TColor.BytesFromARGB(System.String)">
            <summary>Parse a hexadecimal string of 3, 4, 6 or 8 characters length to a byte array of color components A, R, G and B.</summary>
            <param name="color">The hexadecimal string of 3, 4, 6 or 8 characters length to parse.<see cref="T:System.String" /></param>
            <returns>The color on success, or a color with fallback values A=255, R=0, G=0 and B=0 for unparsable color components.<see cref="!:Byte[]" /></returns>
        </member>
        <member name="P:X11.TColor.P">
            <summary>Get or set the X11 color pixel, suitable for the current color model (for legacy drawing).</summary>
        </member>
        <member name="P:X11.TColor.IsPixelInitialized">
            <summary>Get or set whether the pixel value has been initialized.</summary>
        </member>
        <member name="P:X11.TColor.R">
            <summary>Get or set the red color component (for advanced drawing with GL or Cairo).</summary>
        </member>
        <member name="P:X11.TColor.G">
            <summary>Get or set the green color component (for advanced drawing with GL or Cairo).</summary>
        </member>
        <member name="P:X11.TColor.B">
            <summary>Get or set the blue color component (for advanced drawing with GL or Cairo).</summary>
        </member>
        <member name="P:X11.TColor.A">
            <summary>Get or set the color transparency component (0 = fully transparent, 255 = fully opaque).</summary>
        </member>
        <member name="P:X11.TColor.RGB">
            <summary>Get or set the color as an ARGB value.</summary>
        </member>
        <member name="P:X11.TColor.ARGB">
            <summary>Get or set the color as an ARGB value.</summary>
        </member>
        <member name="P:X11.TColor.IsFullyTransparent">
            <summary>Get whether the color is fully transparent.</summary>
        </member>
        <member name="M:X11.TColor.Equals(X11.TColor)">
            <summary>Determine whether the current instance of color and a specified color have the same value.</summary>
            <param name="other">The <see cref="T:X11.TColor" /> color to compare with the current instance of color.</param>
            <returns>Returns <see cref="T:System.Boolean" /><c>true</c> on equality, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:X11.TColor.Equals(System.Object)">
            <summary>Determine whether the value of the specified object is equivalent to the current instance
            of <see cref="T:X11.TColor" />.</summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with the current instance of <see cref="T:X11.TColor" />.</param>
            <returns>Return <see cref="T:System.Boolean" /><c>true</c> on equality or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:X11.TColor.CompareTo(System.Object)">
            <summary>Compare the current instance of color with a specified object, which must also be a color, and indicate whether this instance of color
            precedes, follows, or appears in the same position in the sort order as the specified color. </summary>
            <param name="other">The color to compare with the current instance of color.<see cref="T:System.Object" /></param>
            <returns>-1 if the current instance of color is is less than the color to compare to,
            1 if the current instance of color is greater than the color to compare to or
            0 if the current instance of color is equal to the color to compare to.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.TColor.CompareTo(X11.TColor)">
            <summary>Compares the current instance of color with a specified color and indicate whether this instance of color
            precedes, follows, or appears in the same position in the sort order as the specified color.</summary>
            <param name="other">The color to compare with the current instance of color.<see cref="T:X11.TColor" /></param>
            <returns>-1 if the current instance of color is is less than the color to compare to,
            1 if the current instance of color is greater than the color to compare to or
            0 if the current instance of color is equal to the color to compare to.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.TColor.GetHashCode">
            <summary>Retrieve the hash code for this structure.</summary>
            <returns>A <see cref="T:System.Int32" /> 32-bit hash code, which is a signed integer.</returns>
        </member>
        <member name="M:X11.TColor.ColorHTMLNameARGB">
            <summary>Create a System.String representation of this X11.TColor, that includes the alpha blending.</summary>
            <returns>A System.String containing the (X11.TColor.A,) X11.TColor.A, X11.TColor.R, X11.TColor.G and X11.TColor.B
            values of this X11.TColor structure.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.TColor.ColorHTMLNameRGB">
            <summary>Create a System.String representation of this X11.TColor, that excludes the alpha blending.</summary>
            <returns>A System.String containing the (X11.TColor.A,) X11.TColor.R, X11.TColor.G and X11.TColor.B
            values of this X11.TColor structure.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.TColor.ToString">
            <summary>Create a System.String representation of this X11.TColor.</summary>
            <returns>A System.String containing the (X11.TColor.A,) X11.TColor.R, X11.TColor.G and X11.TColor.B
            values of this X11.TColor structure.<see cref="T:System.String" /></returns>
        </member>
        <member name="M:X11.TColor.op_Equality(X11.TColor,X11.TColor)">
            <summary>Evaluates two colors to determine equality.</summary>
            <param name="left">The first color to compare.<see cref="T:X11.TColor" /></param>
            <param name="right">The second color to compare.<see cref="T:X11.TColor" /></param>
            <returns>True on equality, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.TColor.op_Inequality(X11.TColor,X11.TColor)">
            <summary>Evaluates two colors to determine inequality.</summary>
            <param name="left">The first color to compare.<see cref="T:X11.TColor" /></param>
            <param name="right">The second color to compare.<see cref="T:X11.TColor" /></param>
            <returns>True on inequality, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="T:X11.XSetWindowAttributes">
            <summary>The <see cref="T:X11.XSetWindowAttributes" /> structure provides data transfer for XCreateWindow(),
            XGetWindowAttributes(), XChangeWindowAttributes() and XSetWindowAttributes() calls.</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.background_pixmap">
            <summary>The background pixmap value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.background_pixel">
            <summary>The background pixel value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.border_pixmap">
            <summary>The border pixmap value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.border_pixel">
            <summary>The border pixel value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.bit_gravity">
            <summary>The bit gravity value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.win_gravity">
            <summary>The window gravity value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.backing_store">
            <summary>The draw into umpapped window to speed up mapping (aviod Expose event) value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.backing_planes">
            <summary>The planes to be preserved if possible value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.backing_pixel">
            <summary>The  use in restoring planes value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.save_under">
            <summary>The should bits under be saved flag value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.event_mask">
            <summary>The set of events that should be saved value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.do_not_propagate_mask">
            <summary>The set of events that should not propagate value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.override_redirect">
            <summary>The override redirect flag value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.colormap">
            <summary>The color map to be associated with window value (to retrieve or set data).</summary>
        </member>
        <member name="F:X11.XSetWindowAttributes.cursor">
            <summary>The cursor to be displayed value (to retrieve or set data).</summary>
        </member>
        <member name="T:X11.TOrientation">
            <summary> The orientation, a collection can have. </summary>
        </member>
        <member name="F:X11.TOrientation.Horizontal">
            <summary> The collection is oriented horizontally. </summary>
        </member>
        <member name="F:X11.TOrientation.Vertical">
            <summary> The collection is oriented vertically. </summary>
        </member>
        <member name="T:X11.TFrameType">
            <summary> The shadow type to apply a 3D look. </summary>
        </member>
        <member name="F:X11.TFrameType.None">
            <summary> No frame at all. </summary>
        </member>
        <member name="F:X11.TFrameType.FlatRounded">
            <summary> No 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.Raised">
            <summary> The frame appears in raised 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.Sunken">
            <summary> The frame appears in sunken 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.Chiseled">
            <summary> The frame appears in chiseled 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.ChiseledRightOnly">
            <summary> The frame appears in chiseled 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.Ledged">
            <summary> The frame appears in ledged 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.LedgedRightOnly">
            <summary> The frame appears in ledged 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.RaisedTopOnly">
            <summary> The frame appears as bottom aligned raised 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.RaisedLeftOnly">
            <summary> The frame appears as right aligned raised 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.RaisedRightOnly">
            <summary> The frame appears as left aligned raised 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.RaisedBottomOnly">
            <summary> The frame appears as top aligned raised 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.SunkenTopOnly">
            <summary> The frame appears as top aligned sunken 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.SunkenLeftOnly">
            <summary> The frame appears as left aligned tsunken 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.SunkenRightOnly">
            <summary> The frame appears as right aligned sunken 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.SunkenBottomOnly">
            <summary> The frame appears as bottom aligned sunken 3D effect. </summary>
        </member>
        <member name="F:X11.TFrameType.HorzBottDelimiter">
            <summary> The frame appears as bottom aligned menu item delimiter. </summary>
        </member>
        <member name="F:X11.TFrameType.VertRigtDelimiter">
            <summary> The frame appears as right aligned status item delimiter. </summary>
        </member>
        <member name="T:X11.XStateMask">
            <summary>The <see cref="T:X11.XStateMask" /> enumeration specifies the logical state of the pointer buttons and modifier keys.</summary>
            <remarks>The state member is set to indicate the logical state of the pointer buttons and modifier keys just prior to the event, which
            is the bitwise inclusive OR of one or more of the button or modifier key masks. See also <seealso cref="!:X11KeyCodeModifier" />.</remarks>
        </member>
        <member name="F:X11.XStateMask.ShiftMask">
            <summary>Identify the shift key.</summary>
        </member>
        <member name="F:X11.XStateMask.LockMask">
            <summary>Identify the lock key.</summary>
        </member>
        <member name="F:X11.XStateMask.ControlMask">
            <summary>Identify the control key.</summary>
        </member>
        <member name="F:X11.XStateMask.Mod1Mask">
            <summary>Identify the modifier key1. Use XGetKeyBoardMapping() or XChangeKeyBoardMapping for modifier key details.</summary>
        </member>
        <member name="F:X11.XStateMask.Mod2Mask">
            <summary>Identify the modifier key2. Use XGetKeyBoardMapping() or XChangeKeyBoardMapping for modifier key details.</summary>
        </member>
        <member name="F:X11.XStateMask.Mod3Mask">
            <summary>Identify the modifier key3. Use XGetKeyBoardMapping() or XChangeKeyBoardMapping for modifier key details.</summary>
        </member>
        <member name="F:X11.XStateMask.Mod4Mask">
            <summary>Identify the modifier key4. Use XGetKeyBoardMapping() or XChangeKeyBoardMapping for modifier key details.</summary>
        </member>
        <member name="F:X11.XStateMask.Mod5Mask">
            <summary>Identify the modifier key5. Use XGetKeyBoardMapping() or XChangeKeyBoardMapping for modifier key details.</summary>
        </member>
        <member name="F:X11.XStateMask.Button1Mask">
            <summary>Identify the pointer button 1.</summary>
        </member>
        <member name="F:X11.XStateMask.Button2Mask">
            <summary>Identify the pointer button 2.</summary>
        </member>
        <member name="F:X11.XStateMask.Button3Mask">
            <summary>Identify the pointer button 3.</summary>
        </member>
        <member name="F:X11.XStateMask.Button4Mask">
            <summary>Identify the pointer button 4.</summary>
        </member>
        <member name="F:X11.XStateMask.Button5Mask">
            <summary>Identify the pointer button 5.</summary>
        </member>
        <member name="F:X11.XStateMask.AnyModifier">
            <summary>Equivalent for all possible modifier combinations, including the combination of no modifiers.</summary>
        </member>
        <member name="T:X11.XPoint">
            <summary> X11 integer point structure. </summary>
        </member>
        <member name="F:X11.XPoint.X">
            <summary> The x-coordinate. </summary>
        </member>
        <member name="F:X11.XPoint.Y">
            <summary> The x-coordinate. </summary>
        </member>
        <member name="M:X11.XPoint.#ctor(X11.TShort,X11.TShort)">
            <summary> Initializing constructor. </summary>
            <param name="x"> The x-coordinate. <see cref="T:X11.TShort" /></param>
            <param name="y"> The y-coordinate. <see cref="T:X11.TShort" /></param>
        </member>
        <member name="M:X11.XPoint.#ctor(X11.TInt,X11.TInt)">
            <summary> Initializing constructor. </summary>
            <param name="x"> The x-coordinate. <see cref="T:X11.TInt" /></param>
            <param name="y"> The y-coordinate. <see cref="T:X11.TInt" /></param>
        </member>
        <member name="M:X11.XPoint.#ctor(System.Int32,System.Int32)">
            <summary> Initializing constructor. </summary>
            <param name="x"> The x-coordinate. <see cref="T:System.Int32" /></param>
            <param name="y"> The y-coordinate. <see cref="T:System.Int32" /></param>
        </member>
        <member name="T:X11.XRevertTo">
            <summary>The <see cref="T:X11.XRevertTo" /> enumeration specifies the flags, that define the fallback behaviour
            for XGetInputFocus() and XSetInputFocus() calls.</summary>
        </member>
        <member name="F:X11.XRevertTo.RevertToNone">
            <summary>If focus window gets not viewable, the X server passes focus to none (keyboard events are discarded).</summary>
        </member>
        <member name="F:X11.XRevertTo.RevertToPointerRoot">
            <summary>If focus window gets not viewable, the X server passes focus to the pointer root.</summary>
        </member>
        <member name="F:X11.XRevertTo.RevertToParent">
            <summary>If focus window gets not viewable, the X server passes focus to the parent (or the closest viewable ancestor).</summary>
        </member>
        <member name="T:X11.XImageFormat">
            <summary>The <see cref="T:X11.XImageFormat" /> enumeration specifies the image format or XCreateImage() calls.</summary>
        </member>
        <member name="F:X11.XImageFormat.XYBitmap">
            <summary>Single plane (image depth 1) bitmap.</summary>
        </member>
        <member name="F:X11.XImageFormat.XYPixmap">
            <summary>Multi plane (image depth must match the depth of the target drawable) pixmap.</summary>
            <remarks>The pixmap pixels are organized as a set of bitmaps in planes representing individual bit planes.
            With the planes appearing from most-significant to least-significant in bit order.
            Which means for an RGB image - all the red channel data followed by the green and then blue.</remarks>
        </member>
        <member name="F:X11.XImageFormat.ZPixmap">
            <summary>Multi plane (image depth must match the depth of the target drawable) pixmap.</summary>
            <remarks>The pixmap pixels are organized as a set of RGB triplets.</remarks>
        </member>
        <member name="T:X11.XScreenClass">
            <summary>The <see cref="T:X11.XScreenClass" /> enumeration specifies the screen class for XMatchVisualInfo() calls.</summary>
        </member>
        <member name="F:X11.XScreenClass.StaticGray">
            <summary>The screen displays static gray.</summary>
        </member>
        <member name="F:X11.XScreenClass.GrayScale">
            <summary>The screen displays gray scale.</summary>
        </member>
        <member name="F:X11.XScreenClass.StaticColor">
            <summary>The screen displays static color.</summary>
        </member>
        <member name="F:X11.XScreenClass.PseudoColor">
            <summary>The screen displays pseudo color.</summary>
        </member>
        <member name="F:X11.XScreenClass.TrueColor">
            <summary>The screen displays true color.</summary>
        </member>
        <member name="F:X11.XScreenClass.DirectColor">
            <summary>The screen displays direct color.</summary>
        </member>
        <member name="T:X11.XCoordinateMode">
            <summary>The <see cref="T:X11.XCoordinateMode" /> enumeration specifies how to interpret polyline/polygon coordinates.</summary>
        </member>
        <member name="F:X11.XCoordinateMode.CoordModeOrigin">
            <summary>Interpret coordinate values as relative to the origin.</summary>
        </member>
        <member name="F:X11.XCoordinateMode.CoordModePrevious">
            <summary>Interpret coordinate values as relative to previous point.</summary>
        </member>
        <member name="T:X11.XPolygonShape">
            <summary>The <see cref="T:X11.XPolygonShape" /> enumeration specifies the expected complexity of a polygon.</summary>
        </member>
        <member name="F:X11.XPolygonShape.Complex">
            <summary>Assume the polygon paths may intersect.</summary>
        </member>
        <member name="F:X11.XPolygonShape.Nonconvex">
            <summary>Assume the polygon paths don't intersect, but are not convex.</summary>
        </member>
        <member name="F:X11.XPolygonShape.Convex">
            <summary>Assume the polygon is wholly convex.</summary>
        </member>
        <member name="T:X11.XArcMode">
            <summary>The <see cref="T:X11.XArcMode" /> enumeration specifies how to join arc path elements.</summary>
        </member>
        <member name="F:X11.XArcMode.ArcChord">
            <summary>Join the endpoints of arc and arc.</summary>
        </member>
        <member name="F:X11.XArcMode.ArcPieSlice">
            <summary>Join the endpoints of arc to center of arc.</summary>
        </member>
        <member name="T:X11.XCursorFontShape">
            <summary>The <see cref="T:X11.XCursorFontShape" /> enumeration specifies the well known cursor font shapes.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_X_cursor">
            <summary>Identify the X window logo <c>X</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_arrow">
            <summary>Identify the <c>arrow</c> to the right top cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_based_arrow_down">
            <summary>Identify the <c>based arrow down</c> cursor (horizontal double line with arrow down) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_based_arrow_up">
            <summary>Identify the <c>based arrow up</c> (horizontal double line with arrow up) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_boat">
            <summary>Identify the (motor) <c>boat</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_bogosity">
            <summary>Identify the (grid) <c>bogosity</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_bottom_left_corner">
            <summary>Identify the <c>bottom left corner</c> adjust (lower left angle with arrow to lower left) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_bottom_right_corner">
            <summary>Identify the <c>bottom right corner</c> adjust (lower right angle with arrow to right left) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_bottom_side">
            <summary>Identify the <c>bottom side</c> adjust (horizontal line with arrow down) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_bottom_tee">
            <summary>Identify the <c>right tee</c> (horizontal line with vertical branch down) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_box_spiral">
            <summary>Identify the (quadratic) <c>spiral box</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_center_ptr">
            <summary>Identify the <c>center pointer</c> short arrow up cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_circle">
            <summary>Identify the (thick) <c>circle</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_clock">
            <summary>Identify the longcase <c>clock</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_coffee_mug">
            <summary>Identify the <c>coffe mug</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_cross">
            <summary>Identify the double line orthogonal <c>cross</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_cross_reverse">
            <summary>Identify the double line orthogonal and diagonal <c>cross reverse</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_crosshair">
            <summary>Identify the single line orthogonal <c>cross hair</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_diamond_cross">
            <summary>Identify the double line orthogonal <c>diamond cross</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_dot">
            <summary>Identify the huge <c>dot</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_dot_box_mask">
            <summary>Identify the (quadratic) <c>dot box</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_double_arrow">
            <summary>Identify the vertical <c>double arrow</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_draft_large">
            <summary>Identify the based thin line arrow right up <c>draft large</c> (or mirrored top left arrow) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_draft_small">
            <summary>Identify the based thin hair arrow right up <c>draft small</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_draped_box">
            <summary>Identify the (quadratic) <c>draped box</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_exchange">
            <summary>Identify the <c>exchange</c> (two curved arrows creating a circle) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_fleur">
            <summary>Identify the fourfold vertical and horizontal arrow <c>fleur</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_gobbler">
            <summary>Identify the <c>gobbler</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_gumby">
            <summary>Identify the <c>gumby</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_hand1">
            <summary>Identify the black <c>hand 1</c> pointing to the top right cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_hand2">
            <summary>Identify the white <c>hand 2</c> pointing to the top left cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_heart">
            <summary>Identify the not filled <c>heart</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_icon">
            <summary>Identify the (quadratic) <c>icon</c> box cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_iron_cross">
            <summary>Identify the <c>iron cross</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_left_ptr">
            <summary>Identify the <c>left pointer</c> short arrow left up cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_left_side">
            <summary>Identify the <c>left side</c> adjust (vertical line with arrow left) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_left_tee">
            <summary>Identify the <c>right tee</c> (vertical line with horizontal branch to the left) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_leftbutton">
            <summary>Identify the mouse <c>left button</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_ll_angle">
            <summary>Identify the lower left corner <c>ll angle</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_lr_angle">
            <summary>Identify the lower right corner <c>lr angle</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_man">
            <summary>Identify the <c>man</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_middlebutton">
            <summary>Identify the mouse <c>middle button</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_mouse">
            <summary>Identify the <c>mouse</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_pencil">
            <summary>Identify the <c>pencil</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_pirate">
            <summary>Identify the <c>pirate</c> flag icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_plus">
            <summary>Identify the <c>plus</c> sign cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_question_arrow">
            <summary>Identify the <c>question mark arrow</c> down cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_right_ptr">
            <summary>Identify the <c>right pointer</c> short arrow right up cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_right_side">
            <summary>Identify the <c>right side</c> adjust (vertical line with arrow right) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_right_tee">
            <summary>Identify the <c>right tee</c> (vertical line with horizontal branch to the right) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_rightbutton">
            <summary>Identify the mouse <c>left button</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_rtl_logo">
            <summary>Identify the <c>rtl logo</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sailboat">
            <summary>Identify the <c>sail boat</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sb_down_arrow">
            <summary>Identify the double line <c>sb down arrow</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sb_h_double_arrow">
            <summary>Identify the double line <c>sb horizontal double arrow</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sb_left_arrow">
            <summary>Identify the double line <c>sb left arrow</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sb_right_arrow">
            <summary>Identify the double line <c>sb right arrow</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sb_up_arrow">
            <summary>Identify the double line <c>sb up arrow</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sb_v_double_arrow">
            <summary>Identify the double line <c>sb vertical double arrow</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_shuttle">
            <summary>Identify the <c>shuttle</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_sizing">
            <summary>Identify the <c>sizing</c> box icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_spider">
            <summary>Identify the <c>spider</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_spraycan">
            <summary>Identify the <c>spray can</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_star">
            <summary>Identify the five corner not filled <c>star</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_target">
            <summary>Identify the (circle and point) <c>target</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_tcross">
            <summary>Identify the <c>thin cross</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_top_left_arrow">
            <summary>Identify the based thin line arrow left up <c>top left arrow</c> (or mirrored draft large) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_top_left_corner">
            <summary>Identify the <c>top left corner</c> adjust (upper left angle with arrow to upper left) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_top_right_corner">
            <summary>Identify the <c>top right corner</c> adjust (upper right angle with arrow to upper right) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_top_side">
            <summary>Identify the <c>top side</c> adjust (horizontal line with arrow up) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_top_tee">
            <summary>Identify the <c>right tee</c> (horizontal line with vertical branch up) cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_trek">
            <summary>Identify the <c>trek</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_ul_angle">
            <summary>Identify the upper left corner <c>ul angle</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_umbrella">
            <summary>Identify the open <c>umbrella</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_ur_angle">
            <summary>Identify the upper right corner <c>ur angle</c> cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_watch">
            <summary>Identify the <c>watch</c> icon cursor.</summary>
        </member>
        <member name="F:X11.XCursorFontShape.XC_xterm">
            <summary>Identify the <c>x term</c> termina caret cursor.</summary>
        </member>
        <member name="T:X11.XCharStruct">
            <summary>The <see cref="T:X11.XCharStruct" /> structure provides the bounding box of a character.</summary>
        </member>
        <member name="F:X11.XCharStruct.lbearing">
            <summary>The distance from the origin to the left edge of the raster.</summary>
        </member>
        <member name="F:X11.XCharStruct.rbearing">
            <summary>The distance from the origin to the edge edge of the raster.</summary>
        </member>
        <member name="F:X11.XCharStruct.width">
            <summary>The advance to next char's origin.</summary>
        </member>
        <member name="F:X11.XCharStruct.ascent">
            <summary>The distance from the baseline to the top edge of the raster.</summary>
        </member>
        <member name="F:X11.XCharStruct.descent">
            <summary>The distance from the baseline to the bottom edge of the raster.</summary>
        </member>
        <member name="F:X11.XCharStruct.attributes">
            <summary>The character individual flags (not predefined).</summary>
        </member>
        <member name="T:X11.XChar2b">
            <summary>The <see cref="T:X11.XChar2b" /> structure provides 16 bit characters, represented by two separate bytes.</summary>
        </member>
        <member name="F:X11.XChar2b.byte1">
            <summary>The first byte of a 2 byte character.</summary>
        </member>
        <member name="F:X11.XChar2b.byte2">
            <summary>The second byte of a 2 byte character.</summary>
        </member>
        <member name="F:X11.XChar2b.Zero">
            <summary>Represents a <see cref="T:X11.XChar2b" /> that has been initialized to zero.</summary>
        </member>
        <member name="M:X11.XChar2b.#ctor(X11.TUchar,X11.TUchar)">
            <summary>Initialize a new X11lib.XChar2b instance.</summary>
            <param name="b1">The first byte of a 2 byte character.<see cref="T:X11.TUchar" /></param>
            <param name="b2">The first byte of a 2 byte character.<see cref="T:X11.TUchar" /></param>
        </member>
        <member name="M:X11.XChar2b.#ctor(System.Char)">
            <summary>Initialize a new X11lib.XChar2b instance.</summary>
            <param name="c">The character to create a X11lib.XChar2b for.<see cref="T:System.Char" /></param>
        </member>
        <member name="M:X11.XChar2b.op_Equality(X11.XChar2b,X11.XChar2b)">
            <summary>Evaluates two XChar2b to determine equality.</summary>
            <param name="left">The first XChar2b to compare.<see cref="T:X11.XChar2b" /></param>
            <param name="right">The second XChar2b to compare.<see cref="T:X11.XChar2b" /></param>
            <returns>True on equality, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.XChar2b.op_Inequality(X11.XChar2b,X11.XChar2b)">
            <summary>Evaluates two XChar2b to determine inequality.</summary>
            <param name="left">The first XChar2b to compare.<see cref="T:X11.XChar2b" /></param>
            <param name="right">The second XChar2b to compare.<see cref="T:X11.XChar2b" /></param>
            <returns>True on inequality, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.XChar2b.Equals(System.Object)">
            <summary>Determine whether the value of the specified object is equivalent to the current instance
            of <see cref="T:X11.XChar2b" />.</summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with the current instance of <see cref="T:X11.XChar2b" />.</param>
            <returns>Return <see cref="T:System.Boolean" /><c>true</c> on equality or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:X11.XChar2b.CompareTo(System.Object)">
            <summary>Compares the current instance of XChar2b with a specified object, which must also be a XChar2b, and indicate whether this instance of XChar2b
            precedes, follows, or appears in the same position in the sort order as the specified XChar2b. </summary>
            <param name="other">The XChar2b to compare with the current instance of string.<see cref="T:X11.XChar2b" /></param>
            <returns>-1 if the current instance of XChar2b is is less than the XChar2b to compare to,
            1 if the current instance of XChar2b is greater than the XChar2b to compare to or
            0 if the current instance of XChar2b is equal to the XChar2b to compare to.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.XChar2b.CompareTo(X11.XChar2b)">
            <summary>Compares the current instance of XChar2b with a specified XChar2b and indicate whether this instance of XChar2b
            precedes, follows, or appears in the same position in the sort order as the specified XChar2b.</summary>
            <param name="other">The XChar2b to compare with the current instance of XChar2b.<see cref="T:X11.XChar2b" /></param>
            <returns>-1 if the current instance of XChar2b is is less than the XChar2b to compare to,
            1 if the current instance of XChar2b is greater than the XChar2b to compare to or
            0 if the current instance of XChar2b is equal to the XChar2b to compare to.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:X11.XChar2b.GetHashCode">
            <summary>Retrieve the hash code for this structure.</summary>
            <returns>A <see cref="T:System.Int32" /> 32-bit hash code, which is a signed integer.</returns>
        </member>
        <member name="T:X11.XFontStruct">
            <summary>The <c>XFontStruct</c> structure contains all of the information for the font and
            consists of the font-specific information as well as a pointer to an array of XCharStruct
            structures for the characters contained in the font.</summary>
        </member>
        <member name="F:X11.XFontStruct.ext_data">
            <summary>The hook for extension to hang data.</summary>
        </member>
        <member name="F:X11.XFontStruct.fid">
            <summary>The font id for this font.</summary>
        </member>
        <member name="F:X11.XFontStruct.direction">
            <summary>The font id for this font.</summary>
        </member>
        <member name="F:X11.XFontStruct.min_char_or_byte2">
            <summary>The first character.</summary>
        </member>
        <member name="F:X11.XFontStruct.max_char_or_byte2">
            <summary>The last character.</summary>
        </member>
        <member name="F:X11.XFontStruct.min_byte1">
            <summary>The first row that exists.</summary>
        </member>
        <member name="F:X11.XFontStruct.max_byte1">
            <summary>The last row that exists.</summary>
        </member>
        <member name="F:X11.XFontStruct.all_chars_exist">
            <summary>The flag if all characters have nonzero size.</summary>
        </member>
        <member name="F:X11.XFontStruct.default_char">
            <summary>The char to print for undefined character.</summary>
        </member>
        <member name="F:X11.XFontStruct.n_properties">
            <summary>The  how many properties there are.</summary>
        </member>
        <member name="F:X11.XFontStruct.properties">
            <summary>The pointer to array of additional properties.</summary>
        </member>
        <member name="F:X11.XFontStruct.min_bounds">
            <summary>The minimum bounds over all existing char.</summary>
        </member>
        <member name="F:X11.XFontStruct.max_bounds">
            <summary>The maximum bounds over all existing char.</summary>
        </member>
        <member name="F:X11.XFontStruct.per_char">
            <summary>The first_char to last_char information.</summary>
        </member>
        <member name="F:X11.XFontStruct.ascent">
            <summary>The logical extent above baseline for spacing.</summary>
        </member>
        <member name="F:X11.XFontStruct.descent">
            <summary>The logical decent below baseline for spacing.</summary>
        </member>
        <member name="T:X11.XClassHint">
            <summary>The <see cref="T:X11.XClassHint" /> structure provides data transfer for XSetClassHint(), XGetClassHint() calls.</summary>
        </member>
        <member name="F:X11.XClassHint.res_name">
            <summary>The application name.</summary>
        </member>
        <member name="F:X11.XClassHint.res_class">
            <summary>The application class.</summary>
        </member>
        <member name="F:X11.XClassHint.Zero">
            <summary>Represents a <see cref="T:X11.XClassHint" /> that has been initialized to zero.</summary>
        </member>
        <member name="T:X11.XTextProperty">
            <summary>The <see cref="T:X11.XTextProperty" /> structure provides data transfer for
            XStringListToTextProperty(), XTextPropertyToStringList() calls.</summary>
        </member>
        <member name="F:X11.XTextProperty.val">
            <summary>The property datad.</summary>
        </member>
        <member name="F:X11.XTextProperty.encoding">
            <summary>The type of property.</summary>
        </member>
        <member name="F:X11.XTextProperty.format">
            <summary>The format: 8, 16, or 32.</summary>
        </member>
        <member name="F:X11.XTextProperty.nitems">
            <summary>The number of items in value.</summary>
        </member>
        <member name="T:X11.XRectangle">
            <summary>The<see cref="T:X11.XRectangle" /> structure provides the coordinates of a rectangle.</summary>
        </member>
        <member name="F:X11.XRectangle.x">
            <summary>The x coordinate.</summary>
        </member>
        <member name="F:X11.XRectangle.y">
            <summary>The y coordinate.</summary>
        </member>
        <member name="F:X11.XRectangle.width">
            <summary>The width.</summary>
        </member>
        <member name="F:X11.XRectangle.height">
            <summary>The height.</summary>
        </member>
        <member name="M:X11.XRectangle.#ctor(X11.TShort,X11.TShort,X11.TUshort,X11.TUshort)">
            <summary>Initialize a new instance of the <see cref="T:X11.XRectangle" /> structure and initialize the x, y, width and height member,</summary>
            <param name="aX">The <see cref="T:X11.TShort" /> x coordinate to set initially.</param>
            <param name="aY">The <see cref="T:X11.TShort" /> y coordinate to set initially.</param>
            <param name="aWidth">The <see cref="T:X11.TUshort" /> width to set initially.</param>
            <param name="aHeight">The <see cref="T:X11.TUshort" /> height to set initially.</param>
        </member>
        <member name="T:X11.XClipRectanglesOrdering">
            <summary>The <see cref="T:X11.XClipRectanglesOrdering" /> enumeration defines the possible  ordering relations on the rectangles.</summary>
        </member>
        <member name="F:X11.XClipRectanglesOrdering.Unsorted">
            <summary>The rectangles are in arbitrary order.</summary>
        </member>
        <member name="F:X11.XClipRectanglesOrdering.YSorted">
            <summary>The rectangles are nondecreasing in their Y origin.</summary>
        </member>
        <member name="F:X11.XClipRectanglesOrdering.YXSorted">
            <summary>The rectangles are nondecreasing in their Y origin and additionally all rectangles with an equal Y origin are nondecreasing in their X origin.</summary>
        </member>
        <member name="F:X11.XClipRectanglesOrdering.YXBanded">
            <summary>Additionally to <c>YXSorted</c>, for every possible Y scanline, all rectangles that include that scanline have an identical Y origins and Y extents.</summary>
        </member>
        <member name="T:X11.XFontSetExtents">
            <summary>The <see cref="T:X11.XFontSetExtents" /> structure provides access to the maximum character
            extents for the fonts that are used by the text drawing layers.</summary>
        </member>
        <member name="F:X11.XFontSetExtents.max_ink_extent">
            <summary>The maximum extent, over all drawable characters, of the rectangles that bound
            the character glyph image drawn in the foreground color, relative to a constant origin.</summary>
        </member>
        <member name="F:X11.XFontSetExtents.max_logical_extent">
            <summary>The maximum extent, over all drawable characters, of the rectangles that specify
            minimum spacing to other graphical features, relative to a constant origin.</summary>
            <remarks>Other graphical features drawn by the client, for example, a border surrounding
            the text, should not intersect this rectangle. The max_logical_extent member should be used
            to compute minimum interline spacing and the minimum area that must be allowed in a text
            field to draw a given number of arbitrary characters.</remarks>
        </member>
        <member name="T:X11.XGravity">
            <summary>The bit gravity of a window defines which region of the window should be retained when an InputOutput window is resized.</summary>
        </member>
        <member name="F:X11.XGravity.ForgetGravity">
            <summary>Only relevant for bit gravity. Indicates that the window's contents are always discarded after a size change, even if a backing store or save under has been requested.</summary>
        </member>
        <member name="F:X11.XGravity.UnmapGravity">
            <summary>Like <c>NorthWestGravity</c> (the window is not moved), except the child is also unmapped when the parent is resized, and an UnmapNotify event is generated.</summary>
        </member>
        <member name="F:X11.XGravity.NorthWestGravity">
            <summary>The gravity with the coordinates 0, 0.</summary>
        </member>
        <member name="F:X11.XGravity.NorthGravity">
            <summary>The gravity with the coordinates Width/2, 0.</summary>
        </member>
        <member name="F:X11.XGravity.NorthEastGravity">
            <summary>The gravity with the coordinates Width, 0.</summary>
        </member>
        <member name="F:X11.XGravity.WestGravity">
            <summary>The gravity with the coordinates 0, Height/2.</summary>
        </member>
        <member name="F:X11.XGravity.CenterGravity">
            <summary>The gravity with the coordinates Width/2, Height/2.</summary>
        </member>
        <member name="F:X11.XGravity.EastGravity">
            <summary>The gravity with the coordinates Width, Height/2.</summary>
        </member>
        <member name="F:X11.XGravity.SouthWestGravity">
            <summary>The gravity with the coordinates 0, Height.</summary>
        </member>
        <member name="F:X11.XGravity.SouthGravity">
            <summary>The gravity with the coordinates Width/2, Height.</summary>
        </member>
        <member name="F:X11.XGravity.SouthEastGravity">
            <summary>The gravity with the coordinates Width, Height.</summary>
        </member>
        <member name="F:X11.XGravity.StaticGravity">
            <summary>Only relevant for bit gravity. Indicates that the contents or origin should not move relative to the origin of the root window.</summary>
        </member>
        <member name="T:X11.XVisualInfoMask">
            <summary>The <see cref="T:X11.XVisualInfoMask" /> enumeration specifies the flags, that define which visual info value(s)
            is/are to apply (to retrieve or set data via the <see cref="T:X11.XVisualInfo" /> structure).</summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualNoMask">
            <summary>Don't apply any value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualIDMask">
            <summary>Apply the visual ID value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualScreenMask">
            <summary>Apply the screen value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualDepthMask">
            <summary>Apply the depth value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualClassMask">
            <summary>Apply the class value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualRedMaskMask">
            <summary>Apply the red value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualGreenMaskMask">
            <summary>Apply the green value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualBlueMaskMask">
            <summary>Apply the blue value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualColormapSizeMask">
            <summary>Apply the colormap value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualBitsPerRGBMask">
            <summary>Apply the bits per RGB value (to retrieve or set data). </summary>
        </member>
        <member name="F:X11.XVisualInfoMask.VisualAllMask">
            <summary>Apply all values (to retrieve or set data). </summary>
        </member>
        <member name="T:X11.XVisualInfo">
            <summary>The <see cref="T:X11.XVisualInfo" /> structure provides the data exchange for visuals.</summary>
        </member>
        <member name="F:X11.XVisualInfo.visual">
            <summary>The visual. </summary>
        </member>
        <member name="F:X11.XVisualInfo.visualid">
            <summary>The visual ID. </summary>
        </member>
        <member name="F:X11.XVisualInfo.screen">
            <summary>The screen (number). </summary>
        </member>
        <member name="F:X11.XVisualInfo.depth">
            <summary>The color depth. </summary>
        </member>
        <member name="F:X11.XVisualInfo.cls">
            <summary>The class. </summary>
        </member>
        <member name="F:X11.XVisualInfo.red_mask">
            <summary>The red mask. </summary>
        </member>
        <member name="F:X11.XVisualInfo.green_mask">
            <summary>The green mask. </summary>
        </member>
        <member name="F:X11.XVisualInfo.blue_mask">
            <summary>The blue mask. </summary>
        </member>
        <member name="F:X11.XVisualInfo.colormap_size">
            <summary>The size of the color map. </summary>
        </member>
        <member name="F:X11.XVisualInfo.bits_per_rgb">
            <summary>The number of bits per color entry. </summary>
        </member>
        <member name="T:X11.CARD64">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>CARD64</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.CARD32">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>CARD32</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.CARD16">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>CARD16</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.CARD8">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>CARD8</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TChar">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>character</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TUchar">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>unsigned character</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TWchar">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>wide character</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TShort">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>short integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TUshort">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>unsigned short integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TInt">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TUint">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>unsigned integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TLong">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>long integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TUlong">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>unsigned long integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TTime">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>Time</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TLonglong">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>long long integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TUlonglong">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>unsigned long long integer</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TBoolean">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>boolean</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.TPixel">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>pixel</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.Atom">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>pixel</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.Colormap">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>colormap</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.Drawable">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>drawable</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.Font">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>font</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.Time">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>time</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.VisualID">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>visuual ID</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.Window">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>window</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XID">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>X resource ID</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XtEnum">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>Xt enum</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XCardinal">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>cardinal</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XDimension">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>dimension</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XPosition">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>position</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XtVersionType">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>Xt argument value</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XtArgVal">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>Xt version type</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XrmName">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>Xrm name</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XrmClass">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>Xrm class</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.XtValueMask">
            <summary>Try to simulate the <c>typedef</c> macro in order to provide a <c>Xt value mask</c> data type mapping especially for the X11 API.</summary>
        </member>
        <member name="T:X11.Interop">
            <summary>The <see cref="T:X11.Interop" /> class provides compilation target platform information at runtime.</summary>
            <remarks>Evaluates the size of <see cref="T:X11.TPixel" />, taht is different if compiled for x86 or x64.</remarks>
        </member>
        <member name="T:X11.Interop.Platform">
            <summary>Define the platform types.</summary>
        </member>
        <member name="F:X11.Interop.Platform.X86">
            <summary>The platform type is 32 bit.</summary>
        </member>
        <member name="F:X11.Interop.Platform.X64">
            <summary>The platform type is 64 bit.</summary>
        </member>
        <member name="F:X11.Interop.Platform.Unknown">
            <summary>The platform type is unknown.</summary>
        </member>
        <member name="M:X11.Interop.IsCurrentPlatform32Bit">
            <summary>Test current platform type for 32 bit.</summary>
            <returns>True if current platform type is 32 bit, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.Interop.IsCurrentPlatform64Bit">
            <summary>Test current platform type for 64 bit.</summary>
            <returns>True if current platform type is 64 bit, or false otherwise.<see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:X11.Interop.CurrentPlatform">
            <summary>Test for current platform type.</summary>
            <returns>The current platform type.<see cref="T:X11.Interop.Platform" /></returns>
        </member>
        <member name="T:X11.LibC">
            <summary>Identify the part of the c runtime locale.</summary>
        </member>
        <member name="F:X11.LibC.LC_ALL">
            <summary>Identify the entire C locale.</summary>
        </member>
        <member name="F:X11.LibC.LC_COLLATE">
            <summary>Identify the collation category of the C locale.</summary>
        </member>
        <member name="F:X11.LibC.LC_CTYPE">
            <summary>Identify the character classification category of the C locale.</summary>
        </member>
        <member name="F:X11.LibC.LC_MONETARY">
            <summary>Identify the monetary formatting category of the C locale.</summary>
        </member>
        <member name="F:X11.LibC.LC_NUMERIC">
            <summary>Identify selects the numeric formatting category of the C locale.</summary>
        </member>
        <member name="F:X11.LibC.LC_TIME">
            <summary>Identify the time formatting category of the C locale.</summary>
        </member>
        <member name="F:X11.LibC.LC_MESSAGES">
            <summary>Identify themessage formatting category of the C locale.</summary>
        </member>
        <member name="T:X11.X11EventPredicateProc">
            <summary>Prototype a predicate procedure for XIfEvent / XCheckIfEvent / XPeekIfEvent.</summary>
        </member>
        <member name="T:X11.X11EventHelper">
            <summary>Helper class for convenient XIfEvent / XCheckIfEvent / XPeekIfEvent calls.</summary>
        </member>
        <member name="F:X11.X11EventHelper.Matches">
            <summary>Counter of matches.</summary>
            <remarks>Must be resetted by the caller prior usage.</remarks>
        </member>
        <member name="F:X11.X11EventHelper.Event">
            <summary>Event structure.</summary>
            <remarks>Ready to use by the caller.</remarks>
        </member>
        <member name="F:X11.X11EventHelper.CountExposeMatchesProc">
            <summary>The CountExposeMatches predicate procedure instance.</summary>
        </member>
        <member name="F:X11.X11EventHelper.CountExposeMatchesProcPtr">
            <summary>The CountExposeMatches predicate procedure instance pointer.</summary>
        </member>
        <member name="F:X11.X11EventHelper.CountConfigureMatchesProc">
            <summary>The CountConfigureMatches predicate procedure instance.</summary>
        </member>
        <member name="F:X11.X11EventHelper.CountConfigureMatchesProcPtr">
            <summary>The CountConfigureMatches predicate procedure instance pointer.</summary>
        </member>
        <member name="M:X11.X11EventHelper.CountExposeMatches(System.IntPtr,X11.XEvent@,System.IntPtr)">
            <summary>The CountExposeMatches predicate procedure to use with XIfEvent / XCheckIfEvent / XPeekIfEvent calls.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="e">The event structure, used to return a matching event.<see cref="T:X11.XEvent" /></param>
            <param name="window">The window to count the expose events for.<see cref="T:System.IntPtr" /></param>
            <returns>Always false to prevent removing any event from the queue.<see cref="T:X11.TBoolean" /></returns>
        </member>
        <member name="M:X11.X11EventHelper.CountConfigureMatches(System.IntPtr,X11.XEvent@,System.IntPtr)">
            <summary>The CountConfigureMatches predicate procedure to use with XIfEvent / XCheckIfEvent / XPeekIfEvent calls.</summary>
            <param name="x11display"> The display pointer, that specifies the connection to the X server. <see cref="T:System.IntPtr" /></param>
            <param name="e">The event structure, used to return a matching event.<see cref="T:X11.XEvent" /></param>
            <param name="window">The window to count the configure events for.<see cref="T:System.IntPtr" /></param>
            <returns>Always false to prevent removing any event from the queue.<see cref="T:X11.TBoolean" /></returns>
        </member>
        <member name="M:X11.X11EventHelper.CountPendingExposeEvents(System.IntPtr,System.IntPtr)">
            <summary>Count the pending expose events for indicated <c>display</c> and indicated <c>window</c>.</summary>
            <param name="display">The connection to the server.<see cref="T:System.IntPtr" /></param>
            <param name="window">The window to count the pending expose events for.<see cref="T:System.IntPtr" /></param>
            <returns>The number of pending expose events on success, or <c>0</c> otherwise.<see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:X11.XChangePropertyMode">
            <summary>The <see cref="T:X11.XChangePropertyMode" /> enumeration defines the mode of operation for property changes.</summary>
        </member>
        <member name="F:X11.XChangePropertyMode.PropModeReplace">
            <summary>Replace property values.</summary>
        </member>
        <member name="F:X11.XChangePropertyMode.PropModePrepend">
            <summary>Prepend property values.</summary>
        </member>
        <member name="F:X11.XChangePropertyMode.PropModeAppend">
            <summary>Append property values.</summary>
        </member>
        <member name="T:X11.XKeyCodeModifier">
            <summary>The <see cref="T:X11.XKeyCodeModifier" /> enumeration defines the possible key code modifiers.</summary>
            <remarks>See also <seealso cref="T:X11.XStateMask" />.</remarks>
        </member>
        <member name="F:X11.XKeyCodeModifier.NoneOrShift">
            <summary>Complies with ShiftMapIndex = 0; /usr/include/X11/X.h; line:237</summary>
        </member>
        <member name="F:X11.XKeyCodeModifier.Lock">
            <summary>Complies with LockMapIndex = 1; /usr/include/X11/X.h; line:238</summary>
        </member>
        <member name="F:X11.XKeyCodeModifier.Control">
            <summary>Complies with ControlMapIndex = 2; /usr/include/X11/X.h; line:239</summary>
        </member>
        <member name="F:X11.XKeyCodeModifier.Mod1">
            <summary>Complies with Mod1MapIndex = 3; /usr/include/X11/X.h; line:240</summary>
        </member>
        <member name="F:X11.XKeyCodeModifier.Mod2">
            <summary>Complies with Mod2MapIndex = 4; /usr/include/X11/X.h; line:241</summary>
        </member>
        <member name="F:X11.XKeyCodeModifier.Mod3">
            <summary>Complies with Mod3MapIndex = 5; /usr/include/X11/X.h; line:242</summary>
        </member>
        <member name="F:X11.XKeyCodeModifier.Mod4">
            <summary>Complies with Mod4lMapIndex = 6; /usr/include/X11/X.h; line:243</summary>
        </member>
        <member name="F:X11.XKeyCodeModifier.Mod5">
            <summary>Complies with Mod5MapIndex = 7; /usr/include/X11/X.h; line:244</summary>
        </member>
        <member name="T:X11.XAtoms">
            <summary>The built-in property types.</summary>
            <remarks>Atoms are 32-bit integers representing strings.</remarks>
        </member>
        <member name="F:X11.XAtoms.AnyPropertyType">
            <summary>Identify the <c>property type</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_PRIMARY">
            <summary>Identify the <c>primary</c> (selection) string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_SECONDARY">
            <summary>Identify the <c>secondary</c> (selection) string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_ARC">
            <summary>Identify the <c>arc</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_ATOM">
            <summary>Identify the <c>atom</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_BITMAP">
            <summary>Identify the <c>bitmap</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CARDINAL">
            <summary>Identify the <c>cardinal</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_COLORMAP">
            <summary>Identify the <c>colormap</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CURSOR">
            <summary>Identify the <c>cursor</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER0">
            <summary>Identify the <c>buffer 0</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER1">
            <summary>Identify the <c>buffer 1</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER2">
            <summary>Identify the <c>buffer 2</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER3">
            <summary>Identify the <c>buffer 3</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER4">
            <summary>Identify the <c>buffer 4</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER5">
            <summary>Identify the <c>buffer 5</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER6">
            <summary>Identify the <c>buffer 6</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CUT_BUFFER7">
            <summary>Identify the <c>buffer 7</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_DRAWABLE">
            <summary>Identify the <c>drawable</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_FONT">
            <summary>Identify the <c>font</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_INTEGER">
            <summary>Identify the <c>integer</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_PIXMAP">
            <summary>Identify the <c>pixmap</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_POINT">
            <summary>Identify the <c>point</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RECTANGLE">
            <summary>Identify the <c>rectangle</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RESOURCE_MANAGER">
            <summary>Identify the <c>resource manager</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RGB_COLOR_MAP">
            <summary>Identify the <c>RGB color map</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RGB_BEST_MAP">
            <summary>Identify the <c>RGB best map</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RGB_BLUE_MAP">
            <summary>Identify the <c>RGB blue map</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RGB_DEFAULT_MAP">
            <summary>Identify the <c>RGB default map</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RGB_GRAY_MAP">
            <summary>Identify the <c>RGB  gray map</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RGB_GREEN_MAP">
            <summary>Identify the <c>RGB green map</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RGB_RED_MAP">
            <summary>Identify the <c>RGB red map</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_STRING">
            <summary>Identify the <c>string</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_VISUALID">
            <summary>Identify the <c>visual ID</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WINDOW">
            <summary>Identify the <c>window</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_COMMAND">
            <summary>Identify the <c>command</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_HINTS">
            <summary>Identify the <c>WM hints</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_CLIENT_MACHINE">
            <summary>Identify the <c>WM client machine</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_ICON_NAME">
            <summary>Identify the <c>WM icon name</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_ICON_SIZE">
            <summary>Identify the <c>WM icon size</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_NAME">
            <summary>Identify the <c>WM name</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_NORMAL_HINTS">
            <summary>Identify the <c>WM normal hinte</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_SIZE_HINTS">
            <summary>Identify the <c>WM size hints</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_ZOOM_HINTS">
            <summary>Identify the <c>WM zoom hints</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_MIN_SPACE">
            <summary>Identify the <c>min. space</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_NORM_SPACE">
            <summary>Identify the <c>norm. space</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_MAX_SPACE">
            <summary>Identify the <c>max. space</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_END_SPACE">
            <summary>Identify the <c>end space</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_SUPERSCRIPT_X">
            <summary>Identify the <c>superscript x</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_SUPERSCRIPT_Y">
            <summary>Identify the <c>superscript y</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_SUBSCRIPT_X">
            <summary>Identify the <c>subscript x</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_SUBSCRIPT_Y">
            <summary>Identify the <c>subscript y</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_UNDERLINE_POSITION">
            <summary>Identify the <c>underline position</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_UNDERLINE_THICKNESS">
            <summary>Identify the <c>underline thickness</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_STRIKEOUT_ASCENT">
            <summary>Identify the <c>strikeout ascent</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_STRIKEOUT_DESCENT">
            <summary>Identify the <c>strikeout descent</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_ITALIC_ANGLE">
            <summary>Identify the <c>italic angle</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_X_HEIGHT">
            <summary>Identify the <c>x height</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_QUAD_WIDTH">
            <summary>Identify the <c>quad width</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WEIGHT">
            <summary>Identify the <c>weight</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_POINT_SIZE">
            <summary>Identify the <c>spoint size</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_RESOLUTION">
            <summary>Identify the <c>resolution</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_COPYRIGHT">
            <summary>Identify the <c>copyright</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_NOTICE">
            <summary>Identify the <c>notice</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_FONT_NAME">
            <summary>Identify the font <c>name</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_FAMILY_NAME">
            <summary>Identify the font <c>family name</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_FULL_NAME">
            <summary>Identify the font <c>full family name</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_CAP_HEIGHT">
            <summary>Identify the <c>capital letter height</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_CLASS">
            <summary>Identify the <c>WM class</c> string.</summary>
        </member>
        <member name="F:X11.XAtoms.XA_WM_TRANSIENT_FOR">
            <summary>Identify the <c>WM transient for</c> string.</summary>
        </member>
        <member name="T:X11.X11DisplayDrawable">
            <summary>The <see cref="T:X11.X11DisplayDrawable" /> class represents a drawable, attached to a display.</summary>
        </member>
        <member name="F:X11.X11DisplayDrawable._display">
            <summary>The X11 display pointer.</summary>
        </member>
        <member name="F:X11.X11DisplayDrawable._screenNumber">
            <summary>The X11 screen number.</summary>
        </member>
        <member name="F:X11.X11DisplayDrawable._drawable">
            <summary>The X11 *** parent *** window for gadgets or the X11 *** own *** window for widgets or a X11 pixmap.</summary>
        </member>
        <member name="M:X11.X11DisplayDrawable.#ctor(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>Initializing constructor.</summary>
            <param name="display">The X11 display pointer.<see cref="T:System.IntPtr" /></param>
            <param name="screenNumber">The X11 screen number.<see cref="T:System.Int32" /></param>
            <param name="drawable">The X11 *** parent *** window for gadgets or
            the X11 *** own *** window for widgets or
            the X11 pixmap of a 'writable picture' bitmap image.<see cref="T:System.IntPtr" /></param>
        </member>
        <member name="P:X11.X11DisplayDrawable.Display">
            <summary>Get the X11 display pointer.</summary>
        </member>
        <member name="P:X11.X11DisplayDrawable.ScreenNumber">
            <summary>Get the X11 screen number.</summary>
        </member>
        <member name="P:X11.X11DisplayDrawable.Drawable">
            <summary>Get the X11 *** parent *** window for gadgets or
            the X11 *** own *** window for widgets or
            the X11 pixmap of a 'writable picture' bitmap image.</summary>
        </member>
        <member name="T:X11.DataFormats">
            <summary>The <see cref="T:X11.DataFormats" /> class provides a set of predefined data format names that can be used
            to identify data formats available in the clipboard or drag-and-drop operations.</summary>
        </member>
        <member name="F:X11.DataFormats.Text">
            <summary>Specify the ANSI text data format.</summary>
        </member>
        <member name="F:X11.DataFormats.UnicodeText">
            <summary>Specify the Unicode text data format.</summary>
        </member>
        <member name="T:X11.ClipboardGetResultDelegate">
            <summary> Prototype the ClipboardGetResult handler. </summary>
            <param name="result"> The result, provided by the clipboard. <see cref="T:System.Object" /></param>
        </member>
        <member name="T:X11.X11Clipboard">
            <summary>The <see cref="T:X11.X11Clipboard" /> class provides static methods that facilitate transferring data to and
            from the system Clipboard.</summary>
        </member>
        <member name="F:X11.X11Clipboard._clipboardData">
            <summary>Puffer clipboard data between the time of ProvideClipboardText() call and the request for clipboard data.</summary>
        </member>
        <member name="E:X11.X11Clipboard._treatClipboardResultDelegate">
            <summary>Register ClipboardGetResult event handler.</summary>
        </member>
        <member name="P:X11.X11Clipboard.ClipboardData">
            <summary>Puffer clipboard data between the time of ProvideClipboardText() call and the request for clipboard data.</summary>
        </member>
        <member name="P:X11.X11Clipboard.TreatClipboardResultDelegate">
            <summary>Get the prototype the delegate, that processes the clipboard request result.</summary>
            <value>The prototype the delegate, that processes the clipboard request result.</value>
            <remarks>The processing of the clipboard request result (typically an UTF8_STRING) must be postponed
            until the complete communication procedure between clipboard owner (tapically a foreign application)
            and clipboard requestor (always this application) is finished. This includes 2x2 events at least, that
            have to be exchanged between clipboard requestor and clipboard owner.</remarks>
        </member>
        <member name="M:X11.X11Clipboard.ProvideClipboardText(System.IntPtr,System.IntPtr,System.IntPtr,X11.TTime,System.Object)">
               Legacy X11 compatible method. Provides clipboard data hosted by the widget, that originally owns the data, to any requestor. **<summary>Register as data provider for clipboard interaction.</summary><param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param><param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable pointer, that specifies the window to register as data provider for clipboard interaction.</param><param name="selection">The <see cref="T:System.IntPtr" /> selection atom, that defines the selection buffer to use. Predefined are CLIPBOARD, PRIMARY and SECONDARY.</param><param name="time">The <see cref="T:X11.TTime" /> time the event (typical mouse or button) occurs, that triggers this clipboard interaction.</param><param name="data">The <see cref="T:System.Object" /> data to provide to the clipboard.</param><returns>True on success, or false otherwise.<see cref="T:System.Boolean" /></returns></member>
        <member name="M:X11.X11Clipboard.RequestClipboardTypes(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,X11.TTime)">
            <summary>Ask the clipboard selection owner for supported formats.</summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable pointer, that specifies the window to ask for supported formats.</param>
            <param name="selection">The <see cref="T:System.IntPtr" /> selection atom, that defines the selection buffer to use. Predefined are CLIPBOARD, PRIMARY and SECONDARY.</param>
            <param name="target">The <see cref="T:System.IntPtr" /> target atom, that defines the requested format.</param>
            <param name="property">The <see cref="T:System.IntPtr" /> property atom, that identifies the data buffer for data transfer.</param>
            <param name="time">The <see cref="T:X11.TTime" /> time the event (typical mouse or button) occurs, that triggers this clipboard interaction.</param>
        </member>
        <member name="M:X11.X11Clipboard.RequestClipboardOwner(System.IntPtr,System.IntPtr,System.IntPtr[],System.IntPtr@)">
            <summary>Ask the clipboard selection owner for STRING (plain text) data.</summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable pointer, that specifies the window to ask for STRING (plain text) data.</param>
            <param name="possibleSelections">The <see cref="T:System.IntPtr" />[] of selection atoms, that define the possible selection buffer to use.
            Predefined are CLIPBOARD, PRIMARY and SECONDARY.</param>
            <param name="selection">The <see cref="T:System.IntPtr" /> selection atom, that defines the selection buffer to use. Predefined are CLIPBOARD, PRIMARY and SECONDARY.</param>
            <returns>Returns <see cref="T:System.IntPtr" />the selection owner.</returns>
        </member>
        <member name="M:X11.X11Clipboard.RequestClipboardData(System.IntPtr,System.IntPtr,System.IntPtr[],System.IntPtr,System.IntPtr,X11.TTime)">
            <summary>Ask the clipboard selection owner for STRING (plain text) data.</summary>
            <param name="x11display"> The <see cref="T:System.IntPtr" /> display pointer, that specifies the connection to the X server.</param>
            <param name="x11drawable">The <see cref="T:System.IntPtr" /> drawable pointer, that specifies the window to ask for STRING (plain text) data.</param>
            <param name="possibleSelections">The <see cref="T:System.IntPtr" />[] of selection atoms, that define the possible selection buffer to use.
            Predefined are CLIPBOARD, PRIMARY and SECONDARY.</param>
            <param name="target">The <see cref="T:System.IntPtr" /> target atom, that defines the requested format.</param>
            <param name="property">The <see cref="T:System.IntPtr" /> property atom, that identifies the data buffer for data transfer.</param>
            <param name="time">The <see cref="T:X11.TTime" /> time the event (typical mouse or button) occurs, that triggers this clipboard interaction.</param>
        </member>
    </members>
</doc>
